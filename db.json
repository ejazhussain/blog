{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":0},{"_id":"source/images/code.svg","path":"images/code.svg","modified":1,"renderable":0},{"_id":"source/images/header-background.svg","path":"images/header-background.svg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-ejazhussain/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"source/images/post/Sign-In-As-Different-User-In-SharePoint-2013-2016.jpg","path":"images/post/Sign-In-As-Different-User-In-SharePoint-2013-2016.jpg","modified":1,"renderable":0},{"_id":"source/images/post/azure-appinsight-configurations-using-spfx-customizer.png","path":"images/post/azure-appinsight-configurations-using-spfx-customizer.png","modified":1,"renderable":0},{"_id":"source/images/post/azure-blob-storage-using-node.jpg","path":"images/post/azure-blob-storage-using-node.jpg","modified":1,"renderable":0},{"_id":"source/images/post/microsoft-graph-extensions-in-spfx.jpg","path":"images/post/microsoft-graph-extensions-in-spfx.jpg","modified":1,"renderable":0},{"_id":"source/images/post/SharePoint-Online-Integration-with-Azure-App-Insights.png","path":"images/post/SharePoint-Online-Integration-with-Azure-App-Insights.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-ejazhussain/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"source/images/post/azure-appinsight-configurations-using-spfx-customizer.jpg","path":"images/post/azure-appinsight-configurations-using-spfx-customizer.jpg","modified":1,"renderable":0},{"_id":"source/images/post/list-json-formatting.jpg","path":"images/post/list-json-formatting.jpg","modified":1,"renderable":0},{"_id":"source/images/post/spfx-office365-reports.jpg","path":"images/post/spfx-office365-reports.jpg","modified":1,"renderable":0},{"_id":"source/images/postcover/postcover-3.jpg","path":"images/postcover/postcover-3.jpg","modified":1,"renderable":0},{"_id":"source/images/post/Import-Terms-From-CSV.jpg","path":"images/post/Import-Terms-From-CSV.jpg","modified":1,"renderable":0},{"_id":"source/images/post/spfx-image-gallery.jpg","path":"images/post/spfx-image-gallery.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-ejazhussain/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"source/images/postcover/postcover-4.jpg","path":"images/postcover/postcover-4.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-ejazhussain/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/banner/7.jpg","path":"medias/banner/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"source/images/post/access-graph-api-using-spfx-with-azurefunction.png","path":"images/post/access-graph-api-using-spfx-with-azurefunction.png","modified":1,"renderable":0},{"_id":"source/images/post/sharepoint-approval-task-using-flow.jpg","path":"images/post/sharepoint-approval-task-using-flow.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"source/images/post/react-hooks.jpg","path":"images/post/react-hooks.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-ejazhussain/source/medias/profile.png","path":"medias/profile.png","modified":1,"renderable":1},{"_id":"source/images/about.jpg","path":"images/about.jpg","modified":1,"renderable":0},{"_id":"source/images/postcover/postcover-1.jpg","path":"images/postcover/postcover-1.jpg","modified":1,"renderable":0},{"_id":"source/images/postcover/postcover-2.jpg","path":"images/postcover/postcover-2.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-ejazhussain/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/_redirects","hash":"392fcf3dfe1916d48ac89781918cba2d4799e2c4","modified":1555247346516},{"_id":"source/robots.txt","hash":"19c6e02fa4cb963d8c20876346a613a50ba86716","modified":1555247346552},{"_id":"themes/hexo-theme-ejazhussain/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1584285376843},{"_id":"themes/hexo-theme-ejazhussain/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1584285376845},{"_id":"themes/hexo-theme-ejazhussain/README.md","hash":"4eafe6ed4692bb58353b4b1f7abc82a2e912bdd1","modified":1586556950254},{"_id":"themes/hexo-theme-ejazhussain/_config.yml","hash":"dcf4d8b731c322abcd67f17a2d5d5e9d53f87d34","modified":1596300993623},{"_id":"source/_posts/Import-Terms-From-CSV.md","hash":"88f4b868676b5b8df77b9ed60762bb701a9cf7bb","modified":1584285376696},{"_id":"source/_posts/SharePoint-Online-Integration-with-Azure-App-Insights.md","hash":"ed3776a69a9b1373e1f6d553e3751797b6c8bd7c","modified":1584285376698},{"_id":"source/_posts/Sign-In-As-Different-User-In-SharePoint-2013-2016.md","hash":"abcb1634ffa60d8904af660c9cb9cb9f74249bfe","modified":1584358608855},{"_id":"source/_posts/access-graphapi-using-spfx-with-securedazurefunction.md","hash":"407edeceed689bbfc1d4c802f881b9074db091b3","modified":1586553760808},{"_id":"source/_posts/azure-appinsight-configurations-using-spfx-customizer.md","hash":"644b3d4f4b22eda527a204f064a8e6c747be4114","modified":1584285376703},{"_id":"source/_posts/azure-blob-storage-using-node.md","hash":"1ea5fca02694b75c5ce2fa9b49928136274716d6","modified":1584285376704},{"_id":"source/_posts/how-to-usecontext-with-usereducer-in-spfx.md","hash":"42a9e20cd28c3837ed52322001e6e260f4e00af6","modified":1592477412756},{"_id":"source/_posts/list-json-formatting.md","hash":"ea19cddc16118f293086ac4cb231769655cd2845","modified":1584285376706},{"_id":"source/_posts/microsoft-graph-extensions-in-spfx.md","hash":"409387193611131266c5af1adbfa3e07e503d4e6","modified":1584285376708},{"_id":"source/_posts/msteams-staticapp-sso.md","hash":"0c9351030f13c0c8d0f04a5e60b71ba46b9b3343","modified":1596300393758},{"_id":"source/_posts/sharepoint-approval-task-using-flow.md","hash":"51af8704b56147279085d21fa3932bee820d04b4","modified":1584285376718},{"_id":"source/_posts/spfx-image-gallery.md","hash":"1664fb2e9c42851193c0f8669ee00b0faecf9f9c","modified":1584285376720},{"_id":"source/_posts/spfx-office365-reports.md","hash":"b8a2274d013429b266dc3e12ee50af059299b90f","modified":1584285376722},{"_id":"source/about/index.md","hash":"11e290cd92b471be191a2bf08848075b9fae3664","modified":1584285376723},{"_id":"source/categories/index.md","hash":"9548e2913e162b8f2cce6c9dc67f82267175867d","modified":1584285376724},{"_id":"source/contact/index.md","hash":"44ef14f728fc49a1b00fa50facd2065db79016d2","modified":1584285376724},{"_id":"source/images/favicon.ico","hash":"57e19c18bfe2f77a1bc3229dc104114dc171ce72","modified":1534675828293},{"_id":"source/images/code.svg","hash":"ac38cfd4b89734536d02cd3d0c6d690afb2e980d","modified":1534675828291},{"_id":"source/images/header-background.svg","hash":"33c1473426f5d518e073708f58b6147abc250745","modified":1534675828299},{"_id":"source/tags/index.md","hash":"a2dcdd1c13642f5d86e9b7624b6190fd64c49fa3","modified":1584285376750},{"_id":"themes/hexo-theme-ejazhussain/languages/default.yml","hash":"5236d19aa583c583807c7b7771455addb6c7dac2","modified":1592431684522},{"_id":"themes/hexo-theme-ejazhussain/layout/about.ejs","hash":"dc4b39171911b412b0bb8e71216b6ef55bf8d7e3","modified":1584285376886},{"_id":"themes/hexo-theme-ejazhussain/layout/archive.ejs","hash":"b9814b3af9a99f4b3ce38dc35b6312640bd2f871","modified":1584285376887},{"_id":"themes/hexo-theme-ejazhussain/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1584285376888},{"_id":"themes/hexo-theme-ejazhussain/layout/category.ejs","hash":"bd7354fcffc2de1658b66b096c3930e6034d88d1","modified":1584285376889},{"_id":"themes/hexo-theme-ejazhussain/layout/friends.ejs","hash":"56523c35cd7b3e1279089b3d2b38f0a521d787ef","modified":1584285376890},{"_id":"themes/hexo-theme-ejazhussain/layout/contact.ejs","hash":"c3396cc5b1cbb102f500554f76946f5b45ee6d54","modified":1584285376889},{"_id":"themes/hexo-theme-ejazhussain/layout/index.ejs","hash":"13b6e3326f2a1b27b4c7ece814fdfa1775732281","modified":1586553760909},{"_id":"themes/hexo-theme-ejazhussain/layout/layout.ejs","hash":"742ea3634e57b06c9393a71865c883b1fd26a111","modified":1584285376892},{"_id":"themes/hexo-theme-ejazhussain/layout/post.ejs","hash":"50de0534a025d830758abc9d542960a66df2b1ba","modified":1584285376893},{"_id":"themes/hexo-theme-ejazhussain/layout/tag.ejs","hash":"dadb393176d0ef03c5990a387f7160526e67b704","modified":1584285376893},{"_id":"themes/hexo-theme-ejazhussain/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1584285376894},{"_id":"themes/hexo-theme-ejazhussain/source/favicon.png","hash":"e1a500f5aac00ffc76ac0a86569d7d8535014c9c","modified":1584307438054},{"_id":"source/images/avatar.jpg","hash":"445c00332b7f381b21820ea422e5bc7f4f236aaa","modified":1534675828288},{"_id":"source/_posts/Import-Terms-From-CSV/groups.csv","hash":"dd689ba0e997104b7b95982b356a60630e03944a","modified":1535393308861},{"_id":"source/_posts/Import-Terms-From-CSV/post-featured.png","hash":"095a5343c66aaa0e4c78967426bd20b68d5324e9","modified":1555247346334},{"_id":"source/_posts/Import-Terms-From-CSV/samplecsv.png","hash":"c2e5be5e134fb673f398e41b512d6415e0bbb908","modified":1535393308862},{"_id":"source/_posts/SharePoint-Online-Integration-with-Azure-App-Insights/js-code-snippet.png","hash":"105df3e9a41c7f0d24a39887053805be1803b944","modified":1555247346343},{"_id":"source/_posts/SharePoint-Online-Integration-with-Azure-App-Insights/customevents.png","hash":"260efd30e5415bd25a6f128440ad0cd4a429ddda","modified":1555247346341},{"_id":"source/_posts/access-graphapi-using-spfx-with-securedazurefunction/SPFx-webapi-permissions.png","hash":"758655d5319fb72c892fb063ad046bf2ef4724c9","modified":1586553760810},{"_id":"source/_posts/access-graphapi-using-spfx-with-securedazurefunction/graph-api-permissions.png","hash":"6dafce40e7a84fc9a0919241905dbec21fa09340","modified":1586553760892},{"_id":"source/_posts/access-graphapi-using-spfx-with-securedazurefunction/keyvault.png","hash":"6db886c6bee3fe9594c139747e82fc11e5101df3","modified":1586553760893},{"_id":"source/_posts/azure-appinsight-configurations-using-spfx-customizer/custom-properties.png","hash":"5d69b91ed0144937382e23a081f84820c15dd4ed","modified":1555247346396},{"_id":"source/_posts/how-to-usecontext-with-usereducer-in-spfx/react-hooks-listitems-output.png","hash":"9cfb8106013207be5fdb04e83a8e4013af42ad69","modified":1592433607938},{"_id":"source/_posts/microsoft-graph-extensions-in-spfx/Thumbs.db","hash":"e02beb4fd3eb0707502b4f5aaf4c9b41ad98cf08","modified":1571517078792},{"_id":"source/_posts/microsoft-graph-extensions-in-spfx/create-graph-extension-schema.png","hash":"0682c1ca771be207e53b0a454ba03947baf4db4a","modified":1571496354996},{"_id":"source/_posts/microsoft-graph-extensions-in-spfx/create-graph-extension.png","hash":"4f7f9bc18e00228196c5063185dc59848cfa85bc","modified":1571496354997},{"_id":"source/_posts/microsoft-graph-extensions-in-spfx/delete-graph-extension.png","hash":"152af8064425f1918f690c2e86b36af9fb674e7a","modified":1571496354998},{"_id":"source/_posts/microsoft-graph-extensions-in-spfx/get-graph-extension.png","hash":"528ee73615c30b54257b3263bec697dd5147d5eb","modified":1571496355000},{"_id":"source/_posts/microsoft-graph-extensions-in-spfx/patch-graph-extension.png","hash":"d6038874a84f789233e9c514002c1bf600960c5a","modified":1571496355002},{"_id":"source/_posts/microsoft-graph-extensions-in-spfx/graph-extension-user-permissions.png","hash":"34213551d57b05ff660ec4a3b1f4e3efe56f56c6","modified":1571496355001},{"_id":"source/_posts/msteams-staticapp-sso/azure-ad-auth.jpg","hash":"6d51fe4c57528e6064a118496d955f9bd22b19fb","modified":1596300393760},{"_id":"source/_posts/msteams-staticapp-sso/final-output.png","hash":"68134d65bb50937d88b0e6f64eed3c57bbd16bdd","modified":1596300393761},{"_id":"source/_posts/spfx-image-gallery/taxonomy-query.png","hash":"ff5399f40f9947021edbc0f30ab5e29d9912737e","modified":1555247346468},{"_id":"source/_posts/spfx-office365-reports/chartjs-redraw-method.png","hash":"f8b9f0f76d34d0e9e1aefcdab0b9bc2af098d004","modified":1555247346471},{"_id":"source/_posts/spfx-office365-reports/final-output-onedrive.png","hash":"16fa1cdeeaca7d5777fd371a4aa4087abf56bae7","modified":1555247346481},{"_id":"source/_posts/spfx-office365-reports/final-output-outlook.png","hash":"948817b260f710f05a5e3b33f418e108df1dacc7","modified":1555247346493},{"_id":"source/_posts/spfx-office365-reports/final-output-sharepoint.png","hash":"45fe48aaca2ac497fce0907dede3852699586cd9","modified":1555247346495},{"_id":"source/_posts/spfx-office365-reports/graph-api-permissions-usage-reports.png","hash":"97233d3b4d89c7810f8f246b6a09b3f8f3daf478","modified":1555247346496},{"_id":"source/_posts/spfx-office365-reports/post-featured.png","hash":"948817b260f710f05a5e3b33f418e108df1dacc7","modified":1555247346498},{"_id":"source/images/post/Sign-In-As-Different-User-In-SharePoint-2013-2016.jpg","hash":"3614d00caca35e1e44a9c1c6d5af41598c75761a","modified":1584285376728},{"_id":"source/images/post/azure-appinsight-configurations-using-spfx-customizer.png","hash":"ed6f3f1f458952af488f59cd2ef5e17676084a5f","modified":1584285376730},{"_id":"source/images/post/azure-blob-storage-using-node.jpg","hash":"de59cc8f724713b4e1d62796d74902934a87ca06","modified":1584285376731},{"_id":"source/images/post/microsoft-graph-extensions-in-spfx.jpg","hash":"c5fb103bc5baedd9bc3dd842e575fee47710db27","modified":1584285376734},{"_id":"source/images/post/SharePoint-Online-Integration-with-Azure-App-Insights.png","hash":"1349fc0475fc7180630ce48c23659e334c5c07ac","modified":1584285376727},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/back-top.ejs","hash":"0ef298868abf624abdcc749417d76e381fa5b71c","modified":1584285376850},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1584285376851},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1584285376852},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/bg-cover-content.ejs","hash":"86b6beb1be6ebe1d002d82654feb0e2545115900","modified":1596300946864},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1584285376854},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/disqus.ejs","hash":"3978a4eca0eb6b8294475c2982ad4a040ee33277","modified":1584285376854},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/footer.ejs","hash":"19bc7107f34528026485d546c0e43aeed10e75fb","modified":1584285376855},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1584285376857},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/gitalk.ejs","hash":"117cade32db096798e4f270305cc129bac565332","modified":1584285376856},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/gitment.ejs","hash":"d2d8c54432fce2468ee699a3bcba35bf8fcdf859","modified":1584285376858},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/google-analytics.ejs","hash":"5e65a8b492653a23c85f8926d64ab9572d6b87a7","modified":1586556950260},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/head.ejs","hash":"38b49e264f6fab4d05b345926b2d866d2954b336","modified":1584285376860},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/header.ejs","hash":"7d33279f1b8c276af7b3dbf021fd2559cbaaa086","modified":1584307438052},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/index-cover.ejs","hash":"d3a80e67eb970a7be825735ec34dce1695812eb8","modified":1584285376861},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/livere.ejs","hash":"d221d2c3a5b18ae4309060a7bfe7a5d4a73ee065","modified":1586553760900},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/mobile-nav.ejs","hash":"9c4fa44cde5b8c50e244c08b7d319753d4ff6d07","modified":1584285376863},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/navigation.ejs","hash":"7b0cd7bcde29cd6b2fc5d2d9345e1793b27359b7","modified":1584285376864},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1584285376865},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/post-cover.ejs","hash":"122041aaf57c76d6b0a7db221cca78b81a32e700","modified":1584285376865},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/post-detail.ejs","hash":"1f186f204e17166667e4829677aac330938026cd","modified":1592433607967},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/post-detail-toc.ejs","hash":"820bdc7283ed589f45832bd6d4a2182209918596","modified":1586553760902},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1584285376868},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/prev-next.ejs","hash":"725347e849b5f179e4fcf44aec8db4dc01550a23","modified":1584285376869},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/reward.ejs","hash":"64041be4dea2ec9467164a14232b9af664c99315","modified":1584285376870},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/reprint-statement.ejs","hash":"d8b48608f7abcc462afa49c6974319b625de3ff6","modified":1584285376870},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/search.ejs","hash":"51315331c9f1c8546196a4ae664d6cd4369ee180","modified":1584285376871},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/share.ejs","hash":"105a0bc02e2bb879bed89a9cf54b0f18b60539ff","modified":1584356893604},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/social-link.ejs","hash":"cef8bf54817ba2651dcd6e24d29a48689d07c3a7","modified":1586553760907},{"_id":"themes/hexo-theme-ejazhussain/layout/_partial/valine.ejs","hash":"8ce89390323bfc936e403b3e9bd8117b241e8e42","modified":1584285376873},{"_id":"themes/hexo-theme-ejazhussain/layout/_widget/category-cloud.ejs","hash":"fbef418bc9e758486a155e4723804e722306ed1f","modified":1584285376874},{"_id":"themes/hexo-theme-ejazhussain/layout/_widget/category-radar.ejs","hash":"7fcf36e06d428a983282bdce7b1aaa10c647dab2","modified":1584285376875},{"_id":"themes/hexo-theme-ejazhussain/layout/_widget/dream.ejs","hash":"70122ee04acf56ad569d893e92e78b222d02342c","modified":1584285376876},{"_id":"themes/hexo-theme-ejazhussain/layout/_widget/music.ejs","hash":"ee91a77c1bdc72b2e89e5b2043528b216b5d5d9e","modified":1584285376877},{"_id":"themes/hexo-theme-ejazhussain/layout/_widget/my-gallery.ejs","hash":"c4491329d6c7da2bc9dd5566e4d278633c4f5676","modified":1584285376879},{"_id":"themes/hexo-theme-ejazhussain/layout/_widget/my-projects.ejs","hash":"48dfd9089c28de5025957d4d34006b4e960eacf1","modified":1584285376879},{"_id":"themes/hexo-theme-ejazhussain/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1584285376880},{"_id":"themes/hexo-theme-ejazhussain/layout/_widget/post-calendar.ejs","hash":"853d950056f3437c04122064dab82758d2cb6d5c","modified":1584285376881},{"_id":"themes/hexo-theme-ejazhussain/layout/_widget/post-charts.ejs","hash":"0824972bbf24533c6d8c35e973dc08271750f957","modified":1584285376882},{"_id":"themes/hexo-theme-ejazhussain/layout/_widget/recommend.ejs","hash":"3907a5bbdf18a756af969e10591115009a88798b","modified":1584285376883},{"_id":"themes/hexo-theme-ejazhussain/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1584285376884},{"_id":"themes/hexo-theme-ejazhussain/layout/_widget/tag-wordcloud.ejs","hash":"2c5ffabb205870d03fa074e8a340456dbe7dc84a","modified":1584285376884},{"_id":"themes/hexo-theme-ejazhussain/layout/_widget/video.ejs","hash":"e7df5b08de55deb12662f6bc224497a013bb6745","modified":1584285376885},{"_id":"themes/hexo-theme-ejazhussain/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1584285376896},{"_id":"themes/hexo-theme-ejazhussain/source/css/matery.css","hash":"8e3fc88051f10ea14b2deaa0dc5ae41ca72a99dd","modified":1596300393763},{"_id":"themes/hexo-theme-ejazhussain/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1584285376897},{"_id":"themes/hexo-theme-ejazhussain/source/css/my.css","hash":"b3c32b573a4a9ef3dfeffbd544a9c3f451e67a54","modified":1584285376898},{"_id":"themes/hexo-theme-ejazhussain/source/js/matery.js","hash":"c0df58dec03bb264e207944f2cf9e49ba0e18e86","modified":1592433607972},{"_id":"themes/hexo-theme-ejazhussain/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1584285376901},{"_id":"themes/hexo-theme-ejazhussain/source/medias/avatar.jpg","hash":"b7f8ca0c682f95d93f002c845aafbcb508ec2b0f","modified":1584285376995},{"_id":"themes/hexo-theme-ejazhussain/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1584285377009},{"_id":"themes/hexo-theme-ejazhussain/source/medias/icp.png","hash":"5d1a1f3051c8a4ad70afa0a5488dfa7f0bb27bd5","modified":1584285377039},{"_id":"themes/hexo-theme-ejazhussain/source/medias/logo.png","hash":"e0541d651fe004f1aa12c0d868562d3fd6530311","modified":1584356893608},{"_id":"source/_posts/SharePoint-Online-Integration-with-Azure-App-Insights/create-new-azure-app-insight.png","hash":"698da5aacd6adfe9fcb68900cea42cb819964232","modified":1555247346339},{"_id":"source/_posts/SharePoint-Online-Integration-with-Azure-App-Insights/post-featured.png","hash":"554fac778f362c89798d782119669b1ec4f0f1fa","modified":1555247346345},{"_id":"source/_posts/Sign-In-As-Different-User-In-SharePoint-2013-2016/post-featured.png","hash":"867ea722a29e1c7fdb131a19af65949db1872cb2","modified":1555247346393},{"_id":"source/_posts/access-graphapi-using-spfx-with-securedazurefunction/add-api-scope.png","hash":"66d4767ab3724390f876b1c1f2701df6e0c65d88","modified":1586553760887},{"_id":"source/_posts/access-graphapi-using-spfx-with-securedazurefunction/azure-function-accesspolicy.png","hash":"d17f52081c4e7922113dd27ddc3cfd9df61ed22f","modified":1586553760890},{"_id":"source/_posts/access-graphapi-using-spfx-with-securedazurefunction/app-manifest.png","hash":"338c87c9ba59ea1770be9266f3dc7d5471dbe60f","modified":1586553760888},{"_id":"source/_posts/access-graphapi-using-spfx-with-securedazurefunction/create-self-signed-certificate.png","hash":"087d2313772c7479a2a2bfb6985ff631d2dcd3d7","modified":1586553760891},{"_id":"source/_posts/azure-appinsight-configurations-using-spfx-customizer/post-featured.png","hash":"1d41118ce2ff6df8f08031a6c1fe857306613cb5","modified":1555247346399},{"_id":"source/_posts/azure-blob-storage-using-node/post-featured.png","hash":"f153ea8a946bb00e85f09510b49810e11fecb0cb","modified":1555247346402},{"_id":"source/_posts/list-json-formatting/post-featured.png","hash":"748ef3c232a19cd021279754764f8f46d5325691","modified":1555247346406},{"_id":"source/_posts/list-json-formatting/profile-card.png","hash":"44dc13367f6531b6aee2bef8a89aefcee4cda3ee","modified":1555247346409},{"_id":"source/_posts/msteams-staticapp-sso/ApplicationIDURI.png","hash":"41e748128b734bc50b800d8573c490229a7a0bd4","modified":1596300393759},{"_id":"source/_posts/msteams-staticapp-sso/ngrok.png","hash":"39ed25ffdc35c8d97eea4b40ee4fb6fefd1d8a14","modified":1596300393762},{"_id":"source/_posts/sharepoint-approval-task-using-flow/approve-reject-comments.png","hash":"60bb3a3bca5cea11aee5ed24e076f61591a5989b","modified":1555247346413},{"_id":"source/_posts/sharepoint-approval-task-using-flow/complete-flow-steps.png","hash":"8c45e4f1d7f3a713852464532f04529726e811ba","modified":1555247346415},{"_id":"source/_posts/sharepoint-approval-task-using-flow/confirmation-email.png","hash":"d3f06c6aae805787916dc0fe2659247dc293db4c","modified":1555247346419},{"_id":"source/_posts/sharepoint-approval-task-using-flow/content-approval-status.png","hash":"afa31a49cccc59d2b43fdf6d87d33cbec39f3f99","modified":1555247346422},{"_id":"source/_posts/sharepoint-approval-task-using-flow/flow-blank-template.png","hash":"ee8d6f18d9db0cc952b044772aac126a0798f0e2","modified":1555247346425},{"_id":"source/_posts/sharepoint-approval-task-using-flow/flow-checker.png","hash":"58e0ee8226fc10ea3ca078f8f67f800d558c0cae","modified":1555247346426},{"_id":"source/_posts/sharepoint-approval-task-using-flow/get-file-metadata.png","hash":"a55ba2dfb3917b05b0332eced45330737e778478","modified":1555247346428},{"_id":"source/_posts/sharepoint-approval-task-using-flow/item-created-modified.png","hash":"907ce9f6068384227a04c5961c7ca885d104bcda","modified":1555247346430},{"_id":"source/_posts/sharepoint-approval-task-using-flow/list-approver-response.png","hash":"b7ec07a98cbc7a8ea1b55bbba19568e285cd9398","modified":1555247346432},{"_id":"source/_posts/sharepoint-approval-task-using-flow/post-featured.png","hash":"4358c6a89127719b459b09b7f752bdfe42265174","modified":1555247346434},{"_id":"source/_posts/sharepoint-approval-task-using-flow/project-list.png","hash":"bc618ee65c79ce22122132e122bc31af0d2e2bda","modified":1555247346436},{"_id":"source/_posts/sharepoint-approval-task-using-flow/send-email-action.png","hash":"4171f57361c564285c90a57aab2f4bd885c02d1e","modified":1555247346438},{"_id":"source/_posts/sharepoint-approval-task-using-flow/start-approval-action.png","hash":"aaad6035742046fc44b6ee8f15fcb6f0397fac87","modified":1555247346441},{"_id":"source/_posts/spfx-image-gallery/post-featured.png","hash":"3c0e54d66584d04052fe013265a9db4326149738","modified":1555247346462},{"_id":"source/_posts/spfx-image-gallery/spfx-image-gallery-with-panel.png","hash":"c7576283800d826b08a8d080ac2ea4d8f7a510c4","modified":1555247346464},{"_id":"source/_posts/spfx-image-gallery/spfx-image-gallery.png","hash":"78ef106e034a455b8f4b30d12e2f01a63a90ea07","modified":1555247346466},{"_id":"source/_posts/spfx-office365-reports/spfx-dependency-Injection.png","hash":"3b68f3837cc12cea3e4c62e2deb8b6f9e472d0ce","modified":1555247346515},{"_id":"source/images/post/azure-appinsight-configurations-using-spfx-customizer.jpg","hash":"b2aacf34daddde503316c016039c71d50a3d7bff","modified":1584285376730},{"_id":"source/images/post/list-json-formatting.jpg","hash":"9fc6f2f99532981a32e54361614a2b3cd0f6b070","modified":1584285376733},{"_id":"source/images/post/spfx-office365-reports.jpg","hash":"e9cc39be6709d102f702d06c5886afb9406c82a5","modified":1584285376738},{"_id":"source/images/postcover/postcover-3.jpg","hash":"1a161cf5e7306fc6264edc2da8d602b6cdce2fe3","modified":1584285376748},{"_id":"source/_posts/Sign-In-As-Different-User-In-SharePoint-2013-2016/featured.png","hash":"112f31b670390dab7229fddefd2f931cb87f610a","modified":1534675828150},{"_id":"source/_posts/sharepoint-approval-task-using-flow/conditon.png","hash":"e516511182d6c7c9d01539aa9777aeba58450af7","modified":1555247346417},{"_id":"source/images/post/Import-Terms-From-CSV.jpg","hash":"d7e2a3a0991f1e6fc7222a7b3fe74307f7f1a8c3","modified":1584285376726},{"_id":"source/images/post/spfx-image-gallery.jpg","hash":"1721a7bea039d62362c1fa15cf1b8117c3657461","modified":1584285376737},{"_id":"themes/hexo-theme-ejazhussain/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1584285376903},{"_id":"themes/hexo-theme-ejazhussain/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1584285376904},{"_id":"themes/hexo-theme-ejazhussain/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1584285376905},{"_id":"themes/hexo-theme-ejazhussain/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1584285376906},{"_id":"themes/hexo-theme-ejazhussain/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1584285376935},{"_id":"themes/hexo-theme-ejazhussain/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1584285376936},{"_id":"themes/hexo-theme-ejazhussain/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1584285376938},{"_id":"themes/hexo-theme-ejazhussain/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1584285376939},{"_id":"themes/hexo-theme-ejazhussain/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1584285376941},{"_id":"themes/hexo-theme-ejazhussain/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1584285376942},{"_id":"themes/hexo-theme-ejazhussain/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1584285376940},{"_id":"themes/hexo-theme-ejazhussain/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1584285376943},{"_id":"themes/hexo-theme-ejazhussain/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1584285376945},{"_id":"themes/hexo-theme-ejazhussain/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1584285376946},{"_id":"themes/hexo-theme-ejazhussain/source/libs/gitalk/gitalk.css","hash":"9c0bacfbd4519d3859e3bbb06128ba241804d8b1","modified":1584285376953},{"_id":"themes/hexo-theme-ejazhussain/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1584285376955},{"_id":"themes/hexo-theme-ejazhussain/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1584285376958},{"_id":"themes/hexo-theme-ejazhussain/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1584285376960},{"_id":"themes/hexo-theme-ejazhussain/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1584285376959},{"_id":"themes/hexo-theme-ejazhussain/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1584285376974},{"_id":"themes/hexo-theme-ejazhussain/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1584285376978},{"_id":"themes/hexo-theme-ejazhussain/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1584285376979},{"_id":"themes/hexo-theme-ejazhussain/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1584285376981},{"_id":"themes/hexo-theme-ejazhussain/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1584285376989},{"_id":"themes/hexo-theme-ejazhussain/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1584285376990},{"_id":"themes/hexo-theme-ejazhussain/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1584285377011},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1584285377019},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1584285377022},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1584285377037},{"_id":"themes/hexo-theme-ejazhussain/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1584285377044},{"_id":"themes/hexo-theme-ejazhussain/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1584285377044},{"_id":"themes/hexo-theme-ejazhussain/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1584285376956},{"_id":"themes/hexo-theme-ejazhussain/source/libs/jquery/jquery.min.js","hash":"a8927ac2830b2fdd4a729eb0eb7f80923539ceb9","modified":1584285376962},{"_id":"themes/hexo-theme-ejazhussain/source/libs/valine/Valine.min.js","hash":"d6c03e8c3e547b5f48878081d10559b80f626948","modified":1584285376992},{"_id":"themes/hexo-theme-ejazhussain/source/medias/banner/5.jpg","hash":"29583a518d41a583371f95c3225916deff1e59dd","modified":1584285377005},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1584285377013},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1584285377014},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1584285377015},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1584285377016},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1584285377018},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1584285377021},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1584285377023},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1584285377024},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1584285377025},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1584285377027},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1584285377029},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1584285377030},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1584285377031},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1584285377032},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1584285377033},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1584285377034},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1584285377035},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1584285377036},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1584285377038},{"_id":"source/images/postcover/postcover-4.jpg","hash":"aa70277350512c179957222400435ee2a848aa2c","modified":1584285376749},{"_id":"themes/hexo-theme-ejazhussain/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1584285376907},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1584285376920},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1584285376922},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1584285376923},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1584285376924},{"_id":"themes/hexo-theme-ejazhussain/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1584285376964},{"_id":"themes/hexo-theme-ejazhussain/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1584285376965},{"_id":"themes/hexo-theme-ejazhussain/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1584285376966},{"_id":"themes/hexo-theme-ejazhussain/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1584285376966},{"_id":"themes/hexo-theme-ejazhussain/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1584285376967},{"_id":"themes/hexo-theme-ejazhussain/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1584285376968},{"_id":"themes/hexo-theme-ejazhussain/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1584285376969},{"_id":"themes/hexo-theme-ejazhussain/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1584285376970},{"_id":"themes/hexo-theme-ejazhussain/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1584285376971},{"_id":"themes/hexo-theme-ejazhussain/source/libs/materialize/materialize.min.css","hash":"30351cf15f5f2325275d7e0754afdef011f4b830","modified":1584285376975},{"_id":"themes/hexo-theme-ejazhussain/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1584285376982},{"_id":"themes/hexo-theme-ejazhussain/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1584285376983},{"_id":"themes/hexo-theme-ejazhussain/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1584285376984},{"_id":"themes/hexo-theme-ejazhussain/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1584285376985},{"_id":"themes/hexo-theme-ejazhussain/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1584285376986},{"_id":"themes/hexo-theme-ejazhussain/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1584285376987},{"_id":"themes/hexo-theme-ejazhussain/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1584285376988},{"_id":"themes/hexo-theme-ejazhussain/source/medias/banner/0.jpg","hash":"29583a518d41a583371f95c3225916deff1e59dd","modified":1584285376997},{"_id":"themes/hexo-theme-ejazhussain/source/medias/banner/1.jpg","hash":"29583a518d41a583371f95c3225916deff1e59dd","modified":1584285376998},{"_id":"themes/hexo-theme-ejazhussain/source/medias/banner/2.jpg","hash":"29583a518d41a583371f95c3225916deff1e59dd","modified":1584285377000},{"_id":"themes/hexo-theme-ejazhussain/source/medias/banner/3.jpg","hash":"29583a518d41a583371f95c3225916deff1e59dd","modified":1584285377001},{"_id":"themes/hexo-theme-ejazhussain/source/medias/banner/4.jpg","hash":"29583a518d41a583371f95c3225916deff1e59dd","modified":1584285377003},{"_id":"themes/hexo-theme-ejazhussain/source/medias/banner/7.jpg","hash":"29583a518d41a583371f95c3225916deff1e59dd","modified":1584285377008},{"_id":"themes/hexo-theme-ejazhussain/source/medias/banner/6.jpg","hash":"29583a518d41a583371f95c3225916deff1e59dd","modified":1584285377006},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1584285377028},{"_id":"source/images/post/access-graph-api-using-spfx-with-azurefunction.png","hash":"e88b00636c2d1c949a95ea4f6990f3175a927281","modified":1586553760895},{"_id":"source/images/post/sharepoint-approval-task-using-flow.jpg","hash":"ea14051a63b98356b013f3448a51f637655f7de4","modified":1584285376735},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/css/all.css","hash":"6390d0a6e6211ebbd68b49759b4dec8b2a9f04c9","modified":1584285376909},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1584285376918},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1584285376919},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1584285376933},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1584285376934},{"_id":"themes/hexo-theme-ejazhussain/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1584285376947},{"_id":"themes/hexo-theme-ejazhussain/source/libs/gitalk/gitalk.min.js","hash":"7a3534269fd922d722a76c3affefc68e21246898","modified":1584285376954},{"_id":"themes/hexo-theme-ejazhussain/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1584285376972},{"_id":"themes/hexo-theme-ejazhussain/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1584285376977},{"_id":"themes/hexo-theme-ejazhussain/source/libs/valine/av-min.js","hash":"9cb4babc20eb8fb5a86c4b0cc894fdb0f3cd9534","modified":1584285376993},{"_id":"source/_posts/sharepoint-approval-task-using-flow/task-notification-email.png","hash":"1f4e7ce9e3b22241b18157d024bea5d738caa5d7","modified":1555247346458},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1584285376911},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3fbb04fe98ec0dd06dcfbf9da2d56efc200d7454","modified":1584285376921},{"_id":"themes/hexo-theme-ejazhussain/source/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1584285377020},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1584285376916},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1584285376926},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1584285376932},{"_id":"source/images/post/react-hooks.jpg","hash":"682d57890a7e49bfa7b8a584fb0ca8462753d75a","modified":1592433607962},{"_id":"themes/hexo-theme-ejazhussain/source/medias/profile.png","hash":"0fbad11245524b18e01ea2b9db1fbdd3fe94c894","modified":1584285377042},{"_id":"source/images/about.jpg","hash":"a97c9f444ad256f09c48bf94ffc84e0798dae790","modified":1534675828261},{"_id":"source/images/postcover/postcover-1.jpg","hash":"47f888208f7e68d16d1cc0bfcb7a11bc9d5bb818","modified":1584285376741},{"_id":"source/_posts/microsoft-graph-extensions-in-spfx/post-featured1.png","hash":"0bf1139e364267a654a6b688ed4b94e48029a081","modified":1584285376716},{"_id":"source/images/postcover/postcover-2.jpg","hash":"c80a6992a500f30ad7e52ce2b572d7982a7b8ed4","modified":1584285376746},{"_id":"themes/hexo-theme-ejazhussain/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1584285376951},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"05a5476e6911a95180006599da5f68e474efd708","modified":1584285376914},{"_id":"source/_posts/microsoft-graph-extensions-in-spfx/post-featured.jpg","hash":"b93bbe526c224b88606049b1feb0a47efee29050","modified":1584285376713},{"_id":"themes/hexo-theme-ejazhussain/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"1612cf2120a89a8c716a3bc8e07b22ce108bbec2","modified":1584285376930},{"_id":"public/atom.xml","hash":"422b4f4c9a1af90a619f6dd79b19cee0d7a33721","modified":1596301084000},{"_id":"public/content.json","hash":"f4d766499622e7c2e7a9f3b948abb7ecb2e3d28d","modified":1596301084003},{"_id":"public/search.xml","hash":"ea5b8a447d1fe3dc8ec33d939e5ec16b0c59a064","modified":1596301084003},{"_id":"public/sitemap.xml","hash":"d854583c6ea10d30640ef9e65837d5da8c331320","modified":1596301084528},{"_id":"public/page/3/index.html","hash":"8e01ec785745649185f27139bf0254a611f769ae","modified":1596301084549},{"_id":"public/contact/index.html","hash":"30ad6e6d7d043ff94e3a8856881e2955e6121c1f","modified":1596301084549},{"_id":"public/about/index.html","hash":"cf0004c24bde98ee2c00f8078118b10c91876719","modified":1596301084549},{"_id":"public/categories/index.html","hash":"ba503b3635f61f7a79f74a914a184d3c7caf7087","modified":1596301084549},{"_id":"public/tags/index.html","hash":"c5ab92be5b8fba428297985ae5293e050f71a5e6","modified":1596301084549},{"_id":"public/2020/07/27/msteams-staticapp-sso/index.html","hash":"c4814b36a7784e6fba9190ce73666f207adaca3c","modified":1596301084549},{"_id":"public/2020/06/17/how-to-usecontext-with-usereducer-in-spfx/index.html","hash":"15531b3087b2dbd26266cc540ec00f30cf381159","modified":1596301084549},{"_id":"public/2020/04/10/access-graphapi-using-spfx-with-securedazurefunction/index.html","hash":"5b4ca3f794592486f262432a28f5fe9feddcae5c","modified":1596301084549},{"_id":"public/2019/10/14/microsoft-graph-extensions-in-spfx/index.html","hash":"898ac9ffa62e4c45a9bf396a7d4b8eca5a2f6850","modified":1596301084550},{"_id":"public/2019/04/07/spfx-office365-reports/index.html","hash":"b40532098185ce3a45c43d81d0091dc974f56939","modified":1596301084550},{"_id":"public/2019/03/10/sharepoint-approval-task-using-flow/index.html","hash":"c9d6cd65c615dad113b59737f65f31c63e38eaa4","modified":1596301084550},{"_id":"public/2019/02/08/spfx-image-gallery/index.html","hash":"d6353fe259e1750cac32bf47359c176c8f3d898d","modified":1596301084550},{"_id":"public/2019/03/03/list-json-formatting/index.html","hash":"34b1f7e0297129c6a230e6c8fc8b469169c29eff","modified":1596301084550},{"_id":"public/2018/12/23/azure-blob-storage-using-node/index.html","hash":"c98d3eb2920c050916be94079c949e2bd8f6fde7","modified":1596301084550},{"_id":"public/2018/12/16/azure-appinsight-configurations-using-spfx-customizer/index.html","hash":"cfdc43fbe2f2a1e3ff853744cbb0dc3514747d9a","modified":1596301084550},{"_id":"public/2018/09/09/SharePoint-Online-Integration-with-Azure-App-Insights/index.html","hash":"477e637e0e53caa5323a29509bde607f608226c6","modified":1596301084550},{"_id":"public/2018/08/27/Import-Terms-From-CSV/index.html","hash":"1f162c62b43003ea697126813f1ac2199deacbf3","modified":1596301084550},{"_id":"public/2018/08/16/Sign-In-As-Different-User-In-SharePoint-2013-2016/index.html","hash":"d088f2c336fe2c4f09f6dad85a0f51e476e86011","modified":1596301084551},{"_id":"public/categories/SharePoint-2013/index.html","hash":"66397ac87dc56252a67569c581c7e45bab7c93e9","modified":1596301084551},{"_id":"public/categories/PowerShell/index.html","hash":"0a2e5101f21d9c532a0b8b2d609a4f1d75bd37f5","modified":1596301084551},{"_id":"public/categories/Azure-App-Insights/index.html","hash":"380c80201f61540705a3cee8f20cafc75cef16d5","modified":1596301084551},{"_id":"public/categories/SharePoint-Framework/index.html","hash":"68a07af038dee043d04652d00709181692521cbc","modified":1596301084551},{"_id":"public/categories/Microsoft-Graph/index.html","hash":"e83f79a5a6ea7faa27159daaeb26215e104c0486","modified":1596301084551},{"_id":"public/categories/Modern-SharePoint/index.html","hash":"5a7503be1fe58ad0862051fdeed915793740ef1b","modified":1596301084551},{"_id":"public/categories/Microsoft-Flow/index.html","hash":"670e8c876b0c586183eb927ad3b9f9e0be88324f","modified":1596301084551},{"_id":"public/archives/index.html","hash":"c939115f1e863348e6c866da88ceaf9cb990a3b7","modified":1596301084551},{"_id":"public/categories/Microsoft-Teams/index.html","hash":"2aa4ad07b097b3fbdba1d2536f25b31613f9e946","modified":1596301084551},{"_id":"public/archives/page/2/index.html","hash":"de5c65fcd31f7b52eb148bad60679aa8b71fda3a","modified":1596301084551},{"_id":"public/archives/page/3/index.html","hash":"dc76a7416bc05ba17fb47ab19b7d1e14e5a99a29","modified":1596301084551},{"_id":"public/archives/2018/index.html","hash":"9797311692af9908dd2d50735e4fa91d026aaff2","modified":1596301084551},{"_id":"public/archives/2018/08/index.html","hash":"88095062811562ecae57a32aa711e52ba6d35a2b","modified":1596301084552},{"_id":"public/archives/2018/12/index.html","hash":"59a7fdff189e091d63907115ada360507d831a28","modified":1596301084552},{"_id":"public/archives/2018/09/index.html","hash":"dfff3c6ebe7346b305a017ec2b3f5fb9421bbdca","modified":1596301084552},{"_id":"public/archives/2019/index.html","hash":"b7579e522740a6c0cb6c4a317cd656af5e400a86","modified":1596301084552},{"_id":"public/archives/2019/02/index.html","hash":"4b6179052f0823d0ac4a60e45b45dc310d7aacb0","modified":1596301084552},{"_id":"public/archives/2019/03/index.html","hash":"be5b5e6bbaeb46b57663bccc97b4cf583dd4be01","modified":1596301084552},{"_id":"public/archives/2019/04/index.html","hash":"65d16496765ab54c8168054f139acef74f2c8b30","modified":1596301084552},{"_id":"public/archives/2019/10/index.html","hash":"548b6734ab34d081cd95ebd2c9c5f1a2689d5c36","modified":1596301084552},{"_id":"public/archives/2020/index.html","hash":"93042c67bc48e70a3780b4b5c6ce26f63db40c57","modified":1596301084552},{"_id":"public/archives/2020/04/index.html","hash":"a864e63631955823214c1e5df65896f00dbcbafe","modified":1596301084552},{"_id":"public/archives/2020/06/index.html","hash":"f13f051c513eb974d363cc2d89ffd34370c006f5","modified":1596301084552},{"_id":"public/archives/2020/07/index.html","hash":"e4e5a54f207b36e1b3014e65974a5a2de054558c","modified":1596301084552},{"_id":"public/index.html","hash":"7ee8daf027cb07b2b8010bab1879f2daec6428e2","modified":1596301084552},{"_id":"public/page/2/index.html","hash":"cfa7d807ae847b3fa77b552491d1d8fa6777d92c","modified":1596301084552},{"_id":"public/tags/SharePoint-administration/index.html","hash":"4a9264e9a96eba908380c02d0b69237a929e9bcc","modified":1596301084552},{"_id":"public/tags/SharePoint-2013/index.html","hash":"c171d9c7d9233be8ea619fbe55bc0bb5aa5f05f3","modified":1596301084552},{"_id":"public/tags/SharePoint-2016/index.html","hash":"991d8f2a2257b8e65f0148927b8d186997122a2e","modified":1596301084552},{"_id":"public/tags/Sharepoint-TermStore/index.html","hash":"d66db07b46f4f1e17ecaed3ff596b95e29bac29e","modified":1596301084553},{"_id":"public/tags/PnP-PowerShell/index.html","hash":"88b4b96f73bab3913250d53f5d078a4f14b31200","modified":1596301084553},{"_id":"public/tags/Azure-Application-Insight/index.html","hash":"d40a21111ccb177bd48b4a5afaa8c837901cf809","modified":1596301084553},{"_id":"public/tags/SharePoint-Online/index.html","hash":"f4bf58aae5a76a4ef524ba8c46d5146fba4edf41","modified":1596301084553},{"_id":"public/tags/Azure-App-Insights/index.html","hash":"c82aa55947aeb1202c2f9cdab121e5b1cfc259e7","modified":1596301084553},{"_id":"public/tags/SPFX/index.html","hash":"a84c8fc8015ea8018a0a2438b1ce4333a8a459eb","modified":1596301084553},{"_id":"public/tags/Azure/index.html","hash":"0b298fcd30a25b454f6a0534b3021dfbb0f51e79","modified":1596301084553},{"_id":"public/tags/Azure-Blog-Storage/index.html","hash":"b4ae60dcb25efeca866f67fbc31a5d31d4166c54","modified":1596301084553},{"_id":"public/tags/Node-JS/index.html","hash":"426f201d83d28fc9c4c2074ae3cb99199fb526f8","modified":1596301084553},{"_id":"public/tags/Azure-Function/index.html","hash":"7e10b8003a5c058e5807f253253e045f56acada4","modified":1596301084553},{"_id":"public/tags/Authentication/index.html","hash":"5f9d91a77cef64c3027f807c03548ff9d71469bf","modified":1596301084553},{"_id":"public/tags/SPFx/index.html","hash":"79754ed767e84fe89bcbbbe597f91f916fecd187","modified":1596301084553},{"_id":"public/tags/React-Hooks/index.html","hash":"d79b8cf70062badeddc1235d9bc1a7c6d36f5ba3","modified":1596301084553},{"_id":"public/tags/Microsoft-Graph/index.html","hash":"38745f6c77a6b5110e9ee58dc6cdd23e214b33ec","modified":1596301084553},{"_id":"public/tags/JSON-Formatting/index.html","hash":"fd483e40315281bf6c6b3bea0f501d6819463684","modified":1596301084553},{"_id":"public/tags/Modern-SharePoint-List/index.html","hash":"a5effd60ace34509e759e3b24a2157b3e0893dd7","modified":1596301084553},{"_id":"public/tags/Charts/index.html","hash":"243e66a440143bec0f408da71ac2343874f33761","modified":1596301084553},{"_id":"public/tags/Office-UI-Fabric/index.html","hash":"85c917bd2b2a8fde4114cf0475d6933ea912e8d5","modified":1596301084554},{"_id":"public/tags/Microsoft-Flow/index.html","hash":"977f59c300ab4cb3136a1bf8ac4a2bdae9e5442d","modified":1596301084554},{"_id":"public/tags/Workflow/index.html","hash":"66feea91f2f8e61a2122c8653b185384656fdc7e","modified":1596301084554},{"_id":"public/tags/Teams-Personal-Tab/index.html","hash":"7568e29a20cdabad7a523f73f9205a9608866073","modified":1596301084554},{"_id":"public/tags/Microsoft-Graph-API/index.html","hash":"3e0dac4b933274056a1820342c60d6c5acee209f","modified":1596301084554},{"_id":"public/robots.txt","hash":"19c6e02fa4cb963d8c20876346a613a50ba86716","modified":1596301084592},{"_id":"public/images/favicon.ico","hash":"57e19c18bfe2f77a1bc3229dc104114dc171ce72","modified":1596301084592},{"_id":"public/images/code.svg","hash":"ac38cfd4b89734536d02cd3d0c6d690afb2e980d","modified":1596301084592},{"_id":"public/favicon.png","hash":"e1a500f5aac00ffc76ac0a86569d7d8535014c9c","modified":1596301084592},{"_id":"public/images/header-background.svg","hash":"33c1473426f5d518e073708f58b6147abc250745","modified":1596301084592},{"_id":"public/images/post/azure-appinsight-configurations-using-spfx-customizer.png","hash":"ed6f3f1f458952af488f59cd2ef5e17676084a5f","modified":1596301084593},{"_id":"public/images/post/Sign-In-As-Different-User-In-SharePoint-2013-2016.jpg","hash":"3614d00caca35e1e44a9c1c6d5af41598c75761a","modified":1596301084593},{"_id":"public/images/post/azure-blob-storage-using-node.jpg","hash":"de59cc8f724713b4e1d62796d74902934a87ca06","modified":1596301084593},{"_id":"public/images/post/microsoft-graph-extensions-in-spfx.jpg","hash":"c5fb103bc5baedd9bc3dd842e575fee47710db27","modified":1596301084593},{"_id":"public/images/post/SharePoint-Online-Integration-with-Azure-App-Insights.png","hash":"1349fc0475fc7180630ce48c23659e334c5c07ac","modified":1596301084593},{"_id":"public/medias/avatar.jpg","hash":"b7f8ca0c682f95d93f002c845aafbcb508ec2b0f","modified":1596301084593},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1596301084593},{"_id":"public/medias/icp.png","hash":"5d1a1f3051c8a4ad70afa0a5488dfa7f0bb27bd5","modified":1596301084593},{"_id":"public/medias/logo.png","hash":"e0541d651fe004f1aa12c0d868562d3fd6530311","modified":1596301084593},{"_id":"public/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1596301084594},{"_id":"public/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1596301084594},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1596301084594},{"_id":"public/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1596301084594},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1596301084594},{"_id":"public/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1596301084594},{"_id":"public/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1596301084594},{"_id":"public/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1596301084594},{"_id":"public/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1596301084594},{"_id":"public/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1596301084594},{"_id":"public/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1596301084594},{"_id":"public/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1596301084594},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1596301084594},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1596301084594},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1596301084594},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1596301084594},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1596301084594},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1596301084595},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1596301084595},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1596301084595},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1596301084595},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1596301084595},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1596301084595},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1596301084595},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1596301084595},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1596301084595},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1596301084595},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1596301084595},{"_id":"public/2018/12/16/azure-appinsight-configurations-using-spfx-customizer/custom-properties.png","hash":"5d69b91ed0144937382e23a081f84820c15dd4ed","modified":1596301084595},{"_id":"public/2020/06/17/how-to-usecontext-with-usereducer-in-spfx/react-hooks-listitems-output.png","hash":"9cfb8106013207be5fdb04e83a8e4013af42ad69","modified":1596301084595},{"_id":"public/2018/08/27/Import-Terms-From-CSV/groups.csv","hash":"dd689ba0e997104b7b95982b356a60630e03944a","modified":1596301084595},{"_id":"public/2018/08/27/Import-Terms-From-CSV/post-featured.png","hash":"095a5343c66aaa0e4c78967426bd20b68d5324e9","modified":1596301084595},{"_id":"public/2018/08/27/Import-Terms-From-CSV/samplecsv.png","hash":"c2e5be5e134fb673f398e41b512d6415e0bbb908","modified":1596301084595},{"_id":"public/2018/09/09/SharePoint-Online-Integration-with-Azure-App-Insights/customevents.png","hash":"260efd30e5415bd25a6f128440ad0cd4a429ddda","modified":1596301084595},{"_id":"public/2018/09/09/SharePoint-Online-Integration-with-Azure-App-Insights/js-code-snippet.png","hash":"105df3e9a41c7f0d24a39887053805be1803b944","modified":1596301084595},{"_id":"public/2019/02/08/spfx-image-gallery/taxonomy-query.png","hash":"ff5399f40f9947021edbc0f30ab5e29d9912737e","modified":1596301084595},{"_id":"public/2020/04/10/access-graphapi-using-spfx-with-securedazurefunction/SPFx-webapi-permissions.png","hash":"758655d5319fb72c892fb063ad046bf2ef4724c9","modified":1596301084595},{"_id":"public/2020/04/10/access-graphapi-using-spfx-with-securedazurefunction/graph-api-permissions.png","hash":"6dafce40e7a84fc9a0919241905dbec21fa09340","modified":1596301084595},{"_id":"public/2020/04/10/access-graphapi-using-spfx-with-securedazurefunction/keyvault.png","hash":"6db886c6bee3fe9594c139747e82fc11e5101df3","modified":1596301084596},{"_id":"public/2019/04/07/spfx-office365-reports/chartjs-redraw-method.png","hash":"f8b9f0f76d34d0e9e1aefcdab0b9bc2af098d004","modified":1596301084596},{"_id":"public/2019/04/07/spfx-office365-reports/final-output-onedrive.png","hash":"16fa1cdeeaca7d5777fd371a4aa4087abf56bae7","modified":1596301084596},{"_id":"public/2019/04/07/spfx-office365-reports/final-output-outlook.png","hash":"948817b260f710f05a5e3b33f418e108df1dacc7","modified":1596301084596},{"_id":"public/2019/04/07/spfx-office365-reports/final-output-sharepoint.png","hash":"45fe48aaca2ac497fce0907dede3852699586cd9","modified":1596301084596},{"_id":"public/2019/04/07/spfx-office365-reports/graph-api-permissions-usage-reports.png","hash":"97233d3b4d89c7810f8f246b6a09b3f8f3daf478","modified":1596301084596},{"_id":"public/2019/04/07/spfx-office365-reports/post-featured.png","hash":"948817b260f710f05a5e3b33f418e108df1dacc7","modified":1596301084596},{"_id":"public/2019/10/14/microsoft-graph-extensions-in-spfx/Thumbs.db","hash":"e02beb4fd3eb0707502b4f5aaf4c9b41ad98cf08","modified":1596301084596},{"_id":"public/2019/10/14/microsoft-graph-extensions-in-spfx/create-graph-extension-schema.png","hash":"0682c1ca771be207e53b0a454ba03947baf4db4a","modified":1596301084596},{"_id":"public/2019/10/14/microsoft-graph-extensions-in-spfx/create-graph-extension.png","hash":"4f7f9bc18e00228196c5063185dc59848cfa85bc","modified":1596301084596},{"_id":"public/2019/10/14/microsoft-graph-extensions-in-spfx/delete-graph-extension.png","hash":"152af8064425f1918f690c2e86b36af9fb674e7a","modified":1596301084597},{"_id":"public/2019/10/14/microsoft-graph-extensions-in-spfx/get-graph-extension.png","hash":"528ee73615c30b54257b3263bec697dd5147d5eb","modified":1596301084597},{"_id":"public/2019/10/14/microsoft-graph-extensions-in-spfx/graph-extension-user-permissions.png","hash":"34213551d57b05ff660ec4a3b1f4e3efe56f56c6","modified":1596301084597},{"_id":"public/2019/10/14/microsoft-graph-extensions-in-spfx/patch-graph-extension.png","hash":"d6038874a84f789233e9c514002c1bf600960c5a","modified":1596301084597},{"_id":"public/2020/07/27/msteams-staticapp-sso/azure-ad-auth.jpg","hash":"6d51fe4c57528e6064a118496d955f9bd22b19fb","modified":1596301084597},{"_id":"public/2020/07/27/msteams-staticapp-sso/final-output.png","hash":"68134d65bb50937d88b0e6f64eed3c57bbd16bdd","modified":1596301084597},{"_id":"public/github-card-lib/githubcard.js","hash":"abec4decf5532b77beafc6194599f3a402a91201","modified":1596301084598},{"_id":"public/css/prism-coy.css","hash":"e95a1fca67112e71cd43ab1e5332a9f798d0da3e","modified":1596301084598},{"_id":"public/css/prism-line-numbers.css","hash":"e0db113a99e4a09d2161a539b1652d96e4a22fac","modified":1596301084598},{"_id":"public/js/prism.js","hash":"8c68f0a4ea552f74030fc95fb8e2fb1dd7b5868a","modified":1596301084598},{"_id":"public/js/prism-line-numbers.min.js","hash":"d40ac5d846a71dc614f73db1e7e0cb50eeef23a2","modified":1596301084598},{"_id":"public/images/avatar.jpg","hash":"445c00332b7f381b21820ea422e5bc7f4f236aaa","modified":1596301084617},{"_id":"public/images/post/azure-appinsight-configurations-using-spfx-customizer.jpg","hash":"b2aacf34daddde503316c016039c71d50a3d7bff","modified":1596301084678},{"_id":"public/images/post/list-json-formatting.jpg","hash":"9fc6f2f99532981a32e54361614a2b3cd0f6b070","modified":1596301084678},{"_id":"public/images/post/spfx-office365-reports.jpg","hash":"e9cc39be6709d102f702d06c5886afb9406c82a5","modified":1596301084679},{"_id":"public/images/postcover/postcover-3.jpg","hash":"1a161cf5e7306fc6264edc2da8d602b6cdce2fe3","modified":1596301084679},{"_id":"public/images/post/Import-Terms-From-CSV.jpg","hash":"d7e2a3a0991f1e6fc7222a7b3fe74307f7f1a8c3","modified":1596301084679},{"_id":"public/medias/banner/5.jpg","hash":"29583a518d41a583371f95c3225916deff1e59dd","modified":1596301084679},{"_id":"public/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1596301084679},{"_id":"public/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1596301084679},{"_id":"public/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1596301084679},{"_id":"public/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1596301084679},{"_id":"public/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1596301084679},{"_id":"public/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1596301084679},{"_id":"public/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1596301084680},{"_id":"public/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1596301084680},{"_id":"public/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1596301084680},{"_id":"public/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1596301084680},{"_id":"public/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1596301084680},{"_id":"public/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1596301084680},{"_id":"public/medias/banner/0.jpg","hash":"29583a518d41a583371f95c3225916deff1e59dd","modified":1596301084680},{"_id":"public/medias/banner/1.jpg","hash":"29583a518d41a583371f95c3225916deff1e59dd","modified":1596301084680},{"_id":"public/medias/banner/2.jpg","hash":"29583a518d41a583371f95c3225916deff1e59dd","modified":1596301084680},{"_id":"public/medias/banner/4.jpg","hash":"29583a518d41a583371f95c3225916deff1e59dd","modified":1596301084681},{"_id":"public/medias/banner/3.jpg","hash":"29583a518d41a583371f95c3225916deff1e59dd","modified":1596301084681},{"_id":"public/medias/banner/7.jpg","hash":"29583a518d41a583371f95c3225916deff1e59dd","modified":1596301084681},{"_id":"public/medias/banner/6.jpg","hash":"29583a518d41a583371f95c3225916deff1e59dd","modified":1596301084681},{"_id":"public/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1596301084681},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1596301084681},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1596301084681},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1596301084681},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1596301084681},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1596301084681},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1596301084682},{"_id":"public/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1596301084682},{"_id":"public/2018/12/23/azure-blob-storage-using-node/post-featured.png","hash":"f153ea8a946bb00e85f09510b49810e11fecb0cb","modified":1596301084682},{"_id":"public/2018/08/16/Sign-In-As-Different-User-In-SharePoint-2013-2016/post-featured.png","hash":"867ea722a29e1c7fdb131a19af65949db1872cb2","modified":1596301084682},{"_id":"public/2018/12/16/azure-appinsight-configurations-using-spfx-customizer/post-featured.png","hash":"1d41118ce2ff6df8f08031a6c1fe857306613cb5","modified":1596301084682},{"_id":"public/2019/03/03/list-json-formatting/post-featured.png","hash":"748ef3c232a19cd021279754764f8f46d5325691","modified":1596301084682},{"_id":"public/2019/03/03/list-json-formatting/profile-card.png","hash":"44dc13367f6531b6aee2bef8a89aefcee4cda3ee","modified":1596301084682},{"_id":"public/2018/09/09/SharePoint-Online-Integration-with-Azure-App-Insights/create-new-azure-app-insight.png","hash":"698da5aacd6adfe9fcb68900cea42cb819964232","modified":1596301084682},{"_id":"public/2019/02/08/spfx-image-gallery/post-featured.png","hash":"3c0e54d66584d04052fe013265a9db4326149738","modified":1596301084682},{"_id":"public/2018/09/09/SharePoint-Online-Integration-with-Azure-App-Insights/post-featured.png","hash":"554fac778f362c89798d782119669b1ec4f0f1fa","modified":1596301084682},{"_id":"public/2019/02/08/spfx-image-gallery/spfx-image-gallery-with-panel.png","hash":"c7576283800d826b08a8d080ac2ea4d8f7a510c4","modified":1596301084682},{"_id":"public/2019/02/08/spfx-image-gallery/spfx-image-gallery.png","hash":"78ef106e034a455b8f4b30d12e2f01a63a90ea07","modified":1596301084683},{"_id":"public/2020/04/10/access-graphapi-using-spfx-with-securedazurefunction/add-api-scope.png","hash":"66d4767ab3724390f876b1c1f2701df6e0c65d88","modified":1596301084683},{"_id":"public/2020/04/10/access-graphapi-using-spfx-with-securedazurefunction/azure-function-accesspolicy.png","hash":"d17f52081c4e7922113dd27ddc3cfd9df61ed22f","modified":1596301084683},{"_id":"public/2020/04/10/access-graphapi-using-spfx-with-securedazurefunction/app-manifest.png","hash":"338c87c9ba59ea1770be9266f3dc7d5471dbe60f","modified":1596301084683},{"_id":"public/2020/04/10/access-graphapi-using-spfx-with-securedazurefunction/create-self-signed-certificate.png","hash":"087d2313772c7479a2a2bfb6985ff631d2dcd3d7","modified":1596301084683},{"_id":"public/2019/04/07/spfx-office365-reports/spfx-dependency-Injection.png","hash":"3b68f3837cc12cea3e4c62e2deb8b6f9e472d0ce","modified":1596301084683},{"_id":"public/2019/03/10/sharepoint-approval-task-using-flow/approve-reject-comments.png","hash":"60bb3a3bca5cea11aee5ed24e076f61591a5989b","modified":1596301084683},{"_id":"public/2019/03/10/sharepoint-approval-task-using-flow/complete-flow-steps.png","hash":"8c45e4f1d7f3a713852464532f04529726e811ba","modified":1596301084683},{"_id":"public/2019/03/10/sharepoint-approval-task-using-flow/confirmation-email.png","hash":"d3f06c6aae805787916dc0fe2659247dc293db4c","modified":1596301084683},{"_id":"public/2019/03/10/sharepoint-approval-task-using-flow/content-approval-status.png","hash":"afa31a49cccc59d2b43fdf6d87d33cbec39f3f99","modified":1596301084683},{"_id":"public/2019/03/10/sharepoint-approval-task-using-flow/flow-blank-template.png","hash":"ee8d6f18d9db0cc952b044772aac126a0798f0e2","modified":1596301084683},{"_id":"public/2019/03/10/sharepoint-approval-task-using-flow/flow-checker.png","hash":"58e0ee8226fc10ea3ca078f8f67f800d558c0cae","modified":1596301084683},{"_id":"public/2019/03/10/sharepoint-approval-task-using-flow/get-file-metadata.png","hash":"a55ba2dfb3917b05b0332eced45330737e778478","modified":1596301084684},{"_id":"public/2019/03/10/sharepoint-approval-task-using-flow/item-created-modified.png","hash":"907ce9f6068384227a04c5961c7ca885d104bcda","modified":1596301084684},{"_id":"public/2019/03/10/sharepoint-approval-task-using-flow/post-featured.png","hash":"4358c6a89127719b459b09b7f752bdfe42265174","modified":1596301084684},{"_id":"public/2019/03/10/sharepoint-approval-task-using-flow/list-approver-response.png","hash":"b7ec07a98cbc7a8ea1b55bbba19568e285cd9398","modified":1596301084684},{"_id":"public/2019/03/10/sharepoint-approval-task-using-flow/project-list.png","hash":"bc618ee65c79ce22122132e122bc31af0d2e2bda","modified":1596301084684},{"_id":"public/2019/03/10/sharepoint-approval-task-using-flow/send-email-action.png","hash":"4171f57361c564285c90a57aab2f4bd885c02d1e","modified":1596301084684},{"_id":"public/2019/03/10/sharepoint-approval-task-using-flow/start-approval-action.png","hash":"aaad6035742046fc44b6ee8f15fcb6f0397fac87","modified":1596301084684},{"_id":"public/2020/07/27/msteams-staticapp-sso/ApplicationIDURI.png","hash":"41e748128b734bc50b800d8573c490229a7a0bd4","modified":1596301084684},{"_id":"public/2020/07/27/msteams-staticapp-sso/ngrok.png","hash":"39ed25ffdc35c8d97eea4b40ee4fb6fefd1d8a14","modified":1596301084684},{"_id":"public/js/matery.js","hash":"0929a5edfb90b99e02586c12effd27f69c3d12f2","modified":1596301084696},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1596301084713},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1596301084713},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1596301084713},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1596301084713},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1596301084713},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1596301084713},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1596301084713},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1596301084714},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1596301084714},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1596301084714},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1596301084714},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1596301084714},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1596301084714},{"_id":"public/css/gitment.css","hash":"117322e4e8bc93c6601eaa4d85df2d28b6f90d49","modified":1596301084714},{"_id":"public/css/my-gitalk.css","hash":"06d9c201edeac427919791981c85260d58551f2f","modified":1596301084714},{"_id":"public/css/my.css","hash":"cf53cc2e93cbb55cc547706c08c556fc99cb5de4","modified":1596301084714},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1596301084714},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1596301084714},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1596301084715},{"_id":"public/images/post/spfx-image-gallery.jpg","hash":"1721a7bea039d62362c1fa15cf1b8117c3657461","modified":1596301084715},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1596301084715},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3fbb04fe98ec0dd06dcfbf9da2d56efc200d7454","modified":1596301084715},{"_id":"public/2018/08/16/Sign-In-As-Different-User-In-SharePoint-2013-2016/featured.png","hash":"112f31b670390dab7229fddefd2f931cb87f610a","modified":1596301084715},{"_id":"public/2019/03/10/sharepoint-approval-task-using-flow/conditon.png","hash":"e516511182d6c7c9d01539aa9777aeba58450af7","modified":1596301084715},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1596301084727},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1596301084776},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1596301084776},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"62b81770315f5314d8525b012038c3bd95e2ef4c","modified":1596301084777},{"_id":"public/images/postcover/postcover-4.jpg","hash":"aa70277350512c179957222400435ee2a848aa2c","modified":1596301084777},{"_id":"public/images/post/access-graph-api-using-spfx-with-azurefunction.png","hash":"e88b00636c2d1c949a95ea4f6990f3175a927281","modified":1596301084777},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1596301084777},{"_id":"public/libs/gitment/gitment-default.css","hash":"3b14b1d5cb94741bb432a599872052af1ce55717","modified":1596301084796},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"ab8bbf1417e15125613b72d7d459701706899930","modified":1596301084819},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1596301084819},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1596301084820},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1596301084820},{"_id":"public/2019/03/10/sharepoint-approval-task-using-flow/task-notification-email.png","hash":"1f4e7ce9e3b22241b18157d024bea5d738caa5d7","modified":1596301084820},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1596301084828},{"_id":"public/libs/gitalk/gitalk.css","hash":"75df7bd3439d72fd69453ac089582ef4b3a2b288","modified":1596301084828},{"_id":"public/libs/aos/aos.css","hash":"d5e4ddf6a1047926e6eaf72e488340f976e6b4bd","modified":1596301084828},{"_id":"public/images/post/sharepoint-approval-task-using-flow.jpg","hash":"ea14051a63b98356b013f3448a51f637655f7de4","modified":1596301084828},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1596301084989},{"_id":"public/css/matery.css","hash":"45383a4ade2b7d6d1c500995ce44995361a56eda","modified":1596301085038},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"28425e1fe119939378b340ba5566d2e5621a04bb","modified":1596301085039},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1596301085046},{"_id":"public/libs/animate/animate.min.css","hash":"2e3f8623e9b67dc6b969228ffafd5807e5a90930","modified":1596301085046},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1596301085079},{"_id":"public/medias/profile.png","hash":"0fbad11245524b18e01ea2b9db1fbdd3fe94c894","modified":1596301085079},{"_id":"public/images/post/react-hooks.jpg","hash":"682d57890a7e49bfa7b8a584fb0ca8462753d75a","modified":1596301085079},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1596301085230},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1596301085230},{"_id":"public/libs/awesome/css/all.css","hash":"d5288b27f66fae90d7ea018a547efd07a5880579","modified":1596301085230},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1596301085268},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1596301085281},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"05a5476e6911a95180006599da5f68e474efd708","modified":1596301085282},{"_id":"public/images/postcover/postcover-1.jpg","hash":"47f888208f7e68d16d1cc0bfcb7a11bc9d5bb818","modified":1596301085282},{"_id":"public/libs/materialize/materialize.min.css","hash":"218f1b43ba095e04b6be328195c6be816362dafd","modified":1596301085374},{"_id":"public/2019/10/14/microsoft-graph-extensions-in-spfx/post-featured1.png","hash":"0bf1139e364267a654a6b688ed4b94e48029a081","modified":1596301085374},{"_id":"public/images/about.jpg","hash":"a97c9f444ad256f09c48bf94ffc84e0798dae790","modified":1596301085382},{"_id":"public/2019/10/14/microsoft-graph-extensions-in-spfx/post-featured.jpg","hash":"b93bbe526c224b88606049b1feb0a47efee29050","modified":1596301085385},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1596301085391},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1596301085391},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"1612cf2120a89a8c716a3bc8e07b22ce108bbec2","modified":1596301085394},{"_id":"public/images/postcover/postcover-2.jpg","hash":"c80a6992a500f30ad7e52ce2b572d7982a7b8ed4","modified":1596301085397},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1596301085402},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1596301085429}],"Category":[{"name":"SharePoint 2013","_id":"ckdbwg6m70004ioet9ea89b95"},{"name":"PowerShell","_id":"ckdbwg6mi000aioet1cjawtkr"},{"name":"Azure App Insights","_id":"ckdbwg6ml000fioetpv5vckwo"},{"name":"SharePoint Framework","_id":"ckdbwg6mp000kioet3raageuu"},{"name":"Microsoft Graph","_id":"ckdbwg6mr000rioet3zu17ttc"},{"name":"Modern SharePoint","_id":"ckdbwg6mx0018ioetg505f4wv"},{"name":"Microsoft Flow","_id":"ckdbwg6n0001gioetgogbzlsb"},{"name":"Microsoft Teams","_id":"ckdbwg6o3002qioetchdvfax0"}],"Data":[],"Page":[{"title":"contact","date":"2020-03-14T17:05:02.000Z","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-03-14 17:05:02\n---\n","updated":"2020-03-15T15:16:16.724Z","path":"contact/index.html","comments":1,"layout":"page","_id":"ckdbwg6m30001ioetyvh972jk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2020-03-08T23:32:15.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-03-08 23:32:15\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2020-03-15T15:16:16.723Z","path":"about/index.html","comments":1,"_id":"ckdbwg6m60003ioeti1v8e0sh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2020-03-08T23:25:36.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-03-08 23:25:36\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2020-03-15T15:16:16.724Z","path":"categories/index.html","comments":1,"_id":"ckdbwg6ma0007ioetgewnvf7p","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-03-08T23:23:25.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-03-08 23:23:25\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2020-03-15T15:16:16.750Z","path":"tags/index.html","comments":1,"_id":"ckdbwg6o1002pioety97uuxdl","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Sign In As Different User In SharePoint 2013/2016","date":"2018-08-16T14:04:16.000Z","description":"Sign In As Different User In SharePoint On-prem in 2013 and 2016","summary":"This post describe a way to use Sign In As Different User link that used to be available in SharePoint 2010.","img":"/images/post/Sign-In-As-Different-User-In-SharePoint-2013-2016.jpg","cover":true,"coverImg":"/images/postcover/postcover-3.jpg","_content":"\n\nI recently had to sign in as a test user on a SharePoint 2013 development environment, but I wasn’t able to locate the Sign In As Different User link that had been present in SharePoint 2010.\n\nIt’s no longer available in **SharePoint 2013/2016**.\n\nThis is a great option to have, especially for developers who need to test apps under different privileges.\n\nBut there’s still a way to sign in as a different user in SharePoint 2013/2016. Just go to the following URL:\n\n``` \n👉 http://yourservername/_layouts/closeConnection.aspx?loginasanotheruser=true\n```\n\n(It may not work with IE 10 & Safari browsers.)\n\nAnother way of signing in as a different user is to run the browser under a different user account, but using the link above simple for quick access.\n\nAnd there you go.\n\n","source":"_posts/Sign-In-As-Different-User-In-SharePoint-2013-2016.md","raw":"---\ntitle: Sign In As Different User In SharePoint 2013/2016\ndate: 2018-08-16 15:04:16\ntags: [SharePoint administration, SharePoint 2013, SharePoint 2016]\ndescription: Sign In As Different User In SharePoint On-prem in 2013 and 2016\ncategories: SharePoint 2013\nsummary: This post describe a way to use Sign In As Different User link that used to be available in SharePoint 2010.\nimg: /images/post/Sign-In-As-Different-User-In-SharePoint-2013-2016.jpg\ncover: true\ncoverImg: /images/postcover/postcover-3.jpg\n---\n\n\nI recently had to sign in as a test user on a SharePoint 2013 development environment, but I wasn’t able to locate the Sign In As Different User link that had been present in SharePoint 2010.\n\nIt’s no longer available in **SharePoint 2013/2016**.\n\nThis is a great option to have, especially for developers who need to test apps under different privileges.\n\nBut there’s still a way to sign in as a different user in SharePoint 2013/2016. Just go to the following URL:\n\n``` \n👉 http://yourservername/_layouts/closeConnection.aspx?loginasanotheruser=true\n```\n\n(It may not work with IE 10 & Safari browsers.)\n\nAnother way of signing in as a different user is to run the browser under a different user account, but using the link above simple for quick access.\n\nAnd there you go.\n\n","slug":"Sign-In-As-Different-User-In-SharePoint-2013-2016","published":1,"updated":"2020-03-16T11:36:48.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdbwg6ly0000ioettwxqn1om","content":"<p>I recently had to sign in as a test user on a SharePoint 2013 development environment, but I wasn’t able to locate the Sign In As Different User link that had been present in SharePoint 2010.</p>\n<p>It’s no longer available in <strong>SharePoint 2013/2016</strong>.</p>\n<p>This is a great option to have, especially for developers who need to test apps under different privileges.</p>\n<p>But there’s still a way to sign in as a different user in SharePoint 2013/2016. Just go to the following URL:</p>\n<pre><code>👉 http://yourservername/_layouts/closeConnection.aspx?loginasanotheruser=true</code></pre><p>(It may not work with IE 10 &amp; Safari browsers.)</p>\n<p>Another way of signing in as a different user is to run the browser under a different user account, but using the link above simple for quick access.</p>\n<p>And there you go.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I recently had to sign in as a test user on a SharePoint 2013 development environment, but I wasn’t able to locate the Sign In As Different User link that had been present in SharePoint 2010.</p>\n<p>It’s no longer available in <strong>SharePoint 2013/2016</strong>.</p>\n<p>This is a great option to have, especially for developers who need to test apps under different privileges.</p>\n<p>But there’s still a way to sign in as a different user in SharePoint 2013/2016. Just go to the following URL:</p>\n<pre><code>👉 http://yourservername/_layouts/closeConnection.aspx?loginasanotheruser=true</code></pre><p>(It may not work with IE 10 &amp; Safari browsers.)</p>\n<p>Another way of signing in as a different user is to run the browser under a different user account, but using the link above simple for quick access.</p>\n<p>And there you go.</p>\n"},{"title":"SharePoint Online:Import Terms From CSV","date":"2018-08-27T17:21:56.000Z","description":"SharePoint Online:Import Terms From CSV file","summary":"This post detail about how to import terms to term set in SharePoint Online from a CSV file using PowerShell.","img":"/images/post/Import-Terms-From-CSV.jpg","cover":true,"coverImg":"/images/postcover/postcover-3.jpg","_content":"\n<strong>Requirement:</strong> Import terms to term set in SharePoint Online from a CSV file using PowerShell.\n\nHere is my sample csv file. [Click here](groups.csv) to download.\n\n{% asset_img samplecsv.png %}\n\n\n\n\n<strong>Assumptions:</strong> Make sure TermSets are present in the term store. Probably i could also add code to check if term already exist etc. But for now i am keeping it simple.\n\n\n\n``` PowerShell\n\n\n# +---------------------------------------------------------------------------+\n# | User defined variables                                                    |\n# +---------------------------------------------------------------------------+\n\n$tenant = \"SPCode\"\n$siteUrl = \"https://spcode.sharepoint.com/\"\n$path = \"C:\\temp\\groups.csv\"\n\n# +---------------------------------------------------------------------------+\n# | Connect to SharePoint                                                  |\n# +---------------------------------------------------------------------------+\n\n#$creds = Get-Credential\n\n\nWrite-Output $(\"Connecting to {0}\" -f $tenant);\nConnect-PnPOnline -Url $siteUrl\n\nwrite-host \"connected with $($siteUrl)\"\n\n\nfunction CreateTermSet {\n    param (\n        [string]$name\n    )\n    try {       \n        New-PnPTermSet -Name $name -TermGroup \"TAA\"        \n        Write-Host \"$($name) TermSet created. \" -ForegroundColor Magenta\n    }\n    catch [Exception] {\n        Write-Host \"$($name) TermSet creation failed with Exception $($_.Exception.Message).\" -ForegroundColor Red\n    }\n}\n\n\n# +---------------------------------------------------------------------------+\n# | Getting csv data                                                  |\n# +---------------------------------------------------------------------------+\n\n$csvData = Import-Csv -Path $path\n\n$groupName = $csvData | Select-Object -ExpandProperty \"GroupName\" | Where-Object {($_ -ne \"\")} \n$groupCode = $csvData  | Select-Object -ExpandProperty \"Groupcode\" | Where-Object {($_ -ne \"\")} \n$groupCategoryID = $csvData | Select-Object -ExpandProperty \"GroupCategoryID\" | Where-Object {($_ -ne \"\")}\n\n$termsHashTable = @{}\n$termsHashTable.\"GroupName\" = @($groupName) #adds an array\n$termsHashTable.\"Groupcode\" = @($groupCode) #adds an array\n$termsHashTable.\"GroupCategoryID\" = @($groupCategoryID) #adds an array\n\nforeach ($key in $termsHashTable.Keys) {\n\n    \n    Write-host \"Creating $($key) terms......\" -ForegroundColor Cyan\n\n    $values = $termsHashTable[$key]   \n\n    foreach ($item in $values) {\n\n        try {       \n            New-PnPTerm -TermSet $key -TermGroup \"TAA\" -Name $item -LCID \"1033\"\n            Write-host $item \" term created\"  -ForegroundColor Green\n        }       \n        catch [Exception] {\n            Write-host $item \" failed with exception message \" $_.Exception.Message    -ForegroundColor Red       \n        }\n    }\n}\n\n\n```\n\n## Import Terms to Term Set from CSV using CSOM PowerShell\n\n``` PowerShell\n#Load SharePoint CSOM Assemblies\nAdd-Type -Path \"C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\16\\ISAPI\\Microsoft.SharePoint.Client.dll\"\nAdd-Type -Path \"C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\16\\ISAPI\\Microsoft.SharePoint.Client.Runtime.dll\"\nAdd-Type -Path \"C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\16\\ISAPI\\Microsoft.SharePoint.Client.Taxonomy.dll\"\n   \n#Variables for Processing\n$AdminURL = \"https://spcode-admin.sharepoint.com/\"\n$TermGroupName= \"TAA\"\n$TermSetName=\"GroupName\"\n$CSVFile =\"C:\\Temp\\ImportTerms.csv\"\n$TermHeaderInCSV =\"GroupName\"\n \nTry {\n    #Get Credentials to connect\n    $Cred = Get-Credential\n    $Credentials = New-Object Microsoft.SharePoint.Client.SharePointOnlineCredentials($Cred.Username, $Cred.Password)\n \n    #Setup the context\n    $Ctx = New-Object Microsoft.SharePoint.Client.ClientContext($AdminURL)\n    $Ctx.Credentials = $Credentials\n \n    #Get the term store\n    $TaxonomySession=[Microsoft.SharePoint.Client.Taxonomy.TaxonomySession]::GetTaxonomySession($Ctx)\n    $TaxonomySession.UpdateCache()\n    $TermStore =$TaxonomySession.GetDefaultSiteCollectionTermStore()\n    $Ctx.Load($TaxonomySession)\n    $Ctx.Load($TermStore)\n    $Ctx.ExecuteQuery()\n \n    #Get Termstore data from CSV and iterate through each row\n    Import-Csv $CSVFile | ForEach-Object {\n       \n        #Get the Term Group\n        $TermGroup=$TermStore.Groups.GetByName($TermGroupName)\n \n        #Get the term set\n        $TermSet = $TermGroup.TermSets.GetByName($TermSetName)\n \n        #CSV File Header Row in Term to Add\n        $TermName = $_.$($TermHeaderInCSV)\n  \n        #Check if the given term exists already\n        $Terms = $TermSet.Terms\n        $Ctx.Load($Terms)\n        $Ctx.ExecuteQuery()\n        $Term = $Terms | Where-Object {$_.Name -eq $TermName}\n     \n        If(-not $Term)\n        {\n            #Create Term Set\n            Write-host \"Creating Term '$TermName'\" -ForegroundColor Cyan\n            $Term = $TermSet.CreateTerm($TermName,1033,[System.Guid]::NewGuid().toString())\n            $Ctx.Load($Term)\n            $Ctx.ExecuteQuery()\n            $Term.TermStore.CommitAll()\n            $TaxonomySession.UpdateCache()\n            Write-host \"New Term '$TermName' Added Successfully!\" -ForegroundColor Green\n        }\n        else\n        {\n            Write-host \"Term '$TermName' Exists Already!\" -ForegroundColor Yellow\n        }\n    }\n }\nCatch {\n    write-host -f Red \"Error Importing Term store Data!\" $_.Exception.Message\n}\n\n\n```\n\n\n","source":"_posts/Import-Terms-From-CSV.md","raw":"---\ntitle: SharePoint Online:Import Terms From CSV\ndate: 2018-08-27 18:21:56\ntags: [Sharepoint TermStore, PnP PowerShell]\ndescription: SharePoint Online:Import Terms From CSV file\ncategories: [PowerShell]\nsummary: This post detail about how to import terms to term set in SharePoint Online from a CSV file using PowerShell.\nimg: /images/post/Import-Terms-From-CSV.jpg\ncover: true\ncoverImg: /images/postcover/postcover-3.jpg\n---\n\n<strong>Requirement:</strong> Import terms to term set in SharePoint Online from a CSV file using PowerShell.\n\nHere is my sample csv file. [Click here](groups.csv) to download.\n\n{% asset_img samplecsv.png %}\n\n\n\n\n<strong>Assumptions:</strong> Make sure TermSets are present in the term store. Probably i could also add code to check if term already exist etc. But for now i am keeping it simple.\n\n\n\n``` PowerShell\n\n\n# +---------------------------------------------------------------------------+\n# | User defined variables                                                    |\n# +---------------------------------------------------------------------------+\n\n$tenant = \"SPCode\"\n$siteUrl = \"https://spcode.sharepoint.com/\"\n$path = \"C:\\temp\\groups.csv\"\n\n# +---------------------------------------------------------------------------+\n# | Connect to SharePoint                                                  |\n# +---------------------------------------------------------------------------+\n\n#$creds = Get-Credential\n\n\nWrite-Output $(\"Connecting to {0}\" -f $tenant);\nConnect-PnPOnline -Url $siteUrl\n\nwrite-host \"connected with $($siteUrl)\"\n\n\nfunction CreateTermSet {\n    param (\n        [string]$name\n    )\n    try {       \n        New-PnPTermSet -Name $name -TermGroup \"TAA\"        \n        Write-Host \"$($name) TermSet created. \" -ForegroundColor Magenta\n    }\n    catch [Exception] {\n        Write-Host \"$($name) TermSet creation failed with Exception $($_.Exception.Message).\" -ForegroundColor Red\n    }\n}\n\n\n# +---------------------------------------------------------------------------+\n# | Getting csv data                                                  |\n# +---------------------------------------------------------------------------+\n\n$csvData = Import-Csv -Path $path\n\n$groupName = $csvData | Select-Object -ExpandProperty \"GroupName\" | Where-Object {($_ -ne \"\")} \n$groupCode = $csvData  | Select-Object -ExpandProperty \"Groupcode\" | Where-Object {($_ -ne \"\")} \n$groupCategoryID = $csvData | Select-Object -ExpandProperty \"GroupCategoryID\" | Where-Object {($_ -ne \"\")}\n\n$termsHashTable = @{}\n$termsHashTable.\"GroupName\" = @($groupName) #adds an array\n$termsHashTable.\"Groupcode\" = @($groupCode) #adds an array\n$termsHashTable.\"GroupCategoryID\" = @($groupCategoryID) #adds an array\n\nforeach ($key in $termsHashTable.Keys) {\n\n    \n    Write-host \"Creating $($key) terms......\" -ForegroundColor Cyan\n\n    $values = $termsHashTable[$key]   \n\n    foreach ($item in $values) {\n\n        try {       \n            New-PnPTerm -TermSet $key -TermGroup \"TAA\" -Name $item -LCID \"1033\"\n            Write-host $item \" term created\"  -ForegroundColor Green\n        }       \n        catch [Exception] {\n            Write-host $item \" failed with exception message \" $_.Exception.Message    -ForegroundColor Red       \n        }\n    }\n}\n\n\n```\n\n## Import Terms to Term Set from CSV using CSOM PowerShell\n\n``` PowerShell\n#Load SharePoint CSOM Assemblies\nAdd-Type -Path \"C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\16\\ISAPI\\Microsoft.SharePoint.Client.dll\"\nAdd-Type -Path \"C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\16\\ISAPI\\Microsoft.SharePoint.Client.Runtime.dll\"\nAdd-Type -Path \"C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\16\\ISAPI\\Microsoft.SharePoint.Client.Taxonomy.dll\"\n   \n#Variables for Processing\n$AdminURL = \"https://spcode-admin.sharepoint.com/\"\n$TermGroupName= \"TAA\"\n$TermSetName=\"GroupName\"\n$CSVFile =\"C:\\Temp\\ImportTerms.csv\"\n$TermHeaderInCSV =\"GroupName\"\n \nTry {\n    #Get Credentials to connect\n    $Cred = Get-Credential\n    $Credentials = New-Object Microsoft.SharePoint.Client.SharePointOnlineCredentials($Cred.Username, $Cred.Password)\n \n    #Setup the context\n    $Ctx = New-Object Microsoft.SharePoint.Client.ClientContext($AdminURL)\n    $Ctx.Credentials = $Credentials\n \n    #Get the term store\n    $TaxonomySession=[Microsoft.SharePoint.Client.Taxonomy.TaxonomySession]::GetTaxonomySession($Ctx)\n    $TaxonomySession.UpdateCache()\n    $TermStore =$TaxonomySession.GetDefaultSiteCollectionTermStore()\n    $Ctx.Load($TaxonomySession)\n    $Ctx.Load($TermStore)\n    $Ctx.ExecuteQuery()\n \n    #Get Termstore data from CSV and iterate through each row\n    Import-Csv $CSVFile | ForEach-Object {\n       \n        #Get the Term Group\n        $TermGroup=$TermStore.Groups.GetByName($TermGroupName)\n \n        #Get the term set\n        $TermSet = $TermGroup.TermSets.GetByName($TermSetName)\n \n        #CSV File Header Row in Term to Add\n        $TermName = $_.$($TermHeaderInCSV)\n  \n        #Check if the given term exists already\n        $Terms = $TermSet.Terms\n        $Ctx.Load($Terms)\n        $Ctx.ExecuteQuery()\n        $Term = $Terms | Where-Object {$_.Name -eq $TermName}\n     \n        If(-not $Term)\n        {\n            #Create Term Set\n            Write-host \"Creating Term '$TermName'\" -ForegroundColor Cyan\n            $Term = $TermSet.CreateTerm($TermName,1033,[System.Guid]::NewGuid().toString())\n            $Ctx.Load($Term)\n            $Ctx.ExecuteQuery()\n            $Term.TermStore.CommitAll()\n            $TaxonomySession.UpdateCache()\n            Write-host \"New Term '$TermName' Added Successfully!\" -ForegroundColor Green\n        }\n        else\n        {\n            Write-host \"Term '$TermName' Exists Already!\" -ForegroundColor Yellow\n        }\n    }\n }\nCatch {\n    write-host -f Red \"Error Importing Term store Data!\" $_.Exception.Message\n}\n\n\n```\n\n\n","slug":"Import-Terms-From-CSV","published":1,"updated":"2020-03-15T15:16:16.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdbwg6m40002ioetz2vqk1xc","content":"<p><strong>Requirement:</strong> Import terms to term set in SharePoint Online from a CSV file using PowerShell.</p>\n<p>Here is my sample csv file. <a href=\"groups.csv\">Click here</a> to download.</p>\n<img src=\"/2018/08/27/Import-Terms-From-CSV/samplecsv.png\">\n\n\n\n\n<p><strong>Assumptions:</strong> Make sure TermSets are present in the term store. Probably i could also add code to check if term already exist etc. But for now i am keeping it simple.</p>\n<pre class=\"line-numbers language-PowerShell\"><code class=\"language-PowerShell\">\n\n# +---------------------------------------------------------------------------+\n# | User defined variables                                                    |\n# +---------------------------------------------------------------------------+\n\n$tenant = \"SPCode\"\n$siteUrl = \"https://spcode.sharepoint.com/\"\n$path = \"C:\\temp\\groups.csv\"\n\n# +---------------------------------------------------------------------------+\n# | Connect to SharePoint                                                  |\n# +---------------------------------------------------------------------------+\n\n#$creds = Get-Credential\n\n\nWrite-Output $(\"Connecting to {0}\" -f $tenant);\nConnect-PnPOnline -Url $siteUrl\n\nwrite-host \"connected with $($siteUrl)\"\n\n\nfunction CreateTermSet {\n    param (\n        [string]$name\n    )\n    try {       \n        New-PnPTermSet -Name $name -TermGroup \"TAA\"        \n        Write-Host \"$($name) TermSet created. \" -ForegroundColor Magenta\n    }\n    catch [Exception] {\n        Write-Host \"$($name) TermSet creation failed with Exception $($_.Exception.Message).\" -ForegroundColor Red\n    }\n}\n\n\n# +---------------------------------------------------------------------------+\n# | Getting csv data                                                  |\n# +---------------------------------------------------------------------------+\n\n$csvData = Import-Csv -Path $path\n\n$groupName = $csvData | Select-Object -ExpandProperty \"GroupName\" | Where-Object {($_ -ne \"\")} \n$groupCode = $csvData  | Select-Object -ExpandProperty \"Groupcode\" | Where-Object {($_ -ne \"\")} \n$groupCategoryID = $csvData | Select-Object -ExpandProperty \"GroupCategoryID\" | Where-Object {($_ -ne \"\")}\n\n$termsHashTable = @{}\n$termsHashTable.\"GroupName\" = @($groupName) #adds an array\n$termsHashTable.\"Groupcode\" = @($groupCode) #adds an array\n$termsHashTable.\"GroupCategoryID\" = @($groupCategoryID) #adds an array\n\nforeach ($key in $termsHashTable.Keys) {\n\n\n    Write-host \"Creating $($key) terms......\" -ForegroundColor Cyan\n\n    $values = $termsHashTable[$key]   \n\n    foreach ($item in $values) {\n\n        try {       \n            New-PnPTerm -TermSet $key -TermGroup \"TAA\" -Name $item -LCID \"1033\"\n            Write-host $item \" term created\"  -ForegroundColor Green\n        }       \n        catch [Exception] {\n            Write-host $item \" failed with exception message \" $_.Exception.Message    -ForegroundColor Red       \n        }\n    }\n}\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Import-Terms-to-Term-Set-from-CSV-using-CSOM-PowerShell\"><a href=\"#Import-Terms-to-Term-Set-from-CSV-using-CSOM-PowerShell\" class=\"headerlink\" title=\"Import Terms to Term Set from CSV using CSOM PowerShell\"></a>Import Terms to Term Set from CSV using CSOM PowerShell</h2><pre class=\"line-numbers language-PowerShell\"><code class=\"language-PowerShell\">#Load SharePoint CSOM Assemblies\nAdd-Type -Path \"C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\16\\ISAPI\\Microsoft.SharePoint.Client.dll\"\nAdd-Type -Path \"C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\16\\ISAPI\\Microsoft.SharePoint.Client.Runtime.dll\"\nAdd-Type -Path \"C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\16\\ISAPI\\Microsoft.SharePoint.Client.Taxonomy.dll\"\n\n#Variables for Processing\n$AdminURL = \"https://spcode-admin.sharepoint.com/\"\n$TermGroupName= \"TAA\"\n$TermSetName=\"GroupName\"\n$CSVFile =\"C:\\Temp\\ImportTerms.csv\"\n$TermHeaderInCSV =\"GroupName\"\n\nTry {\n    #Get Credentials to connect\n    $Cred = Get-Credential\n    $Credentials = New-Object Microsoft.SharePoint.Client.SharePointOnlineCredentials($Cred.Username, $Cred.Password)\n\n    #Setup the context\n    $Ctx = New-Object Microsoft.SharePoint.Client.ClientContext($AdminURL)\n    $Ctx.Credentials = $Credentials\n\n    #Get the term store\n    $TaxonomySession=[Microsoft.SharePoint.Client.Taxonomy.TaxonomySession]::GetTaxonomySession($Ctx)\n    $TaxonomySession.UpdateCache()\n    $TermStore =$TaxonomySession.GetDefaultSiteCollectionTermStore()\n    $Ctx.Load($TaxonomySession)\n    $Ctx.Load($TermStore)\n    $Ctx.ExecuteQuery()\n\n    #Get Termstore data from CSV and iterate through each row\n    Import-Csv $CSVFile | ForEach-Object {\n\n        #Get the Term Group\n        $TermGroup=$TermStore.Groups.GetByName($TermGroupName)\n\n        #Get the term set\n        $TermSet = $TermGroup.TermSets.GetByName($TermSetName)\n\n        #CSV File Header Row in Term to Add\n        $TermName = $_.$($TermHeaderInCSV)\n\n        #Check if the given term exists already\n        $Terms = $TermSet.Terms\n        $Ctx.Load($Terms)\n        $Ctx.ExecuteQuery()\n        $Term = $Terms | Where-Object {$_.Name -eq $TermName}\n\n        If(-not $Term)\n        {\n            #Create Term Set\n            Write-host \"Creating Term '$TermName'\" -ForegroundColor Cyan\n            $Term = $TermSet.CreateTerm($TermName,1033,[System.Guid]::NewGuid().toString())\n            $Ctx.Load($Term)\n            $Ctx.ExecuteQuery()\n            $Term.TermStore.CommitAll()\n            $TaxonomySession.UpdateCache()\n            Write-host \"New Term '$TermName' Added Successfully!\" -ForegroundColor Green\n        }\n        else\n        {\n            Write-host \"Term '$TermName' Exists Already!\" -ForegroundColor Yellow\n        }\n    }\n }\nCatch {\n    write-host -f Red \"Error Importing Term store Data!\" $_.Exception.Message\n}\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Requirement:</strong> Import terms to term set in SharePoint Online from a CSV file using PowerShell.</p>\n<p>Here is my sample csv file. <a href=\"groups.csv\">Click here</a> to download.</p>\n<img src=\"/2018/08/27/Import-Terms-From-CSV/samplecsv.png\">\n\n\n\n\n<p><strong>Assumptions:</strong> Make sure TermSets are present in the term store. Probably i could also add code to check if term already exist etc. But for now i am keeping it simple.</p>\n<pre><code class=\"PowerShell\">\n\n# +---------------------------------------------------------------------------+\n# | User defined variables                                                    |\n# +---------------------------------------------------------------------------+\n\n$tenant = &quot;SPCode&quot;\n$siteUrl = &quot;https://spcode.sharepoint.com/&quot;\n$path = &quot;C:\\temp\\groups.csv&quot;\n\n# +---------------------------------------------------------------------------+\n# | Connect to SharePoint                                                  |\n# +---------------------------------------------------------------------------+\n\n#$creds = Get-Credential\n\n\nWrite-Output $(&quot;Connecting to {0}&quot; -f $tenant);\nConnect-PnPOnline -Url $siteUrl\n\nwrite-host &quot;connected with $($siteUrl)&quot;\n\n\nfunction CreateTermSet {\n    param (\n        [string]$name\n    )\n    try {       \n        New-PnPTermSet -Name $name -TermGroup &quot;TAA&quot;        \n        Write-Host &quot;$($name) TermSet created. &quot; -ForegroundColor Magenta\n    }\n    catch [Exception] {\n        Write-Host &quot;$($name) TermSet creation failed with Exception $($_.Exception.Message).&quot; -ForegroundColor Red\n    }\n}\n\n\n# +---------------------------------------------------------------------------+\n# | Getting csv data                                                  |\n# +---------------------------------------------------------------------------+\n\n$csvData = Import-Csv -Path $path\n\n$groupName = $csvData | Select-Object -ExpandProperty &quot;GroupName&quot; | Where-Object {($_ -ne &quot;&quot;)} \n$groupCode = $csvData  | Select-Object -ExpandProperty &quot;Groupcode&quot; | Where-Object {($_ -ne &quot;&quot;)} \n$groupCategoryID = $csvData | Select-Object -ExpandProperty &quot;GroupCategoryID&quot; | Where-Object {($_ -ne &quot;&quot;)}\n\n$termsHashTable = @{}\n$termsHashTable.&quot;GroupName&quot; = @($groupName) #adds an array\n$termsHashTable.&quot;Groupcode&quot; = @($groupCode) #adds an array\n$termsHashTable.&quot;GroupCategoryID&quot; = @($groupCategoryID) #adds an array\n\nforeach ($key in $termsHashTable.Keys) {\n\n\n    Write-host &quot;Creating $($key) terms......&quot; -ForegroundColor Cyan\n\n    $values = $termsHashTable[$key]   \n\n    foreach ($item in $values) {\n\n        try {       \n            New-PnPTerm -TermSet $key -TermGroup &quot;TAA&quot; -Name $item -LCID &quot;1033&quot;\n            Write-host $item &quot; term created&quot;  -ForegroundColor Green\n        }       \n        catch [Exception] {\n            Write-host $item &quot; failed with exception message &quot; $_.Exception.Message    -ForegroundColor Red       \n        }\n    }\n}\n\n</code></pre>\n<h2 id=\"Import-Terms-to-Term-Set-from-CSV-using-CSOM-PowerShell\"><a href=\"#Import-Terms-to-Term-Set-from-CSV-using-CSOM-PowerShell\" class=\"headerlink\" title=\"Import Terms to Term Set from CSV using CSOM PowerShell\"></a>Import Terms to Term Set from CSV using CSOM PowerShell</h2><pre><code class=\"PowerShell\">#Load SharePoint CSOM Assemblies\nAdd-Type -Path &quot;C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\16\\ISAPI\\Microsoft.SharePoint.Client.dll&quot;\nAdd-Type -Path &quot;C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\16\\ISAPI\\Microsoft.SharePoint.Client.Runtime.dll&quot;\nAdd-Type -Path &quot;C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\16\\ISAPI\\Microsoft.SharePoint.Client.Taxonomy.dll&quot;\n\n#Variables for Processing\n$AdminURL = &quot;https://spcode-admin.sharepoint.com/&quot;\n$TermGroupName= &quot;TAA&quot;\n$TermSetName=&quot;GroupName&quot;\n$CSVFile =&quot;C:\\Temp\\ImportTerms.csv&quot;\n$TermHeaderInCSV =&quot;GroupName&quot;\n\nTry {\n    #Get Credentials to connect\n    $Cred = Get-Credential\n    $Credentials = New-Object Microsoft.SharePoint.Client.SharePointOnlineCredentials($Cred.Username, $Cred.Password)\n\n    #Setup the context\n    $Ctx = New-Object Microsoft.SharePoint.Client.ClientContext($AdminURL)\n    $Ctx.Credentials = $Credentials\n\n    #Get the term store\n    $TaxonomySession=[Microsoft.SharePoint.Client.Taxonomy.TaxonomySession]::GetTaxonomySession($Ctx)\n    $TaxonomySession.UpdateCache()\n    $TermStore =$TaxonomySession.GetDefaultSiteCollectionTermStore()\n    $Ctx.Load($TaxonomySession)\n    $Ctx.Load($TermStore)\n    $Ctx.ExecuteQuery()\n\n    #Get Termstore data from CSV and iterate through each row\n    Import-Csv $CSVFile | ForEach-Object {\n\n        #Get the Term Group\n        $TermGroup=$TermStore.Groups.GetByName($TermGroupName)\n\n        #Get the term set\n        $TermSet = $TermGroup.TermSets.GetByName($TermSetName)\n\n        #CSV File Header Row in Term to Add\n        $TermName = $_.$($TermHeaderInCSV)\n\n        #Check if the given term exists already\n        $Terms = $TermSet.Terms\n        $Ctx.Load($Terms)\n        $Ctx.ExecuteQuery()\n        $Term = $Terms | Where-Object {$_.Name -eq $TermName}\n\n        If(-not $Term)\n        {\n            #Create Term Set\n            Write-host &quot;Creating Term &#39;$TermName&#39;&quot; -ForegroundColor Cyan\n            $Term = $TermSet.CreateTerm($TermName,1033,[System.Guid]::NewGuid().toString())\n            $Ctx.Load($Term)\n            $Ctx.ExecuteQuery()\n            $Term.TermStore.CommitAll()\n            $TaxonomySession.UpdateCache()\n            Write-host &quot;New Term &#39;$TermName&#39; Added Successfully!&quot; -ForegroundColor Green\n        }\n        else\n        {\n            Write-host &quot;Term &#39;$TermName&#39; Exists Already!&quot; -ForegroundColor Yellow\n        }\n    }\n }\nCatch {\n    write-host -f Red &quot;Error Importing Term store Data!&quot; $_.Exception.Message\n}\n\n</code></pre>\n"},{"title":"SharePoint Online Integration with Azure App Insights","date":"2018-09-09T15:12:00.000Z","description":"SharePoint Online Integration with Azure App Insights","summary":"This post detail about Azure Application Insight and how to track custom event in the page. For example, user clicking on the external link.","img":"/images/post/SharePoint-Online-Integration-with-Azure-App-Insights.png","cover":true,"coverImg":"/images/postcover/postcover-3.jpg","_content":"Recently I had a chance to work on one of the project to monitor custom events from SharePoint Online pages.\n\nKeeping in mind above scenario, there are two platform comes in my mind\n\n* Azure App Insights\n* Google Analytics\n\nI really liked Azure App Insights. Azure Application Insight is more than just custom dimensions, metrics and page views. It is an extensible Application Performance Management (APM) service.\n\n## Application Insights monitors\n\nhere are few of the examples of different type of data being analyzed by Azure App Insight\n\n1. Request rates, response times, and failure rates\n2. Dependency rates, response times, and failure rates\n3. Exceptions\n4. Load Performance \n\nfor complete list, visit [What is Application Insights?](https://docs.microsoft.com/en-us/azure/application-insights/app-insights-overview)\n\n## Solution\n\nHere are the steps to track custom events in the page. One of the scenario for custom events could be to track event every time user click on the external link. \n\n1. Create Azure Application Insight\n{% asset_img create-new-azure-app-insight.png %}\n2. Once the azure app insight is created. keep note of your Instrumentation Key.\n3. JavaScript code snippet to track custom event from SharePoint Page\n\n``` JavaScript\n\n$(function () {\n    RemoteInject();\n});\nfunction RemoteInject() {\n\n    var appInsights = window.appInsights || function (a) {\n        function b(a) { c[a] = function () { var b = arguments; c.queue.push(function () { c[a].apply(c, b) }) } } var c = { config: a }, d = document, e = window; setTimeout(function () { var b = d.createElement(\"script\"); b.src = a.url || \"https://az416426.vo.msecnd.net/scripts/a/ai.0.js\", d.getElementsByTagName(\"script\")[0].parentNode.appendChild(b) }); try { c.cookie = d.cookie } catch (a) { } c.queue = []; for (var f = [\"Event\", \"Exception\", \"Metric\", \"PageView\", \"Trace\", \"Dependency\"]; f.length;)b(\"track\" + f.pop()); if (b(\"setAuthenticatedUserContext\"), b(\"clearAuthenticatedUserContext\"), b(\"startTrackEvent\"), b(\"stopTrackEvent\"), b(\"startTrackPage\"), b(\"stopTrackPage\"), b(\"flush\"), !a.disableExceptionTracking) { f = \"onerror\", b(\"_\" + f); var g = e[f]; e[f] = function (a, b, d, e, h) { var i = g && g(a, b, d, e, h); return !0 !== i && c[\"_\" + f](a, b, d, e, h), i } } return c\n    }({\n        instrumentationKey: \"\"\n    });\n    window.appInsights = appInsights;\n    appInsights.trackPageView(\"CodeHub Monitoring\");\n\n    $('a').click(function () {\n\n        var link = this.hostname;\n        if ($('a').isExternal(link)) {           \n            window.appInsights.trackEvent('External link clicked with URL',\n                {\n                    Url: $(this).attr('href')\n                },\n                {});\n        }\n        else { \n        }\n\n    });\n\n};\n\n$.fn.isExternal = function (link) {\n    var host = window.location.host;\n    return (link !== host);\n};\n\n```\n\n4. The next step is to inject this piece of JavaScript in every page in your Office 365 portal. There are plenty of ways to do this. I am going to create a custom action.\n\n5. Create few external and internal links on SharePoint Page. As soon you will click on external link, External link information will be tracked. Sometimes you have to wait for couple of minutes before your event data start appearing in the Azure App Insight.\n\n6. Here is screenshot where external link event information appears\n{% asset_img customevents.png %}\n\nHere are some of Azure Application Insights API Methods. For more information visit [Application Insights API Methods](https://docs.microsoft.com/en-us/azure/application-insights/app-insights-api-custom-events-metrics)\n\n1. TrackPageView    \n2. TrackEvent   \n3. TrackMetric  \n4. TrackException   \n5. TrackRequest \n6. TrackTrace   \n7. TrackDependency\n\nI hope this helps and gives a starting point to implement complex scenarios.\n\n\n\n\n\n\n","source":"_posts/SharePoint-Online-Integration-with-Azure-App-Insights.md","raw":"---\ntitle: SharePoint Online Integration with Azure App Insights\ndate: 2018-09-09 16:12:00\ntags: [Azure Application Insight, SharePoint Online]\ndescription: SharePoint Online Integration with Azure App Insights\ncategories: Azure App Insights\nsummary: This post detail about Azure Application Insight and how to track custom event in the page. For example, user clicking on the external link.\nimg: /images/post/SharePoint-Online-Integration-with-Azure-App-Insights.png\ncover: true\ncoverImg: /images/postcover/postcover-3.jpg\n\n---\nRecently I had a chance to work on one of the project to monitor custom events from SharePoint Online pages.\n\nKeeping in mind above scenario, there are two platform comes in my mind\n\n* Azure App Insights\n* Google Analytics\n\nI really liked Azure App Insights. Azure Application Insight is more than just custom dimensions, metrics and page views. It is an extensible Application Performance Management (APM) service.\n\n## Application Insights monitors\n\nhere are few of the examples of different type of data being analyzed by Azure App Insight\n\n1. Request rates, response times, and failure rates\n2. Dependency rates, response times, and failure rates\n3. Exceptions\n4. Load Performance \n\nfor complete list, visit [What is Application Insights?](https://docs.microsoft.com/en-us/azure/application-insights/app-insights-overview)\n\n## Solution\n\nHere are the steps to track custom events in the page. One of the scenario for custom events could be to track event every time user click on the external link. \n\n1. Create Azure Application Insight\n{% asset_img create-new-azure-app-insight.png %}\n2. Once the azure app insight is created. keep note of your Instrumentation Key.\n3. JavaScript code snippet to track custom event from SharePoint Page\n\n``` JavaScript\n\n$(function () {\n    RemoteInject();\n});\nfunction RemoteInject() {\n\n    var appInsights = window.appInsights || function (a) {\n        function b(a) { c[a] = function () { var b = arguments; c.queue.push(function () { c[a].apply(c, b) }) } } var c = { config: a }, d = document, e = window; setTimeout(function () { var b = d.createElement(\"script\"); b.src = a.url || \"https://az416426.vo.msecnd.net/scripts/a/ai.0.js\", d.getElementsByTagName(\"script\")[0].parentNode.appendChild(b) }); try { c.cookie = d.cookie } catch (a) { } c.queue = []; for (var f = [\"Event\", \"Exception\", \"Metric\", \"PageView\", \"Trace\", \"Dependency\"]; f.length;)b(\"track\" + f.pop()); if (b(\"setAuthenticatedUserContext\"), b(\"clearAuthenticatedUserContext\"), b(\"startTrackEvent\"), b(\"stopTrackEvent\"), b(\"startTrackPage\"), b(\"stopTrackPage\"), b(\"flush\"), !a.disableExceptionTracking) { f = \"onerror\", b(\"_\" + f); var g = e[f]; e[f] = function (a, b, d, e, h) { var i = g && g(a, b, d, e, h); return !0 !== i && c[\"_\" + f](a, b, d, e, h), i } } return c\n    }({\n        instrumentationKey: \"\"\n    });\n    window.appInsights = appInsights;\n    appInsights.trackPageView(\"CodeHub Monitoring\");\n\n    $('a').click(function () {\n\n        var link = this.hostname;\n        if ($('a').isExternal(link)) {           \n            window.appInsights.trackEvent('External link clicked with URL',\n                {\n                    Url: $(this).attr('href')\n                },\n                {});\n        }\n        else { \n        }\n\n    });\n\n};\n\n$.fn.isExternal = function (link) {\n    var host = window.location.host;\n    return (link !== host);\n};\n\n```\n\n4. The next step is to inject this piece of JavaScript in every page in your Office 365 portal. There are plenty of ways to do this. I am going to create a custom action.\n\n5. Create few external and internal links on SharePoint Page. As soon you will click on external link, External link information will be tracked. Sometimes you have to wait for couple of minutes before your event data start appearing in the Azure App Insight.\n\n6. Here is screenshot where external link event information appears\n{% asset_img customevents.png %}\n\nHere are some of Azure Application Insights API Methods. For more information visit [Application Insights API Methods](https://docs.microsoft.com/en-us/azure/application-insights/app-insights-api-custom-events-metrics)\n\n1. TrackPageView    \n2. TrackEvent   \n3. TrackMetric  \n4. TrackException   \n5. TrackRequest \n6. TrackTrace   \n7. TrackDependency\n\nI hope this helps and gives a starting point to implement complex scenarios.\n\n\n\n\n\n\n","slug":"SharePoint-Online-Integration-with-Azure-App-Insights","published":1,"updated":"2020-03-15T15:16:16.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdbwg6m90006ioetp1vje8st","content":"<p>Recently I had a chance to work on one of the project to monitor custom events from SharePoint Online pages.</p>\n<p>Keeping in mind above scenario, there are two platform comes in my mind</p>\n<ul>\n<li>Azure App Insights</li>\n<li>Google Analytics</li>\n</ul>\n<p>I really liked Azure App Insights. Azure Application Insight is more than just custom dimensions, metrics and page views. It is an extensible Application Performance Management (APM) service.</p>\n<h2 id=\"Application-Insights-monitors\"><a href=\"#Application-Insights-monitors\" class=\"headerlink\" title=\"Application Insights monitors\"></a>Application Insights monitors</h2><p>here are few of the examples of different type of data being analyzed by Azure App Insight</p>\n<ol>\n<li>Request rates, response times, and failure rates</li>\n<li>Dependency rates, response times, and failure rates</li>\n<li>Exceptions</li>\n<li>Load Performance </li>\n</ol>\n<p>for complete list, visit <a href=\"https://docs.microsoft.com/en-us/azure/application-insights/app-insights-overview\" target=\"_blank\" rel=\"noopener\">What is Application Insights?</a></p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>Here are the steps to track custom events in the page. One of the scenario for custom events could be to track event every time user click on the external link. </p>\n<ol>\n<li>Create Azure Application Insight<img src=\"/2018/09/09/SharePoint-Online-Integration-with-Azure-App-Insights/create-new-azure-app-insight.png\"></li>\n<li>Once the azure app insight is created. keep note of your Instrumentation Key.</li>\n<li>JavaScript code snippet to track custom event from SharePoint Page</li>\n</ol>\n<pre class=\"line-numbers language-JavaScript\"><code class=\"language-JavaScript\">\n$(function () {\n    RemoteInject();\n});\nfunction RemoteInject() {\n\n    var appInsights = window.appInsights || function (a) {\n        function b(a) { c[a] = function () { var b = arguments; c.queue.push(function () { c[a].apply(c, b) }) } } var c = { config: a }, d = document, e = window; setTimeout(function () { var b = d.createElement(\"script\"); b.src = a.url || \"https://az416426.vo.msecnd.net/scripts/a/ai.0.js\", d.getElementsByTagName(\"script\")[0].parentNode.appendChild(b) }); try { c.cookie = d.cookie } catch (a) { } c.queue = []; for (var f = [\"Event\", \"Exception\", \"Metric\", \"PageView\", \"Trace\", \"Dependency\"]; f.length;)b(\"track\" + f.pop()); if (b(\"setAuthenticatedUserContext\"), b(\"clearAuthenticatedUserContext\"), b(\"startTrackEvent\"), b(\"stopTrackEvent\"), b(\"startTrackPage\"), b(\"stopTrackPage\"), b(\"flush\"), !a.disableExceptionTracking) { f = \"onerror\", b(\"_\" + f); var g = e[f]; e[f] = function (a, b, d, e, h) { var i = g && g(a, b, d, e, h); return !0 !== i && c[\"_\" + f](a, b, d, e, h), i } } return c\n    }({\n        instrumentationKey: \"\"\n    });\n    window.appInsights = appInsights;\n    appInsights.trackPageView(\"CodeHub Monitoring\");\n\n    $('a').click(function () {\n\n        var link = this.hostname;\n        if ($('a').isExternal(link)) {           \n            window.appInsights.trackEvent('External link clicked with URL',\n                {\n                    Url: $(this).attr('href')\n                },\n                {});\n        }\n        else { \n        }\n\n    });\n\n};\n\n$.fn.isExternal = function (link) {\n    var host = window.location.host;\n    return (link !== host);\n};\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"4\">\n<li><p>The next step is to inject this piece of JavaScript in every page in your Office 365 portal. There are plenty of ways to do this. I am going to create a custom action.</p>\n</li>\n<li><p>Create few external and internal links on SharePoint Page. As soon you will click on external link, External link information will be tracked. Sometimes you have to wait for couple of minutes before your event data start appearing in the Azure App Insight.</p>\n</li>\n<li><p>Here is screenshot where external link event information appears</p>\n<img src=\"/2018/09/09/SharePoint-Online-Integration-with-Azure-App-Insights/customevents.png\">\n\n</li>\n</ol>\n<p>Here are some of Azure Application Insights API Methods. For more information visit <a href=\"https://docs.microsoft.com/en-us/azure/application-insights/app-insights-api-custom-events-metrics\" target=\"_blank\" rel=\"noopener\">Application Insights API Methods</a></p>\n<ol>\n<li>TrackPageView    </li>\n<li>TrackEvent   </li>\n<li>TrackMetric  </li>\n<li>TrackException   </li>\n<li>TrackRequest </li>\n<li>TrackTrace   </li>\n<li>TrackDependency</li>\n</ol>\n<p>I hope this helps and gives a starting point to implement complex scenarios.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Recently I had a chance to work on one of the project to monitor custom events from SharePoint Online pages.</p>\n<p>Keeping in mind above scenario, there are two platform comes in my mind</p>\n<ul>\n<li>Azure App Insights</li>\n<li>Google Analytics</li>\n</ul>\n<p>I really liked Azure App Insights. Azure Application Insight is more than just custom dimensions, metrics and page views. It is an extensible Application Performance Management (APM) service.</p>\n<h2 id=\"Application-Insights-monitors\"><a href=\"#Application-Insights-monitors\" class=\"headerlink\" title=\"Application Insights monitors\"></a>Application Insights monitors</h2><p>here are few of the examples of different type of data being analyzed by Azure App Insight</p>\n<ol>\n<li>Request rates, response times, and failure rates</li>\n<li>Dependency rates, response times, and failure rates</li>\n<li>Exceptions</li>\n<li>Load Performance </li>\n</ol>\n<p>for complete list, visit <a href=\"https://docs.microsoft.com/en-us/azure/application-insights/app-insights-overview\" target=\"_blank\" rel=\"noopener\">What is Application Insights?</a></p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>Here are the steps to track custom events in the page. One of the scenario for custom events could be to track event every time user click on the external link. </p>\n<ol>\n<li>Create Azure Application Insight<img src=\"/2018/09/09/SharePoint-Online-Integration-with-Azure-App-Insights/create-new-azure-app-insight.png\"></li>\n<li>Once the azure app insight is created. keep note of your Instrumentation Key.</li>\n<li>JavaScript code snippet to track custom event from SharePoint Page</li>\n</ol>\n<pre><code class=\"JavaScript\">\n$(function () {\n    RemoteInject();\n});\nfunction RemoteInject() {\n\n    var appInsights = window.appInsights || function (a) {\n        function b(a) { c[a] = function () { var b = arguments; c.queue.push(function () { c[a].apply(c, b) }) } } var c = { config: a }, d = document, e = window; setTimeout(function () { var b = d.createElement(&quot;script&quot;); b.src = a.url || &quot;https://az416426.vo.msecnd.net/scripts/a/ai.0.js&quot;, d.getElementsByTagName(&quot;script&quot;)[0].parentNode.appendChild(b) }); try { c.cookie = d.cookie } catch (a) { } c.queue = []; for (var f = [&quot;Event&quot;, &quot;Exception&quot;, &quot;Metric&quot;, &quot;PageView&quot;, &quot;Trace&quot;, &quot;Dependency&quot;]; f.length;)b(&quot;track&quot; + f.pop()); if (b(&quot;setAuthenticatedUserContext&quot;), b(&quot;clearAuthenticatedUserContext&quot;), b(&quot;startTrackEvent&quot;), b(&quot;stopTrackEvent&quot;), b(&quot;startTrackPage&quot;), b(&quot;stopTrackPage&quot;), b(&quot;flush&quot;), !a.disableExceptionTracking) { f = &quot;onerror&quot;, b(&quot;_&quot; + f); var g = e[f]; e[f] = function (a, b, d, e, h) { var i = g &amp;&amp; g(a, b, d, e, h); return !0 !== i &amp;&amp; c[&quot;_&quot; + f](a, b, d, e, h), i } } return c\n    }({\n        instrumentationKey: &quot;&quot;\n    });\n    window.appInsights = appInsights;\n    appInsights.trackPageView(&quot;CodeHub Monitoring&quot;);\n\n    $(&#39;a&#39;).click(function () {\n\n        var link = this.hostname;\n        if ($(&#39;a&#39;).isExternal(link)) {           \n            window.appInsights.trackEvent(&#39;External link clicked with URL&#39;,\n                {\n                    Url: $(this).attr(&#39;href&#39;)\n                },\n                {});\n        }\n        else { \n        }\n\n    });\n\n};\n\n$.fn.isExternal = function (link) {\n    var host = window.location.host;\n    return (link !== host);\n};\n</code></pre>\n<ol start=\"4\">\n<li><p>The next step is to inject this piece of JavaScript in every page in your Office 365 portal. There are plenty of ways to do this. I am going to create a custom action.</p>\n</li>\n<li><p>Create few external and internal links on SharePoint Page. As soon you will click on external link, External link information will be tracked. Sometimes you have to wait for couple of minutes before your event data start appearing in the Azure App Insight.</p>\n</li>\n<li><p>Here is screenshot where external link event information appears</p>\n<img src=\"/2018/09/09/SharePoint-Online-Integration-with-Azure-App-Insights/customevents.png\">\n\n</li>\n</ol>\n<p>Here are some of Azure Application Insights API Methods. For more information visit <a href=\"https://docs.microsoft.com/en-us/azure/application-insights/app-insights-api-custom-events-metrics\" target=\"_blank\" rel=\"noopener\">Application Insights API Methods</a></p>\n<ol>\n<li>TrackPageView    </li>\n<li>TrackEvent   </li>\n<li>TrackMetric  </li>\n<li>TrackException   </li>\n<li>TrackRequest </li>\n<li>TrackTrace   </li>\n<li>TrackDependency</li>\n</ol>\n<p>I hope this helps and gives a starting point to implement complex scenarios.</p>\n"},{"layout":"post","title":"SPFX Application Customizer with App Insight","language":"English","description":"Azure App Insight configuration using SPFX Application customizer in SharePoint Modern Pages","date":"2018-12-16T18:53:19.000Z","summary":"How you can configure Azure Application Insight within SharePoint modern site using SPFX Application Customizer.","img":"/images/post/azure-appinsight-configurations-using-spfx-customizer.jpg","cover":true,"_content":"\n\n\nPreviously i have explained how you can configure Azure App Insight in SharePoint Online classic mode. \n\nAs Microsoft driving towards SharePoint modern sites where it is not possible to edit Master Page to add your custom artefacts. However, you can still run custom scripts using different pnp provisoning engine templates etc.\n\nIn this post, I would like to show you following two scenarios\n\n1. How you can configure Azure Application Insight within SharePoint modern site using SPFX Application Customizer.\n2. How to add custom javascript snippet\n\nBefore i jump into more detail i would like to give credit to **Chris O' Brien**. He has written wonderful article on. [Use an SPFx Application Customizer to add JavaScript (e.g. header) to every page in a site](https://www.sharepointnutsandbolts.com/2017/06/SPFx-Application-Customizer-Global-JS-Page-Header.html)\n\n## Step 1 : Create Application Customizer empty project \n\nHere are wonderful tutorials available by microsoft [Getting Started with SPFX Application Customizer](https://docs.microsoft.com/en-us/sharepoint/dev/spfx/extensions/get-started/build-a-hello-world-extension)\n\n## Step2 : Install below npm package and import into your solution\n\n``` \n👉 npm install applicationinsights-js\n```\n\n**Prerequisite**\n\n1. Make sure you have valid Azure App Insight key\n2. Create a custom property called 'instrumentationKey' and add valid Azure App Insight Key under **serve.json** file under config folder\n\n{% asset_img custom-properties.png %}\n\n\n👉 Here is code snippet\n\n <script src=\"https://gist.github.com/ejazhussain/a1857b35fb28beb334e93280b66628b1.js\"></script>\n\nHappy SharePoint modernization!\n","source":"_posts/azure-appinsight-configurations-using-spfx-customizer.md","raw":"---\nlayout: post\ntitle: SPFX Application Customizer with App Insight\nlanguage: English\ntags:\n  - Azure App Insights\n  - SPFX  \ndescription: \n  Azure App Insight configuration using SPFX Application customizer in\n  SharePoint Modern Pages\ndate: 2018-12-16 18:53:19\ncategories: SharePoint Framework \nsummary: How you can configure Azure Application Insight within SharePoint modern site using SPFX Application Customizer.\nimg: /images/post/azure-appinsight-configurations-using-spfx-customizer.jpg\ncover: true\n# coverImg: /images/postcover/postcover-3.jpg\n---\n\n\n\nPreviously i have explained how you can configure Azure App Insight in SharePoint Online classic mode. \n\nAs Microsoft driving towards SharePoint modern sites where it is not possible to edit Master Page to add your custom artefacts. However, you can still run custom scripts using different pnp provisoning engine templates etc.\n\nIn this post, I would like to show you following two scenarios\n\n1. How you can configure Azure Application Insight within SharePoint modern site using SPFX Application Customizer.\n2. How to add custom javascript snippet\n\nBefore i jump into more detail i would like to give credit to **Chris O' Brien**. He has written wonderful article on. [Use an SPFx Application Customizer to add JavaScript (e.g. header) to every page in a site](https://www.sharepointnutsandbolts.com/2017/06/SPFx-Application-Customizer-Global-JS-Page-Header.html)\n\n## Step 1 : Create Application Customizer empty project \n\nHere are wonderful tutorials available by microsoft [Getting Started with SPFX Application Customizer](https://docs.microsoft.com/en-us/sharepoint/dev/spfx/extensions/get-started/build-a-hello-world-extension)\n\n## Step2 : Install below npm package and import into your solution\n\n``` \n👉 npm install applicationinsights-js\n```\n\n**Prerequisite**\n\n1. Make sure you have valid Azure App Insight key\n2. Create a custom property called 'instrumentationKey' and add valid Azure App Insight Key under **serve.json** file under config folder\n\n{% asset_img custom-properties.png %}\n\n\n👉 Here is code snippet\n\n <script src=\"https://gist.github.com/ejazhussain/a1857b35fb28beb334e93280b66628b1.js\"></script>\n\nHappy SharePoint modernization!\n","slug":"azure-appinsight-configurations-using-spfx-customizer","published":1,"updated":"2020-03-15T15:16:16.703Z","comments":1,"photos":[],"link":"","_id":"ckdbwg6md0008ioetx4oyjfdp","content":"<p>Previously i have explained how you can configure Azure App Insight in SharePoint Online classic mode. </p>\n<p>As Microsoft driving towards SharePoint modern sites where it is not possible to edit Master Page to add your custom artefacts. However, you can still run custom scripts using different pnp provisoning engine templates etc.</p>\n<p>In this post, I would like to show you following two scenarios</p>\n<ol>\n<li>How you can configure Azure Application Insight within SharePoint modern site using SPFX Application Customizer.</li>\n<li>How to add custom javascript snippet</li>\n</ol>\n<p>Before i jump into more detail i would like to give credit to <strong>Chris O’ Brien</strong>. He has written wonderful article on. <a href=\"https://www.sharepointnutsandbolts.com/2017/06/SPFx-Application-Customizer-Global-JS-Page-Header.html\" target=\"_blank\" rel=\"noopener\">Use an SPFx Application Customizer to add JavaScript (e.g. header) to every page in a site</a></p>\n<h2 id=\"Step-1-Create-Application-Customizer-empty-project\"><a href=\"#Step-1-Create-Application-Customizer-empty-project\" class=\"headerlink\" title=\"Step 1 : Create Application Customizer empty project\"></a>Step 1 : Create Application Customizer empty project</h2><p>Here are wonderful tutorials available by microsoft <a href=\"https://docs.microsoft.com/en-us/sharepoint/dev/spfx/extensions/get-started/build-a-hello-world-extension\" target=\"_blank\" rel=\"noopener\">Getting Started with SPFX Application Customizer</a></p>\n<h2 id=\"Step2-Install-below-npm-package-and-import-into-your-solution\"><a href=\"#Step2-Install-below-npm-package-and-import-into-your-solution\" class=\"headerlink\" title=\"Step2 : Install below npm package and import into your solution\"></a>Step2 : Install below npm package and import into your solution</h2><pre><code>👉 npm install applicationinsights-js</code></pre><p><strong>Prerequisite</strong></p>\n<ol>\n<li>Make sure you have valid Azure App Insight key</li>\n<li>Create a custom property called ‘instrumentationKey’ and add valid Azure App Insight Key under <strong>serve.json</strong> file under config folder</li>\n</ol>\n<img src=\"/2018/12/16/azure-appinsight-configurations-using-spfx-customizer/custom-properties.png\">\n\n\n<p>👉 Here is code snippet</p>\n <script src=\"https://gist.github.com/ejazhussain/a1857b35fb28beb334e93280b66628b1.js\"></script>\n\n<p>Happy SharePoint modernization!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Previously i have explained how you can configure Azure App Insight in SharePoint Online classic mode. </p>\n<p>As Microsoft driving towards SharePoint modern sites where it is not possible to edit Master Page to add your custom artefacts. However, you can still run custom scripts using different pnp provisoning engine templates etc.</p>\n<p>In this post, I would like to show you following two scenarios</p>\n<ol>\n<li>How you can configure Azure Application Insight within SharePoint modern site using SPFX Application Customizer.</li>\n<li>How to add custom javascript snippet</li>\n</ol>\n<p>Before i jump into more detail i would like to give credit to <strong>Chris O’ Brien</strong>. He has written wonderful article on. <a href=\"https://www.sharepointnutsandbolts.com/2017/06/SPFx-Application-Customizer-Global-JS-Page-Header.html\" target=\"_blank\" rel=\"noopener\">Use an SPFx Application Customizer to add JavaScript (e.g. header) to every page in a site</a></p>\n<h2 id=\"Step-1-Create-Application-Customizer-empty-project\"><a href=\"#Step-1-Create-Application-Customizer-empty-project\" class=\"headerlink\" title=\"Step 1 : Create Application Customizer empty project\"></a>Step 1 : Create Application Customizer empty project</h2><p>Here are wonderful tutorials available by microsoft <a href=\"https://docs.microsoft.com/en-us/sharepoint/dev/spfx/extensions/get-started/build-a-hello-world-extension\" target=\"_blank\" rel=\"noopener\">Getting Started with SPFX Application Customizer</a></p>\n<h2 id=\"Step2-Install-below-npm-package-and-import-into-your-solution\"><a href=\"#Step2-Install-below-npm-package-and-import-into-your-solution\" class=\"headerlink\" title=\"Step2 : Install below npm package and import into your solution\"></a>Step2 : Install below npm package and import into your solution</h2><pre><code>👉 npm install applicationinsights-js</code></pre><p><strong>Prerequisite</strong></p>\n<ol>\n<li>Make sure you have valid Azure App Insight key</li>\n<li>Create a custom property called ‘instrumentationKey’ and add valid Azure App Insight Key under <strong>serve.json</strong> file under config folder</li>\n</ol>\n<img src=\"/2018/12/16/azure-appinsight-configurations-using-spfx-customizer/custom-properties.png\">\n\n\n<p>👉 Here is code snippet</p>\n <script src=\"https://gist.github.com/ejazhussain/a1857b35fb28beb334e93280b66628b1.js\"></script>\n\n<p>Happy SharePoint modernization!</p>\n"},{"title":"Azure blob storage operations using Node.js","date":"2018-12-23T14:50:51.000Z","description":"How to perform different Azure blob storage operations using Node.js, Blob containers, Blob metadata, Blob properties","summary":"How to use Microsoft Graph Extensions with SPFX to provide ability for user to configure consistent UI experience across different devices.","img":"/images/post/azure-blob-storage-using-node.jpg","cover":true,"coverImg":"/images/postcover/postcover-3.jpg","_content":"\nThis article will provide how-to-guide to work with Azure Blob storage using Node.js\n\nCurrently Microsoft Azure Storage SDK.v2 is available as stable version. SDK.v10 is still in preview and which has more features compare to SKD.v2. [Go to Storage SDK v10 for JavaScript (In preview)](https://github.com/Azure/azure-storage-js)\nIn SDK.v2 you can find different operations for Blob, Queue , File,Table in callback style. See below.\n\n## Azure Storage SDK.v2 basic features\n\n**Blobs**\n    Create/Delete Containers\n    Create/Read/Update/Delete Blobs\n**Tables**\n    Create/Delete Tables\n    Query/Create/Read/Update/Delete Entities\n**Files**\n    Create/Delete Shares\n    Create/Delete Directories\n**Create/Read/Update/Delete Files**\n    Queues\n    Create/Delete Queues\n**Insert/Peek Queue Messages**\n    Advanced Queue Operations\n    Service Properties\n**Get Service Properties**\n    Set Service Properties\n\n## Comparison of Azure Storage SDK.v2 and SDKv.10 (In preview)\n\n\n\n| SDK Name                             \t| Version     \t| Description                                                                   \t| NPM/API Reference Links \t|\n|--------------------------------------\t|-------------\t|-------------------------------------------------------------------------------\t|-------------------------\t|\n| [storage SDK v10 for JavaScript](https://github.com/Azure/azure-storage-js)       \t| v10-Preview \t| The next generation async Storage SDK (Blob only, async and promise support)  \t| [NPM - Reference](https://www.npmjs.com/package/@azure/storage-blob)         \t|\n| [Storage SDK v2 for JavaScript](https://github.com/Azure/azure-storage-node)        \t| v2          \t| Legacy Storage SDK in this repository (Blob/Queue/File/Table, callback style) \t| [NPM - Reference](https://www.npmjs.com/package/azure-storage)         \t|\n| [Azure Management SDKs for JavaScript](https://github.com/Azure/azure-sdk-for-node) \t| v2          \t| Management SDKs including Storage Resource Provider APIs                      \t| [NPM - Reference](https://www.npmjs.com/package/azure)         \t|\n\n\t\t\n\nPlease check details on API reference documents:\n\n[Microsoft official API document on docs.microsoft.com](https://docs.microsoft.com/en-us/javascript/api/azure-storage/?view=azure-node-latest)\n[Generated API references on GitHub pages](http://azure.github.io/azure-storage-node/)\n\n\n**Prerequisites**\n\n1. First of all, you need to install Microsoft Azure Storage SDK for Node.js and JavaScript for Browsers using following npm package.\n```\n👉 npm install azure-storage --save\n```\n2. Make sure you have Azure Storage account created in Azure and copy connection string [Here is a quick guide to create Azure Storage Account](https://docs.microsoft.com/en-us/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal)\n3. Create a blob container\n4. Install dotenv package to save your Azure Storage Connection String other configurations\n```\n👉 npm install dotenv --save\n```\n\n## Some Code\n<script src=\"https://gist.github.com/ejazhussain/8b7fde5bcbb498bb6b5db4b18059e88a.js\"></script>\n","source":"_posts/azure-blob-storage-using-node.md","raw":"---\ntitle: Azure blob storage operations using Node.js\ndate: 2018-12-23 14:50:51\ndescription: \"How to perform different Azure blob storage operations using Node.js, Blob containers, Blob metadata, Blob properties\"\ntags: [Azure, Azure Blog Storage, Node JS]\ncategories: Microsoft Graph\nsummary: How to use Microsoft Graph Extensions with SPFX to provide ability for user to configure consistent UI experience across different devices.\nimg: /images/post/azure-blob-storage-using-node.jpg\ncover: true\ncoverImg: /images/postcover/postcover-3.jpg\n---\n\nThis article will provide how-to-guide to work with Azure Blob storage using Node.js\n\nCurrently Microsoft Azure Storage SDK.v2 is available as stable version. SDK.v10 is still in preview and which has more features compare to SKD.v2. [Go to Storage SDK v10 for JavaScript (In preview)](https://github.com/Azure/azure-storage-js)\nIn SDK.v2 you can find different operations for Blob, Queue , File,Table in callback style. See below.\n\n## Azure Storage SDK.v2 basic features\n\n**Blobs**\n    Create/Delete Containers\n    Create/Read/Update/Delete Blobs\n**Tables**\n    Create/Delete Tables\n    Query/Create/Read/Update/Delete Entities\n**Files**\n    Create/Delete Shares\n    Create/Delete Directories\n**Create/Read/Update/Delete Files**\n    Queues\n    Create/Delete Queues\n**Insert/Peek Queue Messages**\n    Advanced Queue Operations\n    Service Properties\n**Get Service Properties**\n    Set Service Properties\n\n## Comparison of Azure Storage SDK.v2 and SDKv.10 (In preview)\n\n\n\n| SDK Name                             \t| Version     \t| Description                                                                   \t| NPM/API Reference Links \t|\n|--------------------------------------\t|-------------\t|-------------------------------------------------------------------------------\t|-------------------------\t|\n| [storage SDK v10 for JavaScript](https://github.com/Azure/azure-storage-js)       \t| v10-Preview \t| The next generation async Storage SDK (Blob only, async and promise support)  \t| [NPM - Reference](https://www.npmjs.com/package/@azure/storage-blob)         \t|\n| [Storage SDK v2 for JavaScript](https://github.com/Azure/azure-storage-node)        \t| v2          \t| Legacy Storage SDK in this repository (Blob/Queue/File/Table, callback style) \t| [NPM - Reference](https://www.npmjs.com/package/azure-storage)         \t|\n| [Azure Management SDKs for JavaScript](https://github.com/Azure/azure-sdk-for-node) \t| v2          \t| Management SDKs including Storage Resource Provider APIs                      \t| [NPM - Reference](https://www.npmjs.com/package/azure)         \t|\n\n\t\t\n\nPlease check details on API reference documents:\n\n[Microsoft official API document on docs.microsoft.com](https://docs.microsoft.com/en-us/javascript/api/azure-storage/?view=azure-node-latest)\n[Generated API references on GitHub pages](http://azure.github.io/azure-storage-node/)\n\n\n**Prerequisites**\n\n1. First of all, you need to install Microsoft Azure Storage SDK for Node.js and JavaScript for Browsers using following npm package.\n```\n👉 npm install azure-storage --save\n```\n2. Make sure you have Azure Storage account created in Azure and copy connection string [Here is a quick guide to create Azure Storage Account](https://docs.microsoft.com/en-us/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal)\n3. Create a blob container\n4. Install dotenv package to save your Azure Storage Connection String other configurations\n```\n👉 npm install dotenv --save\n```\n\n## Some Code\n<script src=\"https://gist.github.com/ejazhussain/8b7fde5bcbb498bb6b5db4b18059e88a.js\"></script>\n","slug":"azure-blob-storage-using-node","published":1,"updated":"2020-03-15T15:16:16.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdbwg6mh0009ioetj4gawtgp","content":"<p>This article will provide how-to-guide to work with Azure Blob storage using Node.js</p>\n<p>Currently Microsoft Azure Storage SDK.v2 is available as stable version. SDK.v10 is still in preview and which has more features compare to SKD.v2. <a href=\"https://github.com/Azure/azure-storage-js\" target=\"_blank\" rel=\"noopener\">Go to Storage SDK v10 for JavaScript (In preview)</a><br>In SDK.v2 you can find different operations for Blob, Queue , File,Table in callback style. See below.</p>\n<h2 id=\"Azure-Storage-SDK-v2-basic-features\"><a href=\"#Azure-Storage-SDK-v2-basic-features\" class=\"headerlink\" title=\"Azure Storage SDK.v2 basic features\"></a>Azure Storage SDK.v2 basic features</h2><p><strong>Blobs</strong><br>    Create/Delete Containers<br>    Create/Read/Update/Delete Blobs<br><strong>Tables</strong><br>    Create/Delete Tables<br>    Query/Create/Read/Update/Delete Entities<br><strong>Files</strong><br>    Create/Delete Shares<br>    Create/Delete Directories<br><strong>Create/Read/Update/Delete Files</strong><br>    Queues<br>    Create/Delete Queues<br><strong>Insert/Peek Queue Messages</strong><br>    Advanced Queue Operations<br>    Service Properties<br><strong>Get Service Properties</strong><br>    Set Service Properties</p>\n<h2 id=\"Comparison-of-Azure-Storage-SDK-v2-and-SDKv-10-In-preview\"><a href=\"#Comparison-of-Azure-Storage-SDK-v2-and-SDKv-10-In-preview\" class=\"headerlink\" title=\"Comparison of Azure Storage SDK.v2 and SDKv.10 (In preview)\"></a>Comparison of Azure Storage SDK.v2 and SDKv.10 (In preview)</h2><table>\n<thead>\n<tr>\n<th>SDK Name</th>\n<th>Version</th>\n<th>Description</th>\n<th>NPM/API Reference Links</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://github.com/Azure/azure-storage-js\" target=\"_blank\" rel=\"noopener\">storage SDK v10 for JavaScript</a></td>\n<td>v10-Preview</td>\n<td>The next generation async Storage SDK (Blob only, async and promise support)</td>\n<td><a href=\"https://www.npmjs.com/package/@azure/storage-blob\" target=\"_blank\" rel=\"noopener\">NPM - Reference</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Azure/azure-storage-node\" target=\"_blank\" rel=\"noopener\">Storage SDK v2 for JavaScript</a></td>\n<td>v2</td>\n<td>Legacy Storage SDK in this repository (Blob/Queue/File/Table, callback style)</td>\n<td><a href=\"https://www.npmjs.com/package/azure-storage\" target=\"_blank\" rel=\"noopener\">NPM - Reference</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Azure/azure-sdk-for-node\" target=\"_blank\" rel=\"noopener\">Azure Management SDKs for JavaScript</a></td>\n<td>v2</td>\n<td>Management SDKs including Storage Resource Provider APIs</td>\n<td><a href=\"https://www.npmjs.com/package/azure\" target=\"_blank\" rel=\"noopener\">NPM - Reference</a></td>\n</tr>\n</tbody></table>\n<p>Please check details on API reference documents:</p>\n<p><a href=\"https://docs.microsoft.com/en-us/javascript/api/azure-storage/?view=azure-node-latest\" target=\"_blank\" rel=\"noopener\">Microsoft official API document on docs.microsoft.com</a><br><a href=\"http://azure.github.io/azure-storage-node/\" target=\"_blank\" rel=\"noopener\">Generated API references on GitHub pages</a></p>\n<p><strong>Prerequisites</strong></p>\n<ol>\n<li>First of all, you need to install Microsoft Azure Storage SDK for Node.js and JavaScript for Browsers using following npm package.<pre><code>👉 npm install azure-storage --save</code></pre></li>\n<li>Make sure you have Azure Storage account created in Azure and copy connection string <a href=\"https://docs.microsoft.com/en-us/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\" target=\"_blank\" rel=\"noopener\">Here is a quick guide to create Azure Storage Account</a></li>\n<li>Create a blob container</li>\n<li>Install dotenv package to save your Azure Storage Connection String other configurations<pre><code>👉 npm install dotenv --save</code></pre></li>\n</ol>\n<h2 id=\"Some-Code\"><a href=\"#Some-Code\" class=\"headerlink\" title=\"Some Code\"></a>Some Code</h2><script src=\"https://gist.github.com/ejazhussain/8b7fde5bcbb498bb6b5db4b18059e88a.js\"></script>\n","site":{"data":{}},"excerpt":"","more":"<p>This article will provide how-to-guide to work with Azure Blob storage using Node.js</p>\n<p>Currently Microsoft Azure Storage SDK.v2 is available as stable version. SDK.v10 is still in preview and which has more features compare to SKD.v2. <a href=\"https://github.com/Azure/azure-storage-js\" target=\"_blank\" rel=\"noopener\">Go to Storage SDK v10 for JavaScript (In preview)</a><br>In SDK.v2 you can find different operations for Blob, Queue , File,Table in callback style. See below.</p>\n<h2 id=\"Azure-Storage-SDK-v2-basic-features\"><a href=\"#Azure-Storage-SDK-v2-basic-features\" class=\"headerlink\" title=\"Azure Storage SDK.v2 basic features\"></a>Azure Storage SDK.v2 basic features</h2><p><strong>Blobs</strong><br>    Create/Delete Containers<br>    Create/Read/Update/Delete Blobs<br><strong>Tables</strong><br>    Create/Delete Tables<br>    Query/Create/Read/Update/Delete Entities<br><strong>Files</strong><br>    Create/Delete Shares<br>    Create/Delete Directories<br><strong>Create/Read/Update/Delete Files</strong><br>    Queues<br>    Create/Delete Queues<br><strong>Insert/Peek Queue Messages</strong><br>    Advanced Queue Operations<br>    Service Properties<br><strong>Get Service Properties</strong><br>    Set Service Properties</p>\n<h2 id=\"Comparison-of-Azure-Storage-SDK-v2-and-SDKv-10-In-preview\"><a href=\"#Comparison-of-Azure-Storage-SDK-v2-and-SDKv-10-In-preview\" class=\"headerlink\" title=\"Comparison of Azure Storage SDK.v2 and SDKv.10 (In preview)\"></a>Comparison of Azure Storage SDK.v2 and SDKv.10 (In preview)</h2><table>\n<thead>\n<tr>\n<th>SDK Name</th>\n<th>Version</th>\n<th>Description</th>\n<th>NPM/API Reference Links</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://github.com/Azure/azure-storage-js\" target=\"_blank\" rel=\"noopener\">storage SDK v10 for JavaScript</a></td>\n<td>v10-Preview</td>\n<td>The next generation async Storage SDK (Blob only, async and promise support)</td>\n<td><a href=\"https://www.npmjs.com/package/@azure/storage-blob\" target=\"_blank\" rel=\"noopener\">NPM - Reference</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Azure/azure-storage-node\" target=\"_blank\" rel=\"noopener\">Storage SDK v2 for JavaScript</a></td>\n<td>v2</td>\n<td>Legacy Storage SDK in this repository (Blob/Queue/File/Table, callback style)</td>\n<td><a href=\"https://www.npmjs.com/package/azure-storage\" target=\"_blank\" rel=\"noopener\">NPM - Reference</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Azure/azure-sdk-for-node\" target=\"_blank\" rel=\"noopener\">Azure Management SDKs for JavaScript</a></td>\n<td>v2</td>\n<td>Management SDKs including Storage Resource Provider APIs</td>\n<td><a href=\"https://www.npmjs.com/package/azure\" target=\"_blank\" rel=\"noopener\">NPM - Reference</a></td>\n</tr>\n</tbody></table>\n<p>Please check details on API reference documents:</p>\n<p><a href=\"https://docs.microsoft.com/en-us/javascript/api/azure-storage/?view=azure-node-latest\" target=\"_blank\" rel=\"noopener\">Microsoft official API document on docs.microsoft.com</a><br><a href=\"http://azure.github.io/azure-storage-node/\" target=\"_blank\" rel=\"noopener\">Generated API references on GitHub pages</a></p>\n<p><strong>Prerequisites</strong></p>\n<ol>\n<li>First of all, you need to install Microsoft Azure Storage SDK for Node.js and JavaScript for Browsers using following npm package.<pre><code>👉 npm install azure-storage --save</code></pre></li>\n<li>Make sure you have Azure Storage account created in Azure and copy connection string <a href=\"https://docs.microsoft.com/en-us/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal\" target=\"_blank\" rel=\"noopener\">Here is a quick guide to create Azure Storage Account</a></li>\n<li>Create a blob container</li>\n<li>Install dotenv package to save your Azure Storage Connection String other configurations<pre><code>👉 npm install dotenv --save</code></pre></li>\n</ol>\n<h2 id=\"Some-Code\"><a href=\"#Some-Code\" class=\"headerlink\" title=\"Some Code\"></a>Some Code</h2><script src=\"https://gist.github.com/ejazhussain/8b7fde5bcbb498bb6b5db4b18059e88a.js\"></script>\n"},{"layout":"post","title":"Access Microsoft Graph API using SFPX with Secured Azure Function","date":"2020-04-10T21:31:12.000Z","language":"English","description":"This post detail about calling a secured Azure Function from SharePoint Framework (SPFx) to retrieve a list of users using Microsoft Graph API.","summary":"This post detail about calling a secured Azure Function from SharePoint Framework (SPFx) to retrieve a list of users using Microsoft Graph API.","img":"/images/post/access-graph-api-using-spfx-with-azurefunction.png","cover":true,"coverImg":"/images/postcover/postcover-3.jpg","_content":"\n\n## Scenario\n\nAs we know, SPFx runs in the context of logged In user. In a scenario where your application needs to perform some tasks which require more permissions then currently logged In user, you can use this approach to handle those scenarios.\nFor example, You can configure Azure AD app with elevated Microsoft Graph API permissions and then call Microsoft Graph API from Azure Function.\n\n\n**Here are high-level steps**\n\n+ Create a self-signed certificate\n+ Create an Azure AD app and add required Microsoft Graph API permissions\n+ Create and Configure Azure Key Vault\n+ Create an Azure Function\n+ Calling an Azure Function from SPFx\n\n## Create a Self-Signed Certificate\n\nThere is a PnP PowerShell command [New-PnPAzureCertificate](https://docs.microsoft.com/en-us/powershell/module/sharepoint-pnp/new-pnpazurecertificate?view=sharepoint-ps) which can be used to Generate a new 2048bit self-signed certificate and manifest settings for use in Azure AD App.\n\n👉 Here is a script which can generate a self-signed certificate and manifest settings.\n\n<script src=\"https://gist.github.com/ejazhussain/614649540941600fa1e8650ecb093825.js\"></script>\n\nWhen you run the above script, Following certificate files will be generated. \n\n+ GraphAPISPFx.pfx\n+ GraphAPISPFx.cer\n\n## Create and Configure Azure AD App\n\n1.  Create an Azure AD App\n2.  Under **API Permissions**, Add application permissions for Microsoft Graph API and give admin consent.\n\n![](graph-api-permissions.png)\n\n3.  Under **Expose an API**, Add user_impersonation scope.\n\n![](add-api-scope.png)\n\n4. Under **Certificates & secrets**, Upload the certificate ***AccessGraphAPISPFx.cer*** file created in previous step. \n\n5. Once you uploaded the above certificate and added a new user_impersonation scope, App manifest file will automatically be updated in the background. See below ***KeyCredentials*** and ***user_impersonation*** sections\n![](app-manifest.png)\n\n\n## Create and Configure Azure Key Vault\n\nWe are going to use Azure Key Vault to save our certificate so that we can retrieve this from Azure Function to get authentication provider for calling Microsoft Graph API.\n\n1. Create an Azure Key Vault\n2. Import your certificate in an azure key vault\n\n![](keyvault.png)\n3. The last step is to add access policy for following Azure Function and give appropriate permissions (Get and List permission should be sufficient) to retrieve secrets. This step should perform after you have created an Azure function and enable Managed Service Identity.\n\n![](azure-function-accesspolicy.png)\n\n## Create an Azure Function\n\nCreate an Azure Function which is going to retrieve a list of users using Microsoft Graph API. Technically at this stage, you can call any Microsoft Graph API endpoints as long as you have appropriate permissions granted in Azure Ad App. But for simplicity, I am going to just retrieve all users in my organization.\n\nHere are list tasks we are going to perform in Azure Function\n\n1. Create an Azure Function\n2. Retrieve certificate from Azure Key Vault via [Managed Service Identity](https://docs.microsoft.com/bs-latn-ba/azure/key-vault/managed-identity)\n3. We are going to use Microsoft Authentication Library (MSAL) client credential authentication provider using a certificate. There are two different ways to get an authentication provider using Microsoft Authentication Library (MSAL). \n\n   1. using ***Microsoft.Identity.Client***  OR\n   2. using ***Microsoft.Graph.Auth***. [Microsoft Graph Auth library](https://github.com/microsoftgraph/msgraph-sdk-dotnet-auth) provides a wrapper for Microsoft Authentication Library (MSAL). We are going to use this approach here.\n4. Here is code which retrieves the certificate from an Azure key vault and then gets Authentication Provider to call Microsoft Graph API\n\n<script src=\"https://gist.github.com/ejazhussain/243cfbad05d9106b2275b37d98d2e184.js\"></script>\n\n5. Retrieve certificate from Azure Vault \n\n<script src=\"https://gist.github.com/ejazhussain/564efae19e226db87008da9ebbf89cfc.js\"></script>\n\n6. Get client credential authentication provider based on the certificate using ***Microsoft.Graph.Auth***\n\n<script src=\"https://gist.github.com/ejazhussain/376b0e8c15730c285bff2c33e33bc671.js\"></script>\n\n7. Make sure you have to enable Managed Service Identity for your azure function and added appropriate access policy in Azure Vault as described above\n\n## Calling an Azure Function from SPFx\n\nAt this point, your Azure Function should be secured by Azure AD and ready to be called from SPFx web part.\n\n1. Add the following permissions requests in your package-solution.json\n\n![](SPFx-webapi-permissions.png)\n\n2. Approve above permission from SharePoint Admin Web Api Permission Management page\n\n3. Here is how you can get AADHttpClient using SPFx and call Microsoft Graph Api\n<script src=\"https://gist.github.com/ejazhussain/9dc78e14e5500334d0dcb54e77a93b04.js\"></script>\n\n  \n\n  \n\n\n\n\n","source":"_posts/access-graphapi-using-spfx-with-securedazurefunction.md","raw":"---\nlayout: post\ntitle: Access Microsoft Graph API using SFPX with Secured Azure Function\ndate: 2020-04-10 22:31:12\nlanguage: English\ntags:\n  - Azure Function\n  - Authentication\n  - SPFx    \ndescription: This post detail about calling a secured Azure Function from SharePoint Framework (SPFx) to retrieve a list of users using Microsoft Graph API.\ncategories: SharePoint Framework \nsummary: This post detail about calling a secured Azure Function from SharePoint Framework (SPFx) to retrieve a list of users using Microsoft Graph API.\nimg: /images/post/access-graph-api-using-spfx-with-azurefunction.png\ncover: true\ncoverImg: /images/postcover/postcover-3.jpg\n---\n\n\n## Scenario\n\nAs we know, SPFx runs in the context of logged In user. In a scenario where your application needs to perform some tasks which require more permissions then currently logged In user, you can use this approach to handle those scenarios.\nFor example, You can configure Azure AD app with elevated Microsoft Graph API permissions and then call Microsoft Graph API from Azure Function.\n\n\n**Here are high-level steps**\n\n+ Create a self-signed certificate\n+ Create an Azure AD app and add required Microsoft Graph API permissions\n+ Create and Configure Azure Key Vault\n+ Create an Azure Function\n+ Calling an Azure Function from SPFx\n\n## Create a Self-Signed Certificate\n\nThere is a PnP PowerShell command [New-PnPAzureCertificate](https://docs.microsoft.com/en-us/powershell/module/sharepoint-pnp/new-pnpazurecertificate?view=sharepoint-ps) which can be used to Generate a new 2048bit self-signed certificate and manifest settings for use in Azure AD App.\n\n👉 Here is a script which can generate a self-signed certificate and manifest settings.\n\n<script src=\"https://gist.github.com/ejazhussain/614649540941600fa1e8650ecb093825.js\"></script>\n\nWhen you run the above script, Following certificate files will be generated. \n\n+ GraphAPISPFx.pfx\n+ GraphAPISPFx.cer\n\n## Create and Configure Azure AD App\n\n1.  Create an Azure AD App\n2.  Under **API Permissions**, Add application permissions for Microsoft Graph API and give admin consent.\n\n![](graph-api-permissions.png)\n\n3.  Under **Expose an API**, Add user_impersonation scope.\n\n![](add-api-scope.png)\n\n4. Under **Certificates & secrets**, Upload the certificate ***AccessGraphAPISPFx.cer*** file created in previous step. \n\n5. Once you uploaded the above certificate and added a new user_impersonation scope, App manifest file will automatically be updated in the background. See below ***KeyCredentials*** and ***user_impersonation*** sections\n![](app-manifest.png)\n\n\n## Create and Configure Azure Key Vault\n\nWe are going to use Azure Key Vault to save our certificate so that we can retrieve this from Azure Function to get authentication provider for calling Microsoft Graph API.\n\n1. Create an Azure Key Vault\n2. Import your certificate in an azure key vault\n\n![](keyvault.png)\n3. The last step is to add access policy for following Azure Function and give appropriate permissions (Get and List permission should be sufficient) to retrieve secrets. This step should perform after you have created an Azure function and enable Managed Service Identity.\n\n![](azure-function-accesspolicy.png)\n\n## Create an Azure Function\n\nCreate an Azure Function which is going to retrieve a list of users using Microsoft Graph API. Technically at this stage, you can call any Microsoft Graph API endpoints as long as you have appropriate permissions granted in Azure Ad App. But for simplicity, I am going to just retrieve all users in my organization.\n\nHere are list tasks we are going to perform in Azure Function\n\n1. Create an Azure Function\n2. Retrieve certificate from Azure Key Vault via [Managed Service Identity](https://docs.microsoft.com/bs-latn-ba/azure/key-vault/managed-identity)\n3. We are going to use Microsoft Authentication Library (MSAL) client credential authentication provider using a certificate. There are two different ways to get an authentication provider using Microsoft Authentication Library (MSAL). \n\n   1. using ***Microsoft.Identity.Client***  OR\n   2. using ***Microsoft.Graph.Auth***. [Microsoft Graph Auth library](https://github.com/microsoftgraph/msgraph-sdk-dotnet-auth) provides a wrapper for Microsoft Authentication Library (MSAL). We are going to use this approach here.\n4. Here is code which retrieves the certificate from an Azure key vault and then gets Authentication Provider to call Microsoft Graph API\n\n<script src=\"https://gist.github.com/ejazhussain/243cfbad05d9106b2275b37d98d2e184.js\"></script>\n\n5. Retrieve certificate from Azure Vault \n\n<script src=\"https://gist.github.com/ejazhussain/564efae19e226db87008da9ebbf89cfc.js\"></script>\n\n6. Get client credential authentication provider based on the certificate using ***Microsoft.Graph.Auth***\n\n<script src=\"https://gist.github.com/ejazhussain/376b0e8c15730c285bff2c33e33bc671.js\"></script>\n\n7. Make sure you have to enable Managed Service Identity for your azure function and added appropriate access policy in Azure Vault as described above\n\n## Calling an Azure Function from SPFx\n\nAt this point, your Azure Function should be secured by Azure AD and ready to be called from SPFx web part.\n\n1. Add the following permissions requests in your package-solution.json\n\n![](SPFx-webapi-permissions.png)\n\n2. Approve above permission from SharePoint Admin Web Api Permission Management page\n\n3. Here is how you can get AADHttpClient using SPFx and call Microsoft Graph Api\n<script src=\"https://gist.github.com/ejazhussain/9dc78e14e5500334d0dcb54e77a93b04.js\"></script>\n\n  \n\n  \n\n\n\n\n","slug":"access-graphapi-using-spfx-with-securedazurefunction","published":1,"updated":"2020-04-10T21:22:40.808Z","comments":1,"photos":[],"link":"","_id":"ckdbwg6mj000cioetiv8g5aju","content":"<h2 id=\"Scenario\"><a href=\"#Scenario\" class=\"headerlink\" title=\"Scenario\"></a>Scenario</h2><p>As we know, SPFx runs in the context of logged In user. In a scenario where your application needs to perform some tasks which require more permissions then currently logged In user, you can use this approach to handle those scenarios.<br>For example, You can configure Azure AD app with elevated Microsoft Graph API permissions and then call Microsoft Graph API from Azure Function.</p>\n<p><strong>Here are high-level steps</strong></p>\n<ul>\n<li>Create a self-signed certificate</li>\n<li>Create an Azure AD app and add required Microsoft Graph API permissions</li>\n<li>Create and Configure Azure Key Vault</li>\n<li>Create an Azure Function</li>\n<li>Calling an Azure Function from SPFx</li>\n</ul>\n<h2 id=\"Create-a-Self-Signed-Certificate\"><a href=\"#Create-a-Self-Signed-Certificate\" class=\"headerlink\" title=\"Create a Self-Signed Certificate\"></a>Create a Self-Signed Certificate</h2><p>There is a PnP PowerShell command <a href=\"https://docs.microsoft.com/en-us/powershell/module/sharepoint-pnp/new-pnpazurecertificate?view=sharepoint-ps\" target=\"_blank\" rel=\"noopener\">New-PnPAzureCertificate</a> which can be used to Generate a new 2048bit self-signed certificate and manifest settings for use in Azure AD App.</p>\n<p>👉 Here is a script which can generate a self-signed certificate and manifest settings.</p>\n<script src=\"https://gist.github.com/ejazhussain/614649540941600fa1e8650ecb093825.js\"></script>\n\n<p>When you run the above script, Following certificate files will be generated. </p>\n<ul>\n<li>GraphAPISPFx.pfx</li>\n<li>GraphAPISPFx.cer</li>\n</ul>\n<h2 id=\"Create-and-Configure-Azure-AD-App\"><a href=\"#Create-and-Configure-Azure-AD-App\" class=\"headerlink\" title=\"Create and Configure Azure AD App\"></a>Create and Configure Azure AD App</h2><ol>\n<li>Create an Azure AD App</li>\n<li>Under <strong>API Permissions</strong>, Add application permissions for Microsoft Graph API and give admin consent.</li>\n</ol>\n<p><img src=\"graph-api-permissions.png\" alt></p>\n<ol start=\"3\">\n<li>Under <strong>Expose an API</strong>, Add user_impersonation scope.</li>\n</ol>\n<p><img src=\"add-api-scope.png\" alt></p>\n<ol start=\"4\">\n<li><p>Under <strong>Certificates &amp; secrets</strong>, Upload the certificate <strong><em>AccessGraphAPISPFx.cer</em></strong> file created in previous step. </p>\n</li>\n<li><p>Once you uploaded the above certificate and added a new user_impersonation scope, App manifest file will automatically be updated in the background. See below <strong><em>KeyCredentials</em></strong> and <strong><em>user_impersonation</em></strong> sections<br><img src=\"app-manifest.png\" alt></p>\n</li>\n</ol>\n<h2 id=\"Create-and-Configure-Azure-Key-Vault\"><a href=\"#Create-and-Configure-Azure-Key-Vault\" class=\"headerlink\" title=\"Create and Configure Azure Key Vault\"></a>Create and Configure Azure Key Vault</h2><p>We are going to use Azure Key Vault to save our certificate so that we can retrieve this from Azure Function to get authentication provider for calling Microsoft Graph API.</p>\n<ol>\n<li>Create an Azure Key Vault</li>\n<li>Import your certificate in an azure key vault</li>\n</ol>\n<p><img src=\"keyvault.png\" alt><br>3. The last step is to add access policy for following Azure Function and give appropriate permissions (Get and List permission should be sufficient) to retrieve secrets. This step should perform after you have created an Azure function and enable Managed Service Identity.</p>\n<p><img src=\"azure-function-accesspolicy.png\" alt></p>\n<h2 id=\"Create-an-Azure-Function\"><a href=\"#Create-an-Azure-Function\" class=\"headerlink\" title=\"Create an Azure Function\"></a>Create an Azure Function</h2><p>Create an Azure Function which is going to retrieve a list of users using Microsoft Graph API. Technically at this stage, you can call any Microsoft Graph API endpoints as long as you have appropriate permissions granted in Azure Ad App. But for simplicity, I am going to just retrieve all users in my organization.</p>\n<p>Here are list tasks we are going to perform in Azure Function</p>\n<ol>\n<li><p>Create an Azure Function</p>\n</li>\n<li><p>Retrieve certificate from Azure Key Vault via <a href=\"https://docs.microsoft.com/bs-latn-ba/azure/key-vault/managed-identity\" target=\"_blank\" rel=\"noopener\">Managed Service Identity</a></p>\n</li>\n<li><p>We are going to use Microsoft Authentication Library (MSAL) client credential authentication provider using a certificate. There are two different ways to get an authentication provider using Microsoft Authentication Library (MSAL). </p>\n<ol>\n<li>using <strong><em>Microsoft.Identity.Client</em></strong>  OR</li>\n<li>using <strong><em>Microsoft.Graph.Auth</em></strong>. <a href=\"https://github.com/microsoftgraph/msgraph-sdk-dotnet-auth\" target=\"_blank\" rel=\"noopener\">Microsoft Graph Auth library</a> provides a wrapper for Microsoft Authentication Library (MSAL). We are going to use this approach here.</li>\n</ol>\n</li>\n<li><p>Here is code which retrieves the certificate from an Azure key vault and then gets Authentication Provider to call Microsoft Graph API</p>\n</li>\n</ol>\n<script src=\"https://gist.github.com/ejazhussain/243cfbad05d9106b2275b37d98d2e184.js\"></script>\n\n<ol start=\"5\">\n<li>Retrieve certificate from Azure Vault </li>\n</ol>\n<script src=\"https://gist.github.com/ejazhussain/564efae19e226db87008da9ebbf89cfc.js\"></script>\n\n<ol start=\"6\">\n<li>Get client credential authentication provider based on the certificate using <strong><em>Microsoft.Graph.Auth</em></strong></li>\n</ol>\n<script src=\"https://gist.github.com/ejazhussain/376b0e8c15730c285bff2c33e33bc671.js\"></script>\n\n<ol start=\"7\">\n<li>Make sure you have to enable Managed Service Identity for your azure function and added appropriate access policy in Azure Vault as described above</li>\n</ol>\n<h2 id=\"Calling-an-Azure-Function-from-SPFx\"><a href=\"#Calling-an-Azure-Function-from-SPFx\" class=\"headerlink\" title=\"Calling an Azure Function from SPFx\"></a>Calling an Azure Function from SPFx</h2><p>At this point, your Azure Function should be secured by Azure AD and ready to be called from SPFx web part.</p>\n<ol>\n<li>Add the following permissions requests in your package-solution.json</li>\n</ol>\n<p><img src=\"SPFx-webapi-permissions.png\" alt></p>\n<ol start=\"2\">\n<li><p>Approve above permission from SharePoint Admin Web Api Permission Management page</p>\n</li>\n<li><p>Here is how you can get AADHttpClient using SPFx and call Microsoft Graph Api</p>\n<script src=\"https://gist.github.com/ejazhussain/9dc78e14e5500334d0dcb54e77a93b04.js\"></script>\n\n\n\n\n\n\n\n\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Scenario\"><a href=\"#Scenario\" class=\"headerlink\" title=\"Scenario\"></a>Scenario</h2><p>As we know, SPFx runs in the context of logged In user. In a scenario where your application needs to perform some tasks which require more permissions then currently logged In user, you can use this approach to handle those scenarios.<br>For example, You can configure Azure AD app with elevated Microsoft Graph API permissions and then call Microsoft Graph API from Azure Function.</p>\n<p><strong>Here are high-level steps</strong></p>\n<ul>\n<li>Create a self-signed certificate</li>\n<li>Create an Azure AD app and add required Microsoft Graph API permissions</li>\n<li>Create and Configure Azure Key Vault</li>\n<li>Create an Azure Function</li>\n<li>Calling an Azure Function from SPFx</li>\n</ul>\n<h2 id=\"Create-a-Self-Signed-Certificate\"><a href=\"#Create-a-Self-Signed-Certificate\" class=\"headerlink\" title=\"Create a Self-Signed Certificate\"></a>Create a Self-Signed Certificate</h2><p>There is a PnP PowerShell command <a href=\"https://docs.microsoft.com/en-us/powershell/module/sharepoint-pnp/new-pnpazurecertificate?view=sharepoint-ps\" target=\"_blank\" rel=\"noopener\">New-PnPAzureCertificate</a> which can be used to Generate a new 2048bit self-signed certificate and manifest settings for use in Azure AD App.</p>\n<p>👉 Here is a script which can generate a self-signed certificate and manifest settings.</p>\n<script src=\"https://gist.github.com/ejazhussain/614649540941600fa1e8650ecb093825.js\"></script>\n\n<p>When you run the above script, Following certificate files will be generated. </p>\n<ul>\n<li>GraphAPISPFx.pfx</li>\n<li>GraphAPISPFx.cer</li>\n</ul>\n<h2 id=\"Create-and-Configure-Azure-AD-App\"><a href=\"#Create-and-Configure-Azure-AD-App\" class=\"headerlink\" title=\"Create and Configure Azure AD App\"></a>Create and Configure Azure AD App</h2><ol>\n<li>Create an Azure AD App</li>\n<li>Under <strong>API Permissions</strong>, Add application permissions for Microsoft Graph API and give admin consent.</li>\n</ol>\n<p><img src=\"graph-api-permissions.png\" alt></p>\n<ol start=\"3\">\n<li>Under <strong>Expose an API</strong>, Add user_impersonation scope.</li>\n</ol>\n<p><img src=\"add-api-scope.png\" alt></p>\n<ol start=\"4\">\n<li><p>Under <strong>Certificates &amp; secrets</strong>, Upload the certificate <strong><em>AccessGraphAPISPFx.cer</em></strong> file created in previous step. </p>\n</li>\n<li><p>Once you uploaded the above certificate and added a new user_impersonation scope, App manifest file will automatically be updated in the background. See below <strong><em>KeyCredentials</em></strong> and <strong><em>user_impersonation</em></strong> sections<br><img src=\"app-manifest.png\" alt></p>\n</li>\n</ol>\n<h2 id=\"Create-and-Configure-Azure-Key-Vault\"><a href=\"#Create-and-Configure-Azure-Key-Vault\" class=\"headerlink\" title=\"Create and Configure Azure Key Vault\"></a>Create and Configure Azure Key Vault</h2><p>We are going to use Azure Key Vault to save our certificate so that we can retrieve this from Azure Function to get authentication provider for calling Microsoft Graph API.</p>\n<ol>\n<li>Create an Azure Key Vault</li>\n<li>Import your certificate in an azure key vault</li>\n</ol>\n<p><img src=\"keyvault.png\" alt><br>3. The last step is to add access policy for following Azure Function and give appropriate permissions (Get and List permission should be sufficient) to retrieve secrets. This step should perform after you have created an Azure function and enable Managed Service Identity.</p>\n<p><img src=\"azure-function-accesspolicy.png\" alt></p>\n<h2 id=\"Create-an-Azure-Function\"><a href=\"#Create-an-Azure-Function\" class=\"headerlink\" title=\"Create an Azure Function\"></a>Create an Azure Function</h2><p>Create an Azure Function which is going to retrieve a list of users using Microsoft Graph API. Technically at this stage, you can call any Microsoft Graph API endpoints as long as you have appropriate permissions granted in Azure Ad App. But for simplicity, I am going to just retrieve all users in my organization.</p>\n<p>Here are list tasks we are going to perform in Azure Function</p>\n<ol>\n<li><p>Create an Azure Function</p>\n</li>\n<li><p>Retrieve certificate from Azure Key Vault via <a href=\"https://docs.microsoft.com/bs-latn-ba/azure/key-vault/managed-identity\" target=\"_blank\" rel=\"noopener\">Managed Service Identity</a></p>\n</li>\n<li><p>We are going to use Microsoft Authentication Library (MSAL) client credential authentication provider using a certificate. There are two different ways to get an authentication provider using Microsoft Authentication Library (MSAL). </p>\n<ol>\n<li>using <strong><em>Microsoft.Identity.Client</em></strong>  OR</li>\n<li>using <strong><em>Microsoft.Graph.Auth</em></strong>. <a href=\"https://github.com/microsoftgraph/msgraph-sdk-dotnet-auth\" target=\"_blank\" rel=\"noopener\">Microsoft Graph Auth library</a> provides a wrapper for Microsoft Authentication Library (MSAL). We are going to use this approach here.</li>\n</ol>\n</li>\n<li><p>Here is code which retrieves the certificate from an Azure key vault and then gets Authentication Provider to call Microsoft Graph API</p>\n</li>\n</ol>\n<script src=\"https://gist.github.com/ejazhussain/243cfbad05d9106b2275b37d98d2e184.js\"></script>\n\n<ol start=\"5\">\n<li>Retrieve certificate from Azure Vault </li>\n</ol>\n<script src=\"https://gist.github.com/ejazhussain/564efae19e226db87008da9ebbf89cfc.js\"></script>\n\n<ol start=\"6\">\n<li>Get client credential authentication provider based on the certificate using <strong><em>Microsoft.Graph.Auth</em></strong></li>\n</ol>\n<script src=\"https://gist.github.com/ejazhussain/376b0e8c15730c285bff2c33e33bc671.js\"></script>\n\n<ol start=\"7\">\n<li>Make sure you have to enable Managed Service Identity for your azure function and added appropriate access policy in Azure Vault as described above</li>\n</ol>\n<h2 id=\"Calling-an-Azure-Function-from-SPFx\"><a href=\"#Calling-an-Azure-Function-from-SPFx\" class=\"headerlink\" title=\"Calling an Azure Function from SPFx\"></a>Calling an Azure Function from SPFx</h2><p>At this point, your Azure Function should be secured by Azure AD and ready to be called from SPFx web part.</p>\n<ol>\n<li>Add the following permissions requests in your package-solution.json</li>\n</ol>\n<p><img src=\"SPFx-webapi-permissions.png\" alt></p>\n<ol start=\"2\">\n<li><p>Approve above permission from SharePoint Admin Web Api Permission Management page</p>\n</li>\n<li><p>Here is how you can get AADHttpClient using SPFx and call Microsoft Graph Api</p>\n<script src=\"https://gist.github.com/ejazhussain/9dc78e14e5500334d0dcb54e77a93b04.js\"></script>\n\n\n\n\n\n\n\n\n</li>\n</ol>\n"},{"layout":"post","title":"How to useContext and useReducer in SharePoint Framework (SPFx)","date":"2020-06-17T16:55:54.000Z","language":"English","description":"This post describes how to make use of React hooks useContext and useReducer in SharePoint Framework.","summary":"This post describes how to make use of React hooks useContext and useReducer in SharePoint Framework..","img":"/images/post/react-hooks.jpg","cover":true,"coverImg":"/images/post/react-hooks.jpg","_content":"\nReact hooks are here for a while now, I was not getting a chance to explore React hooks in more detail especially in the context of SPFx.\n\nHere are some very useful articles to read about the usage of React hooks in SPFx. \n\n1. [Using React hooks to globally share service scope between components](https://www.vrdmn.com/2020/02/spfx-using-react-hooks-to-globally.html) (by Vardhaman Deshpande)\n2. [Using React hooks with service scope](https://github.com/garrytrinder/spfx-servicescopes-hooks) (by Garry Trinder)\n3. [React Reusable Custom Hooks in SPFx](https://rabiawilliams.com/spfx/reusable-custom-hooks/) (by Rabia William)\n\n## Summary\nThis is a simple web part which shows how to make use of **useContext** and **useReducer** hooks to retrieves contacts from the contact list and also updates a contact in the list using Fluent \nUI panel control. \n\nThe main idea is to manage your app state globally using useReducer  and access through useContext in your child components without passing through as component props\n\n![React hooks useReducer and useContext in SPFx](react-hooks-listitems-output.png)\n\n\n## Implementation\n\n### Create an app context\n\nFirst of all we need to create a global App context. \n\n<script src=\"https://gist.github.com/ejazhussain/ac5849f4311b0ce833ad52f5f435fb15.js\"></script>\n\n\n### Create reducer\n\nFor simplicity, we are going to create a simple reducer with two actions\n\n1. GET_ALLITEMS\n2. SET_SELECTEDITEM\n\n<script src=\"https://gist.github.com/ejazhussain/8d792e65ba01aff5b56daf1e2b0482e7.js\"></script>\n\n\n### Root component\n\nIn our root component, first of all, we need to initialize our initial state and then pass this initial state to useReducer hook. The reducer will return an object containing state and dispatch.\n\nThe state will be our app state and dispatch method will be used to perform any action within our reducer.\n\nHere we will also create our provider using our App Context created earlier (**ListItemsContext**). so that we can access our state and another service context globally.\n\n<script src=\"https://gist.github.com/ejazhussain/22418519cc4831d89bf3bd94df83fc74.js\"></script>\n\n### ListItems component\n\nThis is how we are going to reterive latest state from reducer using **useContext** hook\n>👉 const { state, dispatch } = useContext(ListItemsContext);\n\n<script src=\"https://gist.github.com/ejazhussain/3b415847ef0bcf534426b96aae91486b.js\"></script>\n\n\nThis way, we can use the React useContext and useReducer hooks to globally share app state and other services context.\n\nHopefully, you have found this post helpful! All code is added in the GitHub repo here: https://github.com/ejazhussain/react-hooks-listitems","source":"_posts/how-to-usecontext-with-usereducer-in-spfx.md","raw":"---\nlayout: post\ntitle: How to useContext and useReducer in SharePoint Framework (SPFx)\ndate: 2020-06-17 17:55:54\nlanguage: English\ntags:\n  - React Hooks\n  - SPFx    \ndescription: This post describes how to make use of React hooks useContext and useReducer in SharePoint Framework.\ncategories: SharePoint Framework \nsummary: This post describes how to make use of React hooks useContext and useReducer in SharePoint Framework..\nimg: /images/post/react-hooks.jpg\ncover: true\ncoverImg: /images/post/react-hooks.jpg\n---\n\nReact hooks are here for a while now, I was not getting a chance to explore React hooks in more detail especially in the context of SPFx.\n\nHere are some very useful articles to read about the usage of React hooks in SPFx. \n\n1. [Using React hooks to globally share service scope between components](https://www.vrdmn.com/2020/02/spfx-using-react-hooks-to-globally.html) (by Vardhaman Deshpande)\n2. [Using React hooks with service scope](https://github.com/garrytrinder/spfx-servicescopes-hooks) (by Garry Trinder)\n3. [React Reusable Custom Hooks in SPFx](https://rabiawilliams.com/spfx/reusable-custom-hooks/) (by Rabia William)\n\n## Summary\nThis is a simple web part which shows how to make use of **useContext** and **useReducer** hooks to retrieves contacts from the contact list and also updates a contact in the list using Fluent \nUI panel control. \n\nThe main idea is to manage your app state globally using useReducer  and access through useContext in your child components without passing through as component props\n\n![React hooks useReducer and useContext in SPFx](react-hooks-listitems-output.png)\n\n\n## Implementation\n\n### Create an app context\n\nFirst of all we need to create a global App context. \n\n<script src=\"https://gist.github.com/ejazhussain/ac5849f4311b0ce833ad52f5f435fb15.js\"></script>\n\n\n### Create reducer\n\nFor simplicity, we are going to create a simple reducer with two actions\n\n1. GET_ALLITEMS\n2. SET_SELECTEDITEM\n\n<script src=\"https://gist.github.com/ejazhussain/8d792e65ba01aff5b56daf1e2b0482e7.js\"></script>\n\n\n### Root component\n\nIn our root component, first of all, we need to initialize our initial state and then pass this initial state to useReducer hook. The reducer will return an object containing state and dispatch.\n\nThe state will be our app state and dispatch method will be used to perform any action within our reducer.\n\nHere we will also create our provider using our App Context created earlier (**ListItemsContext**). so that we can access our state and another service context globally.\n\n<script src=\"https://gist.github.com/ejazhussain/22418519cc4831d89bf3bd94df83fc74.js\"></script>\n\n### ListItems component\n\nThis is how we are going to reterive latest state from reducer using **useContext** hook\n>👉 const { state, dispatch } = useContext(ListItemsContext);\n\n<script src=\"https://gist.github.com/ejazhussain/3b415847ef0bcf534426b96aae91486b.js\"></script>\n\n\nThis way, we can use the React useContext and useReducer hooks to globally share app state and other services context.\n\nHopefully, you have found this post helpful! All code is added in the GitHub repo here: https://github.com/ejazhussain/react-hooks-listitems","slug":"how-to-usecontext-with-usereducer-in-spfx","published":1,"updated":"2020-06-18T10:50:12.756Z","comments":1,"photos":[],"link":"","_id":"ckdbwg6mk000dioet63x3gnl3","content":"<p>React hooks are here for a while now, I was not getting a chance to explore React hooks in more detail especially in the context of SPFx.</p>\n<p>Here are some very useful articles to read about the usage of React hooks in SPFx. </p>\n<ol>\n<li><a href=\"https://www.vrdmn.com/2020/02/spfx-using-react-hooks-to-globally.html\" target=\"_blank\" rel=\"noopener\">Using React hooks to globally share service scope between components</a> (by Vardhaman Deshpande)</li>\n<li><a href=\"https://github.com/garrytrinder/spfx-servicescopes-hooks\" target=\"_blank\" rel=\"noopener\">Using React hooks with service scope</a> (by Garry Trinder)</li>\n<li><a href=\"https://rabiawilliams.com/spfx/reusable-custom-hooks/\" target=\"_blank\" rel=\"noopener\">React Reusable Custom Hooks in SPFx</a> (by Rabia William)</li>\n</ol>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>This is a simple web part which shows how to make use of <strong>useContext</strong> and <strong>useReducer</strong> hooks to retrieves contacts from the contact list and also updates a contact in the list using Fluent<br>UI panel control. </p>\n<p>The main idea is to manage your app state globally using useReducer  and access through useContext in your child components without passing through as component props</p>\n<p><img src=\"react-hooks-listitems-output.png\" alt=\"React hooks useReducer and useContext in SPFx\"><span class=\"image-caption\">React hooks useReducer and useContext in SPFx</span></p>\n<h2 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h2><h3 id=\"Create-an-app-context\"><a href=\"#Create-an-app-context\" class=\"headerlink\" title=\"Create an app context\"></a>Create an app context</h3><p>First of all we need to create a global App context. </p>\n<script src=\"https://gist.github.com/ejazhussain/ac5849f4311b0ce833ad52f5f435fb15.js\"></script>\n\n\n<h3 id=\"Create-reducer\"><a href=\"#Create-reducer\" class=\"headerlink\" title=\"Create reducer\"></a>Create reducer</h3><p>For simplicity, we are going to create a simple reducer with two actions</p>\n<ol>\n<li>GET_ALLITEMS</li>\n<li>SET_SELECTEDITEM</li>\n</ol>\n<script src=\"https://gist.github.com/ejazhussain/8d792e65ba01aff5b56daf1e2b0482e7.js\"></script>\n\n\n<h3 id=\"Root-component\"><a href=\"#Root-component\" class=\"headerlink\" title=\"Root component\"></a>Root component</h3><p>In our root component, first of all, we need to initialize our initial state and then pass this initial state to useReducer hook. The reducer will return an object containing state and dispatch.</p>\n<p>The state will be our app state and dispatch method will be used to perform any action within our reducer.</p>\n<p>Here we will also create our provider using our App Context created earlier (<strong>ListItemsContext</strong>). so that we can access our state and another service context globally.</p>\n<script src=\"https://gist.github.com/ejazhussain/22418519cc4831d89bf3bd94df83fc74.js\"></script>\n\n<h3 id=\"ListItems-component\"><a href=\"#ListItems-component\" class=\"headerlink\" title=\"ListItems component\"></a>ListItems component</h3><p>This is how we are going to reterive latest state from reducer using <strong>useContext</strong> hook</p>\n<blockquote>\n<p>👉 const { state, dispatch } = useContext(ListItemsContext);</p>\n</blockquote>\n<script src=\"https://gist.github.com/ejazhussain/3b415847ef0bcf534426b96aae91486b.js\"></script>\n\n\n<p>This way, we can use the React useContext and useReducer hooks to globally share app state and other services context.</p>\n<p>Hopefully, you have found this post helpful! All code is added in the GitHub repo here: <a href=\"https://github.com/ejazhussain/react-hooks-listitems\" target=\"_blank\" rel=\"noopener\">https://github.com/ejazhussain/react-hooks-listitems</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>React hooks are here for a while now, I was not getting a chance to explore React hooks in more detail especially in the context of SPFx.</p>\n<p>Here are some very useful articles to read about the usage of React hooks in SPFx. </p>\n<ol>\n<li><a href=\"https://www.vrdmn.com/2020/02/spfx-using-react-hooks-to-globally.html\" target=\"_blank\" rel=\"noopener\">Using React hooks to globally share service scope between components</a> (by Vardhaman Deshpande)</li>\n<li><a href=\"https://github.com/garrytrinder/spfx-servicescopes-hooks\" target=\"_blank\" rel=\"noopener\">Using React hooks with service scope</a> (by Garry Trinder)</li>\n<li><a href=\"https://rabiawilliams.com/spfx/reusable-custom-hooks/\" target=\"_blank\" rel=\"noopener\">React Reusable Custom Hooks in SPFx</a> (by Rabia William)</li>\n</ol>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>This is a simple web part which shows how to make use of <strong>useContext</strong> and <strong>useReducer</strong> hooks to retrieves contacts from the contact list and also updates a contact in the list using Fluent<br>UI panel control. </p>\n<p>The main idea is to manage your app state globally using useReducer  and access through useContext in your child components without passing through as component props</p>\n<p><img src=\"react-hooks-listitems-output.png\" alt=\"React hooks useReducer and useContext in SPFx\"></p>\n<h2 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h2><h3 id=\"Create-an-app-context\"><a href=\"#Create-an-app-context\" class=\"headerlink\" title=\"Create an app context\"></a>Create an app context</h3><p>First of all we need to create a global App context. </p>\n<script src=\"https://gist.github.com/ejazhussain/ac5849f4311b0ce833ad52f5f435fb15.js\"></script>\n\n\n<h3 id=\"Create-reducer\"><a href=\"#Create-reducer\" class=\"headerlink\" title=\"Create reducer\"></a>Create reducer</h3><p>For simplicity, we are going to create a simple reducer with two actions</p>\n<ol>\n<li>GET_ALLITEMS</li>\n<li>SET_SELECTEDITEM</li>\n</ol>\n<script src=\"https://gist.github.com/ejazhussain/8d792e65ba01aff5b56daf1e2b0482e7.js\"></script>\n\n\n<h3 id=\"Root-component\"><a href=\"#Root-component\" class=\"headerlink\" title=\"Root component\"></a>Root component</h3><p>In our root component, first of all, we need to initialize our initial state and then pass this initial state to useReducer hook. The reducer will return an object containing state and dispatch.</p>\n<p>The state will be our app state and dispatch method will be used to perform any action within our reducer.</p>\n<p>Here we will also create our provider using our App Context created earlier (<strong>ListItemsContext</strong>). so that we can access our state and another service context globally.</p>\n<script src=\"https://gist.github.com/ejazhussain/22418519cc4831d89bf3bd94df83fc74.js\"></script>\n\n<h3 id=\"ListItems-component\"><a href=\"#ListItems-component\" class=\"headerlink\" title=\"ListItems component\"></a>ListItems component</h3><p>This is how we are going to reterive latest state from reducer using <strong>useContext</strong> hook</p>\n<blockquote>\n<p>👉 const { state, dispatch } = useContext(ListItemsContext);</p>\n</blockquote>\n<script src=\"https://gist.github.com/ejazhussain/3b415847ef0bcf534426b96aae91486b.js\"></script>\n\n\n<p>This way, we can use the React useContext and useReducer hooks to globally share app state and other services context.</p>\n<p>Hopefully, you have found this post helpful! All code is added in the GitHub repo here: <a href=\"https://github.com/ejazhussain/react-hooks-listitems\" target=\"_blank\" rel=\"noopener\">https://github.com/ejazhussain/react-hooks-listitems</a></p>\n"},{"title":"Using Microsoft Graph Extension with SPFX","date":"2019-10-14T20:30:43.000Z","description":"Using Microsoft Graph Extension with SPFX","summary":"How to use Microsoft Graph Extensions with SPFX to provide ability for user to configure consistent UI experience across different devices.","img":"/images/post/microsoft-graph-extensions-in-spfx.jpg","cover":true,"coverImg":"/images/postcover/postcover-3.jpg","_content":"\n\nMain aim of this post is to show how we can use Microsoft Graph Extensions with SPFX to provide ability for user to configure consistent UI experience across different devices and apps.\n\nAs Microsoft Graph provide a single API endpoint that give you access to data and insights from office 365, azure and other platforms. \nYou can also extend Microsoft Graph using your own application data.\n\nYou can directly add custom properties to Graph Resources for example, <strong>User</strong>, <strong>Group</strong>, <strong>Message</strong> etc. See following table for supported resources. \n\n\n| Resource                | Open extensions | Schema extensions |\n|-------------------------|-----------------|-------------------|\n| Administrative unit     | Preview only    | Preview only      |\n| Calendar event          | GA              | GA                |\n| Device                  | GA              | GA                |\n| Group                   | GA              | GA                |\n| Group calendar event    | GA              | GA                |\n| Group conversation post | GA              | GA                |\n| Message                 | GA              | GA                |\n| Organization            | GA              | GA                |\n| Personal contact        | GA              | GA                |\n| User                    | GA              | GA                |\n\nThere are two types of Microsoft Graph Extensions available \n\n### Open Extensions\n- Its provide a way to add custom untyped data directly to specific resource\n\n### Schema Extensions\n- In Schema Extensions, you need to create / define your schema first and then use that schema for strongly typed custom data.\n\n> In this demo, I will be using Graph Open Extension\n\n### Implementation Detail\n\nApplication contain 4 tabs as below\n\n**1. POST**\n\nWe can create a new Microsoft Graph Open Extension under this tab.\n\n![Create Graph Extension](create-graph-extension.png)\n\nYou need to provide a JSON body of an openTypeExtension, with the following required name-value pairs, and any additional custom data. The data in the JSON payload can be primitive types, or arrays of primitive types. See below an example.\n\n![Create Graph Extension Schema](create-graph-extension-schema.png)\n\nOne thing to make sure is that your extension name should be unique. Recommendation is to use a reverse domain name system (DNS) format that is dependent on your own domain, for example, in my case, **com.ejazhussain.settings**. \n\n> Do not use the Microsoft domain (Com.Microsoft or Com.OnMicrosoft) in an extension name.\n\n\n**2. GET**\nHere we can retrieve existing Open Graph Extension by its unique extension ID. In my case it will be **\"com.ejazhussain.settings\"**.\nIn term of choosing unique name for your \n\n![Get Graph Extension](get-graph-extension.png)\n\n**3. PATCH**\nHere we will update existing Open Graph Extension. There is a possibility that you might want to update only a single property. So, the trick here is that you need to get existing Graph Extension values first and then update the required property using PATCH call.\n![Patch Graph Extension](patch-graph-extension.png)\n\n**4. DELETE**\nDelete Open Graph Extension\n![Delete Graph Extension](delete-graph-extension.png)\n\nFollowing permissions needed to create Graph Extension under **USER resource**\n\n![USER Resource - Graph Extension Permission](graph-extension-user-permissions.png)\n\n\n### Code Snippets\n\nHere are the content of custom Graph service  \n<script src=\"https://gist.github.com/ejazhussain/df5d08ead2250ec12fd230bda46f25d2.js\"></script>\n\n\nThis is how you can call above Graph service from your component to Create Graph Extension. Similar way you can call GET,POST,DELETE methods.\n<script src=\"https://gist.github.com/ejazhussain/0467bd80e158f5c4b224c1b9a5815d5a.js\"></script>\n\nYou can find complete source code at the following GitHub Repo\n\n<a href=\"https://github.com/ejazhussain/react-msgraph-extension\" class=\"is-primary button is-medium github\">\n    <span class=\"icon is-medium\">\n      <i class=\"fab fa-github\"></i>\n    </span>\n    <span>Explore solution on GitHub</span>\n  </a>\n\n\n\n  Hope you found this post useful.","source":"_posts/microsoft-graph-extensions-in-spfx.md","raw":"---\ntitle: Using Microsoft Graph Extension with SPFX\ndate: 2019-10-14 21:30:43\ndescription: Using Microsoft Graph Extension with SPFX\ntags:\n     - Microsoft Graph\n     - SPFX\ncategories: Microsoft Graph\nsummary: How to use Microsoft Graph Extensions with SPFX to provide ability for user to configure consistent UI experience across different devices.\nimg: /images/post/microsoft-graph-extensions-in-spfx.jpg\ncover: true\ncoverImg: /images/postcover/postcover-3.jpg\n---\n\n\nMain aim of this post is to show how we can use Microsoft Graph Extensions with SPFX to provide ability for user to configure consistent UI experience across different devices and apps.\n\nAs Microsoft Graph provide a single API endpoint that give you access to data and insights from office 365, azure and other platforms. \nYou can also extend Microsoft Graph using your own application data.\n\nYou can directly add custom properties to Graph Resources for example, <strong>User</strong>, <strong>Group</strong>, <strong>Message</strong> etc. See following table for supported resources. \n\n\n| Resource                | Open extensions | Schema extensions |\n|-------------------------|-----------------|-------------------|\n| Administrative unit     | Preview only    | Preview only      |\n| Calendar event          | GA              | GA                |\n| Device                  | GA              | GA                |\n| Group                   | GA              | GA                |\n| Group calendar event    | GA              | GA                |\n| Group conversation post | GA              | GA                |\n| Message                 | GA              | GA                |\n| Organization            | GA              | GA                |\n| Personal contact        | GA              | GA                |\n| User                    | GA              | GA                |\n\nThere are two types of Microsoft Graph Extensions available \n\n### Open Extensions\n- Its provide a way to add custom untyped data directly to specific resource\n\n### Schema Extensions\n- In Schema Extensions, you need to create / define your schema first and then use that schema for strongly typed custom data.\n\n> In this demo, I will be using Graph Open Extension\n\n### Implementation Detail\n\nApplication contain 4 tabs as below\n\n**1. POST**\n\nWe can create a new Microsoft Graph Open Extension under this tab.\n\n![Create Graph Extension](create-graph-extension.png)\n\nYou need to provide a JSON body of an openTypeExtension, with the following required name-value pairs, and any additional custom data. The data in the JSON payload can be primitive types, or arrays of primitive types. See below an example.\n\n![Create Graph Extension Schema](create-graph-extension-schema.png)\n\nOne thing to make sure is that your extension name should be unique. Recommendation is to use a reverse domain name system (DNS) format that is dependent on your own domain, for example, in my case, **com.ejazhussain.settings**. \n\n> Do not use the Microsoft domain (Com.Microsoft or Com.OnMicrosoft) in an extension name.\n\n\n**2. GET**\nHere we can retrieve existing Open Graph Extension by its unique extension ID. In my case it will be **\"com.ejazhussain.settings\"**.\nIn term of choosing unique name for your \n\n![Get Graph Extension](get-graph-extension.png)\n\n**3. PATCH**\nHere we will update existing Open Graph Extension. There is a possibility that you might want to update only a single property. So, the trick here is that you need to get existing Graph Extension values first and then update the required property using PATCH call.\n![Patch Graph Extension](patch-graph-extension.png)\n\n**4. DELETE**\nDelete Open Graph Extension\n![Delete Graph Extension](delete-graph-extension.png)\n\nFollowing permissions needed to create Graph Extension under **USER resource**\n\n![USER Resource - Graph Extension Permission](graph-extension-user-permissions.png)\n\n\n### Code Snippets\n\nHere are the content of custom Graph service  \n<script src=\"https://gist.github.com/ejazhussain/df5d08ead2250ec12fd230bda46f25d2.js\"></script>\n\n\nThis is how you can call above Graph service from your component to Create Graph Extension. Similar way you can call GET,POST,DELETE methods.\n<script src=\"https://gist.github.com/ejazhussain/0467bd80e158f5c4b224c1b9a5815d5a.js\"></script>\n\nYou can find complete source code at the following GitHub Repo\n\n<a href=\"https://github.com/ejazhussain/react-msgraph-extension\" class=\"is-primary button is-medium github\">\n    <span class=\"icon is-medium\">\n      <i class=\"fab fa-github\"></i>\n    </span>\n    <span>Explore solution on GitHub</span>\n  </a>\n\n\n\n  Hope you found this post useful.","slug":"microsoft-graph-extensions-in-spfx","published":1,"updated":"2020-03-15T15:16:16.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdbwg6mn000hioet89ckjulv","content":"<p>Main aim of this post is to show how we can use Microsoft Graph Extensions with SPFX to provide ability for user to configure consistent UI experience across different devices and apps.</p>\n<p>As Microsoft Graph provide a single API endpoint that give you access to data and insights from office 365, azure and other platforms.<br>You can also extend Microsoft Graph using your own application data.</p>\n<p>You can directly add custom properties to Graph Resources for example, <strong>User</strong>, <strong>Group</strong>, <strong>Message</strong> etc. See following table for supported resources. </p>\n<table>\n<thead>\n<tr>\n<th>Resource</th>\n<th>Open extensions</th>\n<th>Schema extensions</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Administrative unit</td>\n<td>Preview only</td>\n<td>Preview only</td>\n</tr>\n<tr>\n<td>Calendar event</td>\n<td>GA</td>\n<td>GA</td>\n</tr>\n<tr>\n<td>Device</td>\n<td>GA</td>\n<td>GA</td>\n</tr>\n<tr>\n<td>Group</td>\n<td>GA</td>\n<td>GA</td>\n</tr>\n<tr>\n<td>Group calendar event</td>\n<td>GA</td>\n<td>GA</td>\n</tr>\n<tr>\n<td>Group conversation post</td>\n<td>GA</td>\n<td>GA</td>\n</tr>\n<tr>\n<td>Message</td>\n<td>GA</td>\n<td>GA</td>\n</tr>\n<tr>\n<td>Organization</td>\n<td>GA</td>\n<td>GA</td>\n</tr>\n<tr>\n<td>Personal contact</td>\n<td>GA</td>\n<td>GA</td>\n</tr>\n<tr>\n<td>User</td>\n<td>GA</td>\n<td>GA</td>\n</tr>\n</tbody></table>\n<p>There are two types of Microsoft Graph Extensions available </p>\n<h3 id=\"Open-Extensions\"><a href=\"#Open-Extensions\" class=\"headerlink\" title=\"Open Extensions\"></a>Open Extensions</h3><ul>\n<li>Its provide a way to add custom untyped data directly to specific resource</li>\n</ul>\n<h3 id=\"Schema-Extensions\"><a href=\"#Schema-Extensions\" class=\"headerlink\" title=\"Schema Extensions\"></a>Schema Extensions</h3><ul>\n<li>In Schema Extensions, you need to create / define your schema first and then use that schema for strongly typed custom data.</li>\n</ul>\n<blockquote>\n<p>In this demo, I will be using Graph Open Extension</p>\n</blockquote>\n<h3 id=\"Implementation-Detail\"><a href=\"#Implementation-Detail\" class=\"headerlink\" title=\"Implementation Detail\"></a>Implementation Detail</h3><p>Application contain 4 tabs as below</p>\n<p><strong>1. POST</strong></p>\n<p>We can create a new Microsoft Graph Open Extension under this tab.</p>\n<p><img src=\"create-graph-extension.png\" alt=\"Create Graph Extension\"><span class=\"image-caption\">Create Graph Extension</span></p>\n<p>You need to provide a JSON body of an openTypeExtension, with the following required name-value pairs, and any additional custom data. The data in the JSON payload can be primitive types, or arrays of primitive types. See below an example.</p>\n<p><img src=\"create-graph-extension-schema.png\" alt=\"Create Graph Extension Schema\"><span class=\"image-caption\">Create Graph Extension Schema</span></p>\n<p>One thing to make sure is that your extension name should be unique. Recommendation is to use a reverse domain name system (DNS) format that is dependent on your own domain, for example, in my case, <strong>com.ejazhussain.settings</strong>. </p>\n<blockquote>\n<p>Do not use the Microsoft domain (Com.Microsoft or Com.OnMicrosoft) in an extension name.</p>\n</blockquote>\n<p><strong>2. GET</strong><br>Here we can retrieve existing Open Graph Extension by its unique extension ID. In my case it will be <strong>“com.ejazhussain.settings”</strong>.<br>In term of choosing unique name for your </p>\n<p><img src=\"get-graph-extension.png\" alt=\"Get Graph Extension\"><span class=\"image-caption\">Get Graph Extension</span></p>\n<p><strong>3. PATCH</strong><br>Here we will update existing Open Graph Extension. There is a possibility that you might want to update only a single property. So, the trick here is that you need to get existing Graph Extension values first and then update the required property using PATCH call.<br><img src=\"patch-graph-extension.png\" alt=\"Patch Graph Extension\"><span class=\"image-caption\">Patch Graph Extension</span></p>\n<p><strong>4. DELETE</strong><br>Delete Open Graph Extension<br><img src=\"delete-graph-extension.png\" alt=\"Delete Graph Extension\"><span class=\"image-caption\">Delete Graph Extension</span></p>\n<p>Following permissions needed to create Graph Extension under <strong>USER resource</strong></p>\n<p><img src=\"graph-extension-user-permissions.png\" alt=\"USER Resource - Graph Extension Permission\"><span class=\"image-caption\">USER Resource - Graph Extension Permission</span></p>\n<h3 id=\"Code-Snippets\"><a href=\"#Code-Snippets\" class=\"headerlink\" title=\"Code Snippets\"></a>Code Snippets</h3><p>Here are the content of custom Graph service  </p>\n<script src=\"https://gist.github.com/ejazhussain/df5d08ead2250ec12fd230bda46f25d2.js\"></script>\n\n\n<p>This is how you can call above Graph service from your component to Create Graph Extension. Similar way you can call GET,POST,DELETE methods.</p>\n<script src=\"https://gist.github.com/ejazhussain/0467bd80e158f5c4b224c1b9a5815d5a.js\"></script>\n\n<p>You can find complete source code at the following GitHub Repo</p>\n<a href=\"https://github.com/ejazhussain/react-msgraph-extension\" class=\"is-primary button is-medium github\" target=\"_blank\" rel=\"noopener\">\n    <span class=\"icon is-medium\">\n      <i class=\"fab fa-github\"></i>\n    </span>\n    <span>Explore solution on GitHub</span>\n  </a>\n\n\n\n<p>  Hope you found this post useful.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Main aim of this post is to show how we can use Microsoft Graph Extensions with SPFX to provide ability for user to configure consistent UI experience across different devices and apps.</p>\n<p>As Microsoft Graph provide a single API endpoint that give you access to data and insights from office 365, azure and other platforms.<br>You can also extend Microsoft Graph using your own application data.</p>\n<p>You can directly add custom properties to Graph Resources for example, <strong>User</strong>, <strong>Group</strong>, <strong>Message</strong> etc. See following table for supported resources. </p>\n<table>\n<thead>\n<tr>\n<th>Resource</th>\n<th>Open extensions</th>\n<th>Schema extensions</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Administrative unit</td>\n<td>Preview only</td>\n<td>Preview only</td>\n</tr>\n<tr>\n<td>Calendar event</td>\n<td>GA</td>\n<td>GA</td>\n</tr>\n<tr>\n<td>Device</td>\n<td>GA</td>\n<td>GA</td>\n</tr>\n<tr>\n<td>Group</td>\n<td>GA</td>\n<td>GA</td>\n</tr>\n<tr>\n<td>Group calendar event</td>\n<td>GA</td>\n<td>GA</td>\n</tr>\n<tr>\n<td>Group conversation post</td>\n<td>GA</td>\n<td>GA</td>\n</tr>\n<tr>\n<td>Message</td>\n<td>GA</td>\n<td>GA</td>\n</tr>\n<tr>\n<td>Organization</td>\n<td>GA</td>\n<td>GA</td>\n</tr>\n<tr>\n<td>Personal contact</td>\n<td>GA</td>\n<td>GA</td>\n</tr>\n<tr>\n<td>User</td>\n<td>GA</td>\n<td>GA</td>\n</tr>\n</tbody></table>\n<p>There are two types of Microsoft Graph Extensions available </p>\n<h3 id=\"Open-Extensions\"><a href=\"#Open-Extensions\" class=\"headerlink\" title=\"Open Extensions\"></a>Open Extensions</h3><ul>\n<li>Its provide a way to add custom untyped data directly to specific resource</li>\n</ul>\n<h3 id=\"Schema-Extensions\"><a href=\"#Schema-Extensions\" class=\"headerlink\" title=\"Schema Extensions\"></a>Schema Extensions</h3><ul>\n<li>In Schema Extensions, you need to create / define your schema first and then use that schema for strongly typed custom data.</li>\n</ul>\n<blockquote>\n<p>In this demo, I will be using Graph Open Extension</p>\n</blockquote>\n<h3 id=\"Implementation-Detail\"><a href=\"#Implementation-Detail\" class=\"headerlink\" title=\"Implementation Detail\"></a>Implementation Detail</h3><p>Application contain 4 tabs as below</p>\n<p><strong>1. POST</strong></p>\n<p>We can create a new Microsoft Graph Open Extension under this tab.</p>\n<p><img src=\"create-graph-extension.png\" alt=\"Create Graph Extension\"></p>\n<p>You need to provide a JSON body of an openTypeExtension, with the following required name-value pairs, and any additional custom data. The data in the JSON payload can be primitive types, or arrays of primitive types. See below an example.</p>\n<p><img src=\"create-graph-extension-schema.png\" alt=\"Create Graph Extension Schema\"></p>\n<p>One thing to make sure is that your extension name should be unique. Recommendation is to use a reverse domain name system (DNS) format that is dependent on your own domain, for example, in my case, <strong>com.ejazhussain.settings</strong>. </p>\n<blockquote>\n<p>Do not use the Microsoft domain (Com.Microsoft or Com.OnMicrosoft) in an extension name.</p>\n</blockquote>\n<p><strong>2. GET</strong><br>Here we can retrieve existing Open Graph Extension by its unique extension ID. In my case it will be <strong>“com.ejazhussain.settings”</strong>.<br>In term of choosing unique name for your </p>\n<p><img src=\"get-graph-extension.png\" alt=\"Get Graph Extension\"></p>\n<p><strong>3. PATCH</strong><br>Here we will update existing Open Graph Extension. There is a possibility that you might want to update only a single property. So, the trick here is that you need to get existing Graph Extension values first and then update the required property using PATCH call.<br><img src=\"patch-graph-extension.png\" alt=\"Patch Graph Extension\"></p>\n<p><strong>4. DELETE</strong><br>Delete Open Graph Extension<br><img src=\"delete-graph-extension.png\" alt=\"Delete Graph Extension\"></p>\n<p>Following permissions needed to create Graph Extension under <strong>USER resource</strong></p>\n<p><img src=\"graph-extension-user-permissions.png\" alt=\"USER Resource - Graph Extension Permission\"></p>\n<h3 id=\"Code-Snippets\"><a href=\"#Code-Snippets\" class=\"headerlink\" title=\"Code Snippets\"></a>Code Snippets</h3><p>Here are the content of custom Graph service  </p>\n<script src=\"https://gist.github.com/ejazhussain/df5d08ead2250ec12fd230bda46f25d2.js\"></script>\n\n\n<p>This is how you can call above Graph service from your component to Create Graph Extension. Similar way you can call GET,POST,DELETE methods.</p>\n<script src=\"https://gist.github.com/ejazhussain/0467bd80e158f5c4b224c1b9a5815d5a.js\"></script>\n\n<p>You can find complete source code at the following GitHub Repo</p>\n<a href=\"https://github.com/ejazhussain/react-msgraph-extension\" class=\"is-primary button is-medium github\" target=\"_blank\" rel=\"noopener\">\n    <span class=\"icon is-medium\">\n      <i class=\"fab fa-github\"></i>\n    </span>\n    <span>Explore solution on GitHub</span>\n  </a>\n\n\n\n<p>  Hope you found this post useful.</p>\n"},{"title":"SharePoint Modern List Formatting Using JSON","date":"2019-03-03T18:03:31.000Z","description":"SharePoint Modern List Formatting Using JSON","summary":"How to use Microsoft Graph Extensions with SPFX to provide ability for user to configure consistent UI experience across different devices.","img":"/images/post/list-json-formatting.jpg","cover":true,"coverImg":"/images/postcover/postcover-3.jpg","_content":"\nRecently I had a chance to explore SharePoint modern list formatting using JSON. I must say it is fun and powerful feature to build highly customized UI right from out of the box list without using custom code solution.\n\nIf you are looking to customize list column or row UI then here are very useful [Samples](https://github.com/SharePoint/sp-dev-list-formatting) available which will give you a good place to start.\n\nFor more detail about syntax of JSON and what is involved in term of accessing data as well how can you override existing UI, visit [Use view formatting to customize SharePoint](https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/view-formatting)\n\n\n<script src=\"https://gist.github.com/ejazhussain/f9a686f230715b08763b5b294f4ff033.js\"></script>\n\nHere is final output of the profile card\n![Profile Card](profile-card.png)\n\n\n## Source Code\n\n<a href=\"https://github.com/ejazhussain/List-Json-Formatting/tree/master/profile-card\" class=\"is-primary button is-medium github\">\n    <span class=\"icon is-medium\">\n      <i class=\"fab fa-github\"></i>\n    </span>\n    <span>Explore solution on GitHub</span>\n  </a>\n","source":"_posts/list-json-formatting.md","raw":"---\ntitle: SharePoint Modern List Formatting Using JSON\ndate: 2019-03-03 18:03:31\ndescription: SharePoint Modern List Formatting Using JSON\ntags:\n    - Modern SharePoint List\n    - JSON Formatting\ncategories: Modern SharePoint \nsummary: How to use Microsoft Graph Extensions with SPFX to provide ability for user to configure consistent UI experience across different devices.\nimg: /images/post/list-json-formatting.jpg\ncover: true\ncoverImg: /images/postcover/postcover-3.jpg\n---\n\nRecently I had a chance to explore SharePoint modern list formatting using JSON. I must say it is fun and powerful feature to build highly customized UI right from out of the box list without using custom code solution.\n\nIf you are looking to customize list column or row UI then here are very useful [Samples](https://github.com/SharePoint/sp-dev-list-formatting) available which will give you a good place to start.\n\nFor more detail about syntax of JSON and what is involved in term of accessing data as well how can you override existing UI, visit [Use view formatting to customize SharePoint](https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/view-formatting)\n\n\n<script src=\"https://gist.github.com/ejazhussain/f9a686f230715b08763b5b294f4ff033.js\"></script>\n\nHere is final output of the profile card\n![Profile Card](profile-card.png)\n\n\n## Source Code\n\n<a href=\"https://github.com/ejazhussain/List-Json-Formatting/tree/master/profile-card\" class=\"is-primary button is-medium github\">\n    <span class=\"icon is-medium\">\n      <i class=\"fab fa-github\"></i>\n    </span>\n    <span>Explore solution on GitHub</span>\n  </a>\n","slug":"list-json-formatting","published":1,"updated":"2020-03-15T15:16:16.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdbwg6mo000iioeti01qa7tt","content":"<p>Recently I had a chance to explore SharePoint modern list formatting using JSON. I must say it is fun and powerful feature to build highly customized UI right from out of the box list without using custom code solution.</p>\n<p>If you are looking to customize list column or row UI then here are very useful <a href=\"https://github.com/SharePoint/sp-dev-list-formatting\" target=\"_blank\" rel=\"noopener\">Samples</a> available which will give you a good place to start.</p>\n<p>For more detail about syntax of JSON and what is involved in term of accessing data as well how can you override existing UI, visit <a href=\"https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/view-formatting\" target=\"_blank\" rel=\"noopener\">Use view formatting to customize SharePoint</a></p>\n<script src=\"https://gist.github.com/ejazhussain/f9a686f230715b08763b5b294f4ff033.js\"></script>\n\n<p>Here is final output of the profile card<br><img src=\"profile-card.png\" alt=\"Profile Card\"><span class=\"image-caption\">Profile Card</span></p>\n<h2 id=\"Source-Code\"><a href=\"#Source-Code\" class=\"headerlink\" title=\"Source Code\"></a>Source Code</h2><a href=\"https://github.com/ejazhussain/List-Json-Formatting/tree/master/profile-card\" class=\"is-primary button is-medium github\" target=\"_blank\" rel=\"noopener\">\n    <span class=\"icon is-medium\">\n      <i class=\"fab fa-github\"></i>\n    </span>\n    <span>Explore solution on GitHub</span>\n  </a>\n","site":{"data":{}},"excerpt":"","more":"<p>Recently I had a chance to explore SharePoint modern list formatting using JSON. I must say it is fun and powerful feature to build highly customized UI right from out of the box list without using custom code solution.</p>\n<p>If you are looking to customize list column or row UI then here are very useful <a href=\"https://github.com/SharePoint/sp-dev-list-formatting\" target=\"_blank\" rel=\"noopener\">Samples</a> available which will give you a good place to start.</p>\n<p>For more detail about syntax of JSON and what is involved in term of accessing data as well how can you override existing UI, visit <a href=\"https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/view-formatting\" target=\"_blank\" rel=\"noopener\">Use view formatting to customize SharePoint</a></p>\n<script src=\"https://gist.github.com/ejazhussain/f9a686f230715b08763b5b294f4ff033.js\"></script>\n\n<p>Here is final output of the profile card<br><img src=\"profile-card.png\" alt=\"Profile Card\"></p>\n<h2 id=\"Source-Code\"><a href=\"#Source-Code\" class=\"headerlink\" title=\"Source Code\"></a>Source Code</h2><a href=\"https://github.com/ejazhussain/List-Json-Formatting/tree/master/profile-card\" class=\"is-primary button is-medium github\" target=\"_blank\" rel=\"noopener\">\n    <span class=\"icon is-medium\">\n      <i class=\"fab fa-github\"></i>\n    </span>\n    <span>Explore solution on GitHub</span>\n  </a>\n"},{"title":"Office 365 Usage Reports using Microsoft Graph API","date":"2019-04-07T16:44:19.000Z","description":"This web part shows SharePoint Online, OnDrive and Outlook usage reports using SPFX and Microsoft Graph API","summary":"Here is another SPFX web part which produces Office 365 usages reports (SharePoint Online, OneDrive and Outlook) using Microsoft Graph API.","img":"/images/post/spfx-office365-reports.jpg","cover":true,"coverImg":"/images/postcover/postcover-3.jpg","_content":"Here is another SPFX web part which produces Office 365 usages reports (SharePoint Online, OneDrive and Outlook) using Microsoft Graph API.\n\n## How it looks like\n\nBefore i go into implementation detail, Here are few screenshots of the web part.\n\n<strong>OneDrive - Number of total and active files</strong>\n![OneDrive - Number of total and active files](final-output-onedrive.png)\n\n\n<strong>Outlook - Email activity user detail</strong>\n![Outlook - Email activity user detail](final-output-outlook.png)\n\n\n<strong>SharePoint - Number of pages viewed across all sites</strong>\n![SharePoint - Number of pages viewed across all sites](final-output-sharepoint.png)\n\n## Implemenation Detail\n\nHere are few components which have been used.\n\n**1. Tabs UI**\nI am using material UI react components to build tabs. There are lot's useful UI elements which you can use in your application. Find out more about [react material UI](https://material-ui.com/getting-started/installation/) \n\n**2. Microsoft Graph API Integration**\nThis is a simple SPFX web part which make use of Microsoft Graph API to access office 365 usages reports. To use Graph API, I am using Dependency Injection pattern through service scopes as written by [Vardhaman Deshpand](https://www.vrdmn.com/2019/03/using-service-scopes-to-decouple.html).\n\nIf you have multiple web parts in your solutions which are consuming Microsoft Graph API then this approach would be useful to access graph service centrally.\n\nHere is code which implements calling MSGraphClient from a custom service.\n\n<script src=\"https://gist.github.com/ejazhussain/877750b86eac6310e183c4a761877852.js\"></script>\n\n**3.Graph API Permissions**\nYou need following set of permissions in order to retrieve office 365 usage reports. Find out more about [consuming the Microsoft Graph API in the SharePoint Framework](https://docs.microsoft.com/en-us/sharepoint/dev/spfx/use-aad-tutorial)\n\n![Graph API Permissions to reterive office 365 usage reports](graph-api-permissions-usage-reports.png)\n\n><i class=\"fa fa-info-circle\"></i> **Note:**<br/>I am using BETA Graph API endpoints. Because in BETA endpoints, you can specify the format of the response. I am retrieving response in JSON format. \n\n**4. Charts Integration**\nI am using [react-chartjs-2](https://github.com/jerairrest/react-chartjs-2) npm package for charts.  This is a React wrapper for Chart.js.\n> <i class=\"fa fa-info-circle\"></i> **Trick** <br/>If you are passing dynamic data to chart component then make sure to use redraw method to force update charts with updated dataset. see below example.\n\n![ChartJS redraw method](chartjs-redraw-method.png)\n\n## Source Code\n\n<a href=\"https://github.com/ejazhussain/react-graph-reports\" class=\"is-primary button is-medium github\">\n    <span class=\"icon is-medium\">\n      <i class=\"fab fa-github\"></i>\n    </span>\n    <span>Explore solution on GitHub</span>\n</a>\n\n\n\n\n","source":"_posts/spfx-office365-reports.md","raw":"---\ntitle: Office 365 Usage Reports using Microsoft Graph API\ndate: 2019-04-07 17:44:19\ndescription: This web part shows SharePoint Online, OnDrive and Outlook usage reports using SPFX and Microsoft Graph API\ntags: [SPFX, Microsoft Graph, Charts]\ncategories: Microsoft Graph\nsummary: Here is another SPFX web part which produces Office 365 usages reports (SharePoint Online, OneDrive and Outlook) using Microsoft Graph API.\nimg: /images/post/spfx-office365-reports.jpg\ncover: true\ncoverImg: /images/postcover/postcover-3.jpg\n\n---\nHere is another SPFX web part which produces Office 365 usages reports (SharePoint Online, OneDrive and Outlook) using Microsoft Graph API.\n\n## How it looks like\n\nBefore i go into implementation detail, Here are few screenshots of the web part.\n\n<strong>OneDrive - Number of total and active files</strong>\n![OneDrive - Number of total and active files](final-output-onedrive.png)\n\n\n<strong>Outlook - Email activity user detail</strong>\n![Outlook - Email activity user detail](final-output-outlook.png)\n\n\n<strong>SharePoint - Number of pages viewed across all sites</strong>\n![SharePoint - Number of pages viewed across all sites](final-output-sharepoint.png)\n\n## Implemenation Detail\n\nHere are few components which have been used.\n\n**1. Tabs UI**\nI am using material UI react components to build tabs. There are lot's useful UI elements which you can use in your application. Find out more about [react material UI](https://material-ui.com/getting-started/installation/) \n\n**2. Microsoft Graph API Integration**\nThis is a simple SPFX web part which make use of Microsoft Graph API to access office 365 usages reports. To use Graph API, I am using Dependency Injection pattern through service scopes as written by [Vardhaman Deshpand](https://www.vrdmn.com/2019/03/using-service-scopes-to-decouple.html).\n\nIf you have multiple web parts in your solutions which are consuming Microsoft Graph API then this approach would be useful to access graph service centrally.\n\nHere is code which implements calling MSGraphClient from a custom service.\n\n<script src=\"https://gist.github.com/ejazhussain/877750b86eac6310e183c4a761877852.js\"></script>\n\n**3.Graph API Permissions**\nYou need following set of permissions in order to retrieve office 365 usage reports. Find out more about [consuming the Microsoft Graph API in the SharePoint Framework](https://docs.microsoft.com/en-us/sharepoint/dev/spfx/use-aad-tutorial)\n\n![Graph API Permissions to reterive office 365 usage reports](graph-api-permissions-usage-reports.png)\n\n><i class=\"fa fa-info-circle\"></i> **Note:**<br/>I am using BETA Graph API endpoints. Because in BETA endpoints, you can specify the format of the response. I am retrieving response in JSON format. \n\n**4. Charts Integration**\nI am using [react-chartjs-2](https://github.com/jerairrest/react-chartjs-2) npm package for charts.  This is a React wrapper for Chart.js.\n> <i class=\"fa fa-info-circle\"></i> **Trick** <br/>If you are passing dynamic data to chart component then make sure to use redraw method to force update charts with updated dataset. see below example.\n\n![ChartJS redraw method](chartjs-redraw-method.png)\n\n## Source Code\n\n<a href=\"https://github.com/ejazhussain/react-graph-reports\" class=\"is-primary button is-medium github\">\n    <span class=\"icon is-medium\">\n      <i class=\"fab fa-github\"></i>\n    </span>\n    <span>Explore solution on GitHub</span>\n</a>\n\n\n\n\n","slug":"spfx-office365-reports","published":1,"updated":"2020-03-15T15:16:16.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdbwg6mp000mioetzfdk2x2s","content":"<p>Here is another SPFX web part which produces Office 365 usages reports (SharePoint Online, OneDrive and Outlook) using Microsoft Graph API.</p>\n<h2 id=\"How-it-looks-like\"><a href=\"#How-it-looks-like\" class=\"headerlink\" title=\"How it looks like\"></a>How it looks like</h2><p>Before i go into implementation detail, Here are few screenshots of the web part.</p>\n<p><strong>OneDrive - Number of total and active files</strong><br><img src=\"final-output-onedrive.png\" alt=\"OneDrive - Number of total and active files\"><span class=\"image-caption\">OneDrive - Number of total and active files</span></p>\n<p><strong>Outlook - Email activity user detail</strong><br><img src=\"final-output-outlook.png\" alt=\"Outlook - Email activity user detail\"><span class=\"image-caption\">Outlook - Email activity user detail</span></p>\n<p><strong>SharePoint - Number of pages viewed across all sites</strong><br><img src=\"final-output-sharepoint.png\" alt=\"SharePoint - Number of pages viewed across all sites\"><span class=\"image-caption\">SharePoint - Number of pages viewed across all sites</span></p>\n<h2 id=\"Implemenation-Detail\"><a href=\"#Implemenation-Detail\" class=\"headerlink\" title=\"Implemenation Detail\"></a>Implemenation Detail</h2><p>Here are few components which have been used.</p>\n<p><strong>1. Tabs UI</strong><br>I am using material UI react components to build tabs. There are lot’s useful UI elements which you can use in your application. Find out more about <a href=\"https://material-ui.com/getting-started/installation/\" target=\"_blank\" rel=\"noopener\">react material UI</a> </p>\n<p><strong>2. Microsoft Graph API Integration</strong><br>This is a simple SPFX web part which make use of Microsoft Graph API to access office 365 usages reports. To use Graph API, I am using Dependency Injection pattern through service scopes as written by <a href=\"https://www.vrdmn.com/2019/03/using-service-scopes-to-decouple.html\" target=\"_blank\" rel=\"noopener\">Vardhaman Deshpand</a>.</p>\n<p>If you have multiple web parts in your solutions which are consuming Microsoft Graph API then this approach would be useful to access graph service centrally.</p>\n<p>Here is code which implements calling MSGraphClient from a custom service.</p>\n<script src=\"https://gist.github.com/ejazhussain/877750b86eac6310e183c4a761877852.js\"></script>\n\n<p><strong>3.Graph API Permissions</strong><br>You need following set of permissions in order to retrieve office 365 usage reports. Find out more about <a href=\"https://docs.microsoft.com/en-us/sharepoint/dev/spfx/use-aad-tutorial\" target=\"_blank\" rel=\"noopener\">consuming the Microsoft Graph API in the SharePoint Framework</a></p>\n<p><img src=\"graph-api-permissions-usage-reports.png\" alt=\"Graph API Permissions to reterive office 365 usage reports\"><span class=\"image-caption\">Graph API Permissions to reterive office 365 usage reports</span></p>\n<blockquote>\n<p><i class=\"fa fa-info-circle\"></i> <strong>Note:</strong><br>I am using BETA Graph API endpoints. Because in BETA endpoints, you can specify the format of the response. I am retrieving response in JSON format. </p>\n</blockquote>\n<p><strong>4. Charts Integration</strong><br>I am using <a href=\"https://github.com/jerairrest/react-chartjs-2\" target=\"_blank\" rel=\"noopener\">react-chartjs-2</a> npm package for charts.  This is a React wrapper for Chart.js.</p>\n<blockquote>\n<p><i class=\"fa fa-info-circle\"></i> <strong>Trick</strong> <br>If you are passing dynamic data to chart component then make sure to use redraw method to force update charts with updated dataset. see below example.</p>\n</blockquote>\n<p><img src=\"chartjs-redraw-method.png\" alt=\"ChartJS redraw method\"><span class=\"image-caption\">ChartJS redraw method</span></p>\n<h2 id=\"Source-Code\"><a href=\"#Source-Code\" class=\"headerlink\" title=\"Source Code\"></a>Source Code</h2><a href=\"https://github.com/ejazhussain/react-graph-reports\" class=\"is-primary button is-medium github\" target=\"_blank\" rel=\"noopener\">\n    <span class=\"icon is-medium\">\n      <i class=\"fab fa-github\"></i>\n    </span>\n    <span>Explore solution on GitHub</span>\n</a>\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>Here is another SPFX web part which produces Office 365 usages reports (SharePoint Online, OneDrive and Outlook) using Microsoft Graph API.</p>\n<h2 id=\"How-it-looks-like\"><a href=\"#How-it-looks-like\" class=\"headerlink\" title=\"How it looks like\"></a>How it looks like</h2><p>Before i go into implementation detail, Here are few screenshots of the web part.</p>\n<p><strong>OneDrive - Number of total and active files</strong><br><img src=\"final-output-onedrive.png\" alt=\"OneDrive - Number of total and active files\"></p>\n<p><strong>Outlook - Email activity user detail</strong><br><img src=\"final-output-outlook.png\" alt=\"Outlook - Email activity user detail\"></p>\n<p><strong>SharePoint - Number of pages viewed across all sites</strong><br><img src=\"final-output-sharepoint.png\" alt=\"SharePoint - Number of pages viewed across all sites\"></p>\n<h2 id=\"Implemenation-Detail\"><a href=\"#Implemenation-Detail\" class=\"headerlink\" title=\"Implemenation Detail\"></a>Implemenation Detail</h2><p>Here are few components which have been used.</p>\n<p><strong>1. Tabs UI</strong><br>I am using material UI react components to build tabs. There are lot’s useful UI elements which you can use in your application. Find out more about <a href=\"https://material-ui.com/getting-started/installation/\" target=\"_blank\" rel=\"noopener\">react material UI</a> </p>\n<p><strong>2. Microsoft Graph API Integration</strong><br>This is a simple SPFX web part which make use of Microsoft Graph API to access office 365 usages reports. To use Graph API, I am using Dependency Injection pattern through service scopes as written by <a href=\"https://www.vrdmn.com/2019/03/using-service-scopes-to-decouple.html\" target=\"_blank\" rel=\"noopener\">Vardhaman Deshpand</a>.</p>\n<p>If you have multiple web parts in your solutions which are consuming Microsoft Graph API then this approach would be useful to access graph service centrally.</p>\n<p>Here is code which implements calling MSGraphClient from a custom service.</p>\n<script src=\"https://gist.github.com/ejazhussain/877750b86eac6310e183c4a761877852.js\"></script>\n\n<p><strong>3.Graph API Permissions</strong><br>You need following set of permissions in order to retrieve office 365 usage reports. Find out more about <a href=\"https://docs.microsoft.com/en-us/sharepoint/dev/spfx/use-aad-tutorial\" target=\"_blank\" rel=\"noopener\">consuming the Microsoft Graph API in the SharePoint Framework</a></p>\n<p><img src=\"graph-api-permissions-usage-reports.png\" alt=\"Graph API Permissions to reterive office 365 usage reports\"></p>\n<blockquote>\n<p><i class=\"fa fa-info-circle\"></i> <strong>Note:</strong><br>I am using BETA Graph API endpoints. Because in BETA endpoints, you can specify the format of the response. I am retrieving response in JSON format. </p>\n</blockquote>\n<p><strong>4. Charts Integration</strong><br>I am using <a href=\"https://github.com/jerairrest/react-chartjs-2\" target=\"_blank\" rel=\"noopener\">react-chartjs-2</a> npm package for charts.  This is a React wrapper for Chart.js.</p>\n<blockquote>\n<p><i class=\"fa fa-info-circle\"></i> <strong>Trick</strong> <br>If you are passing dynamic data to chart component then make sure to use redraw method to force update charts with updated dataset. see below example.</p>\n</blockquote>\n<p><img src=\"chartjs-redraw-method.png\" alt=\"ChartJS redraw method\"></p>\n<h2 id=\"Source-Code\"><a href=\"#Source-Code\" class=\"headerlink\" title=\"Source Code\"></a>Source Code</h2><a href=\"https://github.com/ejazhussain/react-graph-reports\" class=\"is-primary button is-medium github\" target=\"_blank\" rel=\"noopener\">\n    <span class=\"icon is-medium\">\n      <i class=\"fab fa-github\"></i>\n    </span>\n    <span>Explore solution on GitHub</span>\n</a>\n\n\n\n\n"},{"title":"SharePoint Framework -  Image Gallery","date":"2019-02-08T16:56:23.000Z","description":"Image Gallery with Taxonomy filter, Typed Search and Pagination","summary":"SPFX application which implement an image gallery with taxonomy base filtering and typed search. This application also implement pagination.","img":"/images/post/spfx-image-gallery.jpg","cover":true,"coverImg":"/images/postcover/postcover-3.jpg","_content":"\nThis post describe a SPFX application which implement an image gallery with taxonomy base filtering and typed search. This application also implement pagination.\n\nMy main aim is to build this application to get my hand dirty on SPFX, PnPJS, Office UI Fabric and related technologies.\n\n<strong>Here is screenshot of the final output</strong>\n\n![Image gallery](spfx-image-gallery.png)\n![Image with right side panel](spfx-image-gallery-with-panel.png)\n\n\n## Application Component's\n\n1. <strong>Taxonomy based filtering</strong>\nThis was not too complicated to build dynamic rest query based on selected metadata tag.\nTrick involves using the hidden list field TaxCatchAll. This field exists for all rows having taxonomy data, and includes all the terms used.TaxCatchAll field.\n![Metadata column filtering](taxonomy-query.png)\n2. <strong>Typed Search</strong>\nFor this demo, I am using oData string query operation \"startsWith\". You can build more complex query using other available oData query operations.  [Here is a nice article about oData Operations](https://social.technet.microsoft.com/wiki/contents/articles/35796.sharepoint-2013-using-rest-api-for-selecting-filtering-sorting-and-pagination-in-sharepoint-list.aspx)\n3. <strong>Right side popup panel</strong>\nThis is simply build using Office UI Fabric React Component ([Panel](https://developer.microsoft.com/en-us/fabric#/components/panel)) \n4. <strong>Pagination</strong>\nI must admit, I have spent more time on Pagination component compare to others, I just wanted to get this into a shape where we can start using this in real world scenarios.I have built pagination quite number of times before using JSOM using ListItemCollectionPosition object. \nFirst of all i would like say massive thank you to my colleague [Vardhaman Deshpande](https://www.vrdmn.com/) to resolve an issue regarding pagination.\nTo Build pagination i have tried below 3 options:\n<strong>Option1:</strong> I have tried using custom npm package for pagination [react-js-pagination](https://www.npmjs.com/package/react-js-pagination). Package works fine if you want to just build pagination without using any sort of filtering.\n<strong>Option2:</strong> PnPJS using hasNext attribute. In this approach, You have to save whole return items object with hasNext attribute for both Next and Previous state. You can be achieved pagination but somehow I have preferred option3.\n<strong>Option3:</strong> Similar to Option2 but you only need to save nextLink url into array for both Next and Previous state. This option also works fine with filtering.\n\n## Setting up the application\n\t\n1. Create a Department Term set with associated child terms, for example,  HR, Information Services, Sales, Marketing\n2. Create an Image Library and add some sample images\n3. Tag each image with Department Metadata Column\n4. Also fill in Title field for each image, this is require for typed search functionality\n\n\n## Source Code\n\n<a href=\"https://github.com/ejazhussain/SPFX-ImageGallery\" class=\"is-primary button is-medium github\">\n    <span class=\"icon is-medium\">\n      <i class=\"fab fa-github\"></i>\n    </span>\n    <span>Explore solution on GitHub</span>\n</a>\n\n","source":"_posts/spfx-image-gallery.md","raw":"---\ntitle: SharePoint Framework -  Image Gallery\ndate: 2019-02-08 16:56:23\ntags: [SPFX, Office UI Fabric]\ndescription: Image Gallery with Taxonomy filter, Typed Search and Pagination\ncategories: SharePoint Framework \nsummary: SPFX application which implement an image gallery with taxonomy base filtering and typed search. This application also implement pagination.\nimg: /images/post/spfx-image-gallery.jpg\ncover: true\ncoverImg: /images/postcover/postcover-3.jpg\n---\n\nThis post describe a SPFX application which implement an image gallery with taxonomy base filtering and typed search. This application also implement pagination.\n\nMy main aim is to build this application to get my hand dirty on SPFX, PnPJS, Office UI Fabric and related technologies.\n\n<strong>Here is screenshot of the final output</strong>\n\n![Image gallery](spfx-image-gallery.png)\n![Image with right side panel](spfx-image-gallery-with-panel.png)\n\n\n## Application Component's\n\n1. <strong>Taxonomy based filtering</strong>\nThis was not too complicated to build dynamic rest query based on selected metadata tag.\nTrick involves using the hidden list field TaxCatchAll. This field exists for all rows having taxonomy data, and includes all the terms used.TaxCatchAll field.\n![Metadata column filtering](taxonomy-query.png)\n2. <strong>Typed Search</strong>\nFor this demo, I am using oData string query operation \"startsWith\". You can build more complex query using other available oData query operations.  [Here is a nice article about oData Operations](https://social.technet.microsoft.com/wiki/contents/articles/35796.sharepoint-2013-using-rest-api-for-selecting-filtering-sorting-and-pagination-in-sharepoint-list.aspx)\n3. <strong>Right side popup panel</strong>\nThis is simply build using Office UI Fabric React Component ([Panel](https://developer.microsoft.com/en-us/fabric#/components/panel)) \n4. <strong>Pagination</strong>\nI must admit, I have spent more time on Pagination component compare to others, I just wanted to get this into a shape where we can start using this in real world scenarios.I have built pagination quite number of times before using JSOM using ListItemCollectionPosition object. \nFirst of all i would like say massive thank you to my colleague [Vardhaman Deshpande](https://www.vrdmn.com/) to resolve an issue regarding pagination.\nTo Build pagination i have tried below 3 options:\n<strong>Option1:</strong> I have tried using custom npm package for pagination [react-js-pagination](https://www.npmjs.com/package/react-js-pagination). Package works fine if you want to just build pagination without using any sort of filtering.\n<strong>Option2:</strong> PnPJS using hasNext attribute. In this approach, You have to save whole return items object with hasNext attribute for both Next and Previous state. You can be achieved pagination but somehow I have preferred option3.\n<strong>Option3:</strong> Similar to Option2 but you only need to save nextLink url into array for both Next and Previous state. This option also works fine with filtering.\n\n## Setting up the application\n\t\n1. Create a Department Term set with associated child terms, for example,  HR, Information Services, Sales, Marketing\n2. Create an Image Library and add some sample images\n3. Tag each image with Department Metadata Column\n4. Also fill in Title field for each image, this is require for typed search functionality\n\n\n## Source Code\n\n<a href=\"https://github.com/ejazhussain/SPFX-ImageGallery\" class=\"is-primary button is-medium github\">\n    <span class=\"icon is-medium\">\n      <i class=\"fab fa-github\"></i>\n    </span>\n    <span>Explore solution on GitHub</span>\n</a>\n\n","slug":"spfx-image-gallery","published":1,"updated":"2020-03-15T15:16:16.720Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdbwg6mq000oioetfe3l9jrk","content":"<p>This post describe a SPFX application which implement an image gallery with taxonomy base filtering and typed search. This application also implement pagination.</p>\n<p>My main aim is to build this application to get my hand dirty on SPFX, PnPJS, Office UI Fabric and related technologies.</p>\n<p><strong>Here is screenshot of the final output</strong></p>\n<p><img src=\"spfx-image-gallery.png\" alt=\"Image gallery\"><span class=\"image-caption\">Image gallery</span><br><img src=\"spfx-image-gallery-with-panel.png\" alt=\"Image with right side panel\"><span class=\"image-caption\">Image with right side panel</span></p>\n<h2 id=\"Application-Component’s\"><a href=\"#Application-Component’s\" class=\"headerlink\" title=\"Application Component’s\"></a>Application Component’s</h2><ol>\n<li><strong>Taxonomy based filtering</strong><br>This was not too complicated to build dynamic rest query based on selected metadata tag.<br>Trick involves using the hidden list field TaxCatchAll. This field exists for all rows having taxonomy data, and includes all the terms used.TaxCatchAll field.<br><img src=\"taxonomy-query.png\" alt=\"Metadata column filtering\"><span class=\"image-caption\">Metadata column filtering</span></li>\n<li><strong>Typed Search</strong><br>For this demo, I am using oData string query operation “startsWith”. You can build more complex query using other available oData query operations.  <a href=\"https://social.technet.microsoft.com/wiki/contents/articles/35796.sharepoint-2013-using-rest-api-for-selecting-filtering-sorting-and-pagination-in-sharepoint-list.aspx\" target=\"_blank\" rel=\"noopener\">Here is a nice article about oData Operations</a></li>\n<li><strong>Right side popup panel</strong><br>This is simply build using Office UI Fabric React Component (<a href=\"https://developer.microsoft.com/en-us/fabric#/components/panel\" target=\"_blank\" rel=\"noopener\">Panel</a>) </li>\n<li><strong>Pagination</strong><br>I must admit, I have spent more time on Pagination component compare to others, I just wanted to get this into a shape where we can start using this in real world scenarios.I have built pagination quite number of times before using JSOM using ListItemCollectionPosition object.<br>First of all i would like say massive thank you to my colleague <a href=\"https://www.vrdmn.com/\" target=\"_blank\" rel=\"noopener\">Vardhaman Deshpande</a> to resolve an issue regarding pagination.<br>To Build pagination i have tried below 3 options:<br><strong>Option1:</strong> I have tried using custom npm package for pagination <a href=\"https://www.npmjs.com/package/react-js-pagination\" target=\"_blank\" rel=\"noopener\">react-js-pagination</a>. Package works fine if you want to just build pagination without using any sort of filtering.<br><strong>Option2:</strong> PnPJS using hasNext attribute. In this approach, You have to save whole return items object with hasNext attribute for both Next and Previous state. You can be achieved pagination but somehow I have preferred option3.<br><strong>Option3:</strong> Similar to Option2 but you only need to save nextLink url into array for both Next and Previous state. This option also works fine with filtering.</li>\n</ol>\n<h2 id=\"Setting-up-the-application\"><a href=\"#Setting-up-the-application\" class=\"headerlink\" title=\"Setting up the application\"></a>Setting up the application</h2><ol>\n<li>Create a Department Term set with associated child terms, for example,  HR, Information Services, Sales, Marketing</li>\n<li>Create an Image Library and add some sample images</li>\n<li>Tag each image with Department Metadata Column</li>\n<li>Also fill in Title field for each image, this is require for typed search functionality</li>\n</ol>\n<h2 id=\"Source-Code\"><a href=\"#Source-Code\" class=\"headerlink\" title=\"Source Code\"></a>Source Code</h2><a href=\"https://github.com/ejazhussain/SPFX-ImageGallery\" class=\"is-primary button is-medium github\" target=\"_blank\" rel=\"noopener\">\n    <span class=\"icon is-medium\">\n      <i class=\"fab fa-github\"></i>\n    </span>\n    <span>Explore solution on GitHub</span>\n</a>\n\n","site":{"data":{}},"excerpt":"","more":"<p>This post describe a SPFX application which implement an image gallery with taxonomy base filtering and typed search. This application also implement pagination.</p>\n<p>My main aim is to build this application to get my hand dirty on SPFX, PnPJS, Office UI Fabric and related technologies.</p>\n<p><strong>Here is screenshot of the final output</strong></p>\n<p><img src=\"spfx-image-gallery.png\" alt=\"Image gallery\"><br><img src=\"spfx-image-gallery-with-panel.png\" alt=\"Image with right side panel\"></p>\n<h2 id=\"Application-Component’s\"><a href=\"#Application-Component’s\" class=\"headerlink\" title=\"Application Component’s\"></a>Application Component’s</h2><ol>\n<li><strong>Taxonomy based filtering</strong><br>This was not too complicated to build dynamic rest query based on selected metadata tag.<br>Trick involves using the hidden list field TaxCatchAll. This field exists for all rows having taxonomy data, and includes all the terms used.TaxCatchAll field.<br><img src=\"taxonomy-query.png\" alt=\"Metadata column filtering\"></li>\n<li><strong>Typed Search</strong><br>For this demo, I am using oData string query operation “startsWith”. You can build more complex query using other available oData query operations.  <a href=\"https://social.technet.microsoft.com/wiki/contents/articles/35796.sharepoint-2013-using-rest-api-for-selecting-filtering-sorting-and-pagination-in-sharepoint-list.aspx\" target=\"_blank\" rel=\"noopener\">Here is a nice article about oData Operations</a></li>\n<li><strong>Right side popup panel</strong><br>This is simply build using Office UI Fabric React Component (<a href=\"https://developer.microsoft.com/en-us/fabric#/components/panel\" target=\"_blank\" rel=\"noopener\">Panel</a>) </li>\n<li><strong>Pagination</strong><br>I must admit, I have spent more time on Pagination component compare to others, I just wanted to get this into a shape where we can start using this in real world scenarios.I have built pagination quite number of times before using JSOM using ListItemCollectionPosition object.<br>First of all i would like say massive thank you to my colleague <a href=\"https://www.vrdmn.com/\" target=\"_blank\" rel=\"noopener\">Vardhaman Deshpande</a> to resolve an issue regarding pagination.<br>To Build pagination i have tried below 3 options:<br><strong>Option1:</strong> I have tried using custom npm package for pagination <a href=\"https://www.npmjs.com/package/react-js-pagination\" target=\"_blank\" rel=\"noopener\">react-js-pagination</a>. Package works fine if you want to just build pagination without using any sort of filtering.<br><strong>Option2:</strong> PnPJS using hasNext attribute. In this approach, You have to save whole return items object with hasNext attribute for both Next and Previous state. You can be achieved pagination but somehow I have preferred option3.<br><strong>Option3:</strong> Similar to Option2 but you only need to save nextLink url into array for both Next and Previous state. This option also works fine with filtering.</li>\n</ol>\n<h2 id=\"Setting-up-the-application\"><a href=\"#Setting-up-the-application\" class=\"headerlink\" title=\"Setting up the application\"></a>Setting up the application</h2><ol>\n<li>Create a Department Term set with associated child terms, for example,  HR, Information Services, Sales, Marketing</li>\n<li>Create an Image Library and add some sample images</li>\n<li>Tag each image with Department Metadata Column</li>\n<li>Also fill in Title field for each image, this is require for typed search functionality</li>\n</ol>\n<h2 id=\"Source-Code\"><a href=\"#Source-Code\" class=\"headerlink\" title=\"Source Code\"></a>Source Code</h2><a href=\"https://github.com/ejazhussain/SPFX-ImageGallery\" class=\"is-primary button is-medium github\" target=\"_blank\" rel=\"noopener\">\n    <span class=\"icon is-medium\">\n      <i class=\"fab fa-github\"></i>\n    </span>\n    <span>Explore solution on GitHub</span>\n</a>\n\n"},{"title":"Approval process using Microsoft Flow and SharePoint Online","date":"2019-03-10T13:47:32.000Z","description":"Implementation of approval process using SharePoint and Microsoft Flow","summary":"If you are looking to build an approval workflow using Microsoft Flow, then here are simple steps which will help you to create one.","img":"/images/post/sharepoint-approval-task-using-flow.jpg","cover":true,"coverImg":"/images/postcover/postcover-3.jpg","_content":"\nIf you are looking to build an approval workflow using Microsoft Flow, then here are simple steps which will help you to create one.\n\n### Scenario \n\nFor example, I have a SharePoint list called Projects and on creation of a new project i would like to run an approval workflow.\n\n![Project List](project-list.png)\n\nHere are over all 5 steps which we are going to implement one by one for our approval workflow.\n\n![Complete Flow Steps](complete-flow-steps.png)\n\nFirst of all, Create your workflow from blank template\n\n![Create Flow from Blank Template](flow-blank-template.png)\n\n### Step 1 - When Item Is Created or Modified\n\nUnder SharePoint action, select SharePoint Trigger called **When Item Is Created Or Modified**. Add your site collection URL and select associated  list or library. In my case this will be a project list.\n\n*If you cannot select your site collection URL from Site Address dropdown field, then you can click on **Enter Custom Value** option to add your site collection URL*\n\n![When Item Is Created Or Modified SharePoint Trigger](item-created-modified.png)\n\n### Step 2 - Get File Metadata\n\nIn this step, we need to grab the metadata of newly created SharePoint List Item. The reason we need this, we need to get ETAG, which we need in later steps.\n\n![SharePoint Action - Get File Metadata](get-file-metadata.png)\n\n### Step 3 - Start and wait for an approval \n\nIn this step, add and configure, **Start and wait for an approval** action. It’s worth mentioning here that you can direclty add Markdown styles in Detail field. see below screenshot\n\n**Approval Type Field**: You can select two options, 1- Everyone must approve 2- First to response. In this case, I will be selecting *Everyone must approve*. In rest of the fields, You can add dynamic data from associated list (In our case, It’s **Projects** list)\n\n![Approvals Action - Start and wait for an approval](start-approval-action.png)\n\n### Step 4 - Condition\n\nHere we need to add **Condition** action to check if outcome of the response is approve or reject. And base on the outcome, we need to set the content approval status of the SharePoint list item.\n\n![Condition Action](conditon.png)\n\n![Set Content Approval Status](content-approval-status.png)\n\n### Step 5 - Send Outcome as an email\n\nIn this task, we need to send an outcome of the approval by email to submitter or prepare of the project. For this, we need to use **Office 365 Outlook Action - Send an email**\n\n![Send an email action](send-email-action.png)\n\n*Make sure to run Flow Checker to check for any errors or warnings*\n\n![Flow checker](flow-checker.png)\n\n\n## Notification Email and Approve or Reject Actions\n\nThis is how notification email looks like. As mentioned above, you can style body of the task using Markdown. \n\n![Task notification email](task-notification-email.png)\n\none of the game changers for Flow is, you can simply approve or reject tasks directly from your email. You can also add additional comments. see below.\n\n![Approve or reject outcome action](approve-reject-comments.png)\n\nOnce task approved, here is a final email notification to submitter looks like.\n\n![Task outcome email](confirmation-email.png)\n\nAnd associated  Project list is updated with the outcome \n\n![Task outcome](list-approver-response.png)\n\nThis is very simple scenario of Approval process using Flow. You can build more complex scenario for example, adding multiple conditionally approvers based on outcome from the first approver etc. \n\nHope you found this post useful!\n\n\n\n\n\n\n\n","source":"_posts/sharepoint-approval-task-using-flow.md","raw":"---\ntitle: Approval process using Microsoft Flow and SharePoint Online\ndate: 2019-03-10 13:47:32\ndescription: Implementation of approval process using SharePoint and Microsoft Flow\ntags: \n    - Microsoft Flow\n    - Workflow\n    - SharePoint Online\ncategories: Microsoft Flow\nsummary: If you are looking to build an approval workflow using Microsoft Flow, then here are simple steps which will help you to create one.\nimg: /images/post/sharepoint-approval-task-using-flow.jpg\ncover: true\ncoverImg: /images/postcover/postcover-3.jpg\n---\n\nIf you are looking to build an approval workflow using Microsoft Flow, then here are simple steps which will help you to create one.\n\n### Scenario \n\nFor example, I have a SharePoint list called Projects and on creation of a new project i would like to run an approval workflow.\n\n![Project List](project-list.png)\n\nHere are over all 5 steps which we are going to implement one by one for our approval workflow.\n\n![Complete Flow Steps](complete-flow-steps.png)\n\nFirst of all, Create your workflow from blank template\n\n![Create Flow from Blank Template](flow-blank-template.png)\n\n### Step 1 - When Item Is Created or Modified\n\nUnder SharePoint action, select SharePoint Trigger called **When Item Is Created Or Modified**. Add your site collection URL and select associated  list or library. In my case this will be a project list.\n\n*If you cannot select your site collection URL from Site Address dropdown field, then you can click on **Enter Custom Value** option to add your site collection URL*\n\n![When Item Is Created Or Modified SharePoint Trigger](item-created-modified.png)\n\n### Step 2 - Get File Metadata\n\nIn this step, we need to grab the metadata of newly created SharePoint List Item. The reason we need this, we need to get ETAG, which we need in later steps.\n\n![SharePoint Action - Get File Metadata](get-file-metadata.png)\n\n### Step 3 - Start and wait for an approval \n\nIn this step, add and configure, **Start and wait for an approval** action. It’s worth mentioning here that you can direclty add Markdown styles in Detail field. see below screenshot\n\n**Approval Type Field**: You can select two options, 1- Everyone must approve 2- First to response. In this case, I will be selecting *Everyone must approve*. In rest of the fields, You can add dynamic data from associated list (In our case, It’s **Projects** list)\n\n![Approvals Action - Start and wait for an approval](start-approval-action.png)\n\n### Step 4 - Condition\n\nHere we need to add **Condition** action to check if outcome of the response is approve or reject. And base on the outcome, we need to set the content approval status of the SharePoint list item.\n\n![Condition Action](conditon.png)\n\n![Set Content Approval Status](content-approval-status.png)\n\n### Step 5 - Send Outcome as an email\n\nIn this task, we need to send an outcome of the approval by email to submitter or prepare of the project. For this, we need to use **Office 365 Outlook Action - Send an email**\n\n![Send an email action](send-email-action.png)\n\n*Make sure to run Flow Checker to check for any errors or warnings*\n\n![Flow checker](flow-checker.png)\n\n\n## Notification Email and Approve or Reject Actions\n\nThis is how notification email looks like. As mentioned above, you can style body of the task using Markdown. \n\n![Task notification email](task-notification-email.png)\n\none of the game changers for Flow is, you can simply approve or reject tasks directly from your email. You can also add additional comments. see below.\n\n![Approve or reject outcome action](approve-reject-comments.png)\n\nOnce task approved, here is a final email notification to submitter looks like.\n\n![Task outcome email](confirmation-email.png)\n\nAnd associated  Project list is updated with the outcome \n\n![Task outcome](list-approver-response.png)\n\nThis is very simple scenario of Approval process using Flow. You can build more complex scenario for example, adding multiple conditionally approvers based on outcome from the first approver etc. \n\nHope you found this post useful!\n\n\n\n\n\n\n\n","slug":"sharepoint-approval-task-using-flow","published":1,"updated":"2020-03-15T15:16:16.718Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdbwg6ms000tioeth4r9x744","content":"<p>If you are looking to build an approval workflow using Microsoft Flow, then here are simple steps which will help you to create one.</p>\n<h3 id=\"Scenario\"><a href=\"#Scenario\" class=\"headerlink\" title=\"Scenario\"></a>Scenario</h3><p>For example, I have a SharePoint list called Projects and on creation of a new project i would like to run an approval workflow.</p>\n<p><img src=\"project-list.png\" alt=\"Project List\"><span class=\"image-caption\">Project List</span></p>\n<p>Here are over all 5 steps which we are going to implement one by one for our approval workflow.</p>\n<p><img src=\"complete-flow-steps.png\" alt=\"Complete Flow Steps\"><span class=\"image-caption\">Complete Flow Steps</span></p>\n<p>First of all, Create your workflow from blank template</p>\n<p><img src=\"flow-blank-template.png\" alt=\"Create Flow from Blank Template\"><span class=\"image-caption\">Create Flow from Blank Template</span></p>\n<h3 id=\"Step-1-When-Item-Is-Created-or-Modified\"><a href=\"#Step-1-When-Item-Is-Created-or-Modified\" class=\"headerlink\" title=\"Step 1 - When Item Is Created or Modified\"></a>Step 1 - When Item Is Created or Modified</h3><p>Under SharePoint action, select SharePoint Trigger called <strong>When Item Is Created Or Modified</strong>. Add your site collection URL and select associated  list or library. In my case this will be a project list.</p>\n<p><em>If you cannot select your site collection URL from Site Address dropdown field, then you can click on <strong>Enter Custom Value</strong> option to add your site collection URL</em></p>\n<p><img src=\"item-created-modified.png\" alt=\"When Item Is Created Or Modified SharePoint Trigger\"><span class=\"image-caption\">When Item Is Created Or Modified SharePoint Trigger</span></p>\n<h3 id=\"Step-2-Get-File-Metadata\"><a href=\"#Step-2-Get-File-Metadata\" class=\"headerlink\" title=\"Step 2 - Get File Metadata\"></a>Step 2 - Get File Metadata</h3><p>In this step, we need to grab the metadata of newly created SharePoint List Item. The reason we need this, we need to get ETAG, which we need in later steps.</p>\n<p><img src=\"get-file-metadata.png\" alt=\"SharePoint Action - Get File Metadata\"><span class=\"image-caption\">SharePoint Action - Get File Metadata</span></p>\n<h3 id=\"Step-3-Start-and-wait-for-an-approval\"><a href=\"#Step-3-Start-and-wait-for-an-approval\" class=\"headerlink\" title=\"Step 3 - Start and wait for an approval\"></a>Step 3 - Start and wait for an approval</h3><p>In this step, add and configure, <strong>Start and wait for an approval</strong> action. It’s worth mentioning here that you can direclty add Markdown styles in Detail field. see below screenshot</p>\n<p><strong>Approval Type Field</strong>: You can select two options, 1- Everyone must approve 2- First to response. In this case, I will be selecting <em>Everyone must approve</em>. In rest of the fields, You can add dynamic data from associated list (In our case, It’s <strong>Projects</strong> list)</p>\n<p><img src=\"start-approval-action.png\" alt=\"Approvals Action - Start and wait for an approval\"><span class=\"image-caption\">Approvals Action - Start and wait for an approval</span></p>\n<h3 id=\"Step-4-Condition\"><a href=\"#Step-4-Condition\" class=\"headerlink\" title=\"Step 4 - Condition\"></a>Step 4 - Condition</h3><p>Here we need to add <strong>Condition</strong> action to check if outcome of the response is approve or reject. And base on the outcome, we need to set the content approval status of the SharePoint list item.</p>\n<p><img src=\"conditon.png\" alt=\"Condition Action\"><span class=\"image-caption\">Condition Action</span></p>\n<p><img src=\"content-approval-status.png\" alt=\"Set Content Approval Status\"><span class=\"image-caption\">Set Content Approval Status</span></p>\n<h3 id=\"Step-5-Send-Outcome-as-an-email\"><a href=\"#Step-5-Send-Outcome-as-an-email\" class=\"headerlink\" title=\"Step 5 - Send Outcome as an email\"></a>Step 5 - Send Outcome as an email</h3><p>In this task, we need to send an outcome of the approval by email to submitter or prepare of the project. For this, we need to use <strong>Office 365 Outlook Action - Send an email</strong></p>\n<p><img src=\"send-email-action.png\" alt=\"Send an email action\"><span class=\"image-caption\">Send an email action</span></p>\n<p><em>Make sure to run Flow Checker to check for any errors or warnings</em></p>\n<p><img src=\"flow-checker.png\" alt=\"Flow checker\"><span class=\"image-caption\">Flow checker</span></p>\n<h2 id=\"Notification-Email-and-Approve-or-Reject-Actions\"><a href=\"#Notification-Email-and-Approve-or-Reject-Actions\" class=\"headerlink\" title=\"Notification Email and Approve or Reject Actions\"></a>Notification Email and Approve or Reject Actions</h2><p>This is how notification email looks like. As mentioned above, you can style body of the task using Markdown. </p>\n<p><img src=\"task-notification-email.png\" alt=\"Task notification email\"><span class=\"image-caption\">Task notification email</span></p>\n<p>one of the game changers for Flow is, you can simply approve or reject tasks directly from your email. You can also add additional comments. see below.</p>\n<p><img src=\"approve-reject-comments.png\" alt=\"Approve or reject outcome action\"><span class=\"image-caption\">Approve or reject outcome action</span></p>\n<p>Once task approved, here is a final email notification to submitter looks like.</p>\n<p><img src=\"confirmation-email.png\" alt=\"Task outcome email\"><span class=\"image-caption\">Task outcome email</span></p>\n<p>And associated  Project list is updated with the outcome </p>\n<p><img src=\"list-approver-response.png\" alt=\"Task outcome\"><span class=\"image-caption\">Task outcome</span></p>\n<p>This is very simple scenario of Approval process using Flow. You can build more complex scenario for example, adding multiple conditionally approvers based on outcome from the first approver etc. </p>\n<p>Hope you found this post useful!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>If you are looking to build an approval workflow using Microsoft Flow, then here are simple steps which will help you to create one.</p>\n<h3 id=\"Scenario\"><a href=\"#Scenario\" class=\"headerlink\" title=\"Scenario\"></a>Scenario</h3><p>For example, I have a SharePoint list called Projects and on creation of a new project i would like to run an approval workflow.</p>\n<p><img src=\"project-list.png\" alt=\"Project List\"></p>\n<p>Here are over all 5 steps which we are going to implement one by one for our approval workflow.</p>\n<p><img src=\"complete-flow-steps.png\" alt=\"Complete Flow Steps\"></p>\n<p>First of all, Create your workflow from blank template</p>\n<p><img src=\"flow-blank-template.png\" alt=\"Create Flow from Blank Template\"></p>\n<h3 id=\"Step-1-When-Item-Is-Created-or-Modified\"><a href=\"#Step-1-When-Item-Is-Created-or-Modified\" class=\"headerlink\" title=\"Step 1 - When Item Is Created or Modified\"></a>Step 1 - When Item Is Created or Modified</h3><p>Under SharePoint action, select SharePoint Trigger called <strong>When Item Is Created Or Modified</strong>. Add your site collection URL and select associated  list or library. In my case this will be a project list.</p>\n<p><em>If you cannot select your site collection URL from Site Address dropdown field, then you can click on <strong>Enter Custom Value</strong> option to add your site collection URL</em></p>\n<p><img src=\"item-created-modified.png\" alt=\"When Item Is Created Or Modified SharePoint Trigger\"></p>\n<h3 id=\"Step-2-Get-File-Metadata\"><a href=\"#Step-2-Get-File-Metadata\" class=\"headerlink\" title=\"Step 2 - Get File Metadata\"></a>Step 2 - Get File Metadata</h3><p>In this step, we need to grab the metadata of newly created SharePoint List Item. The reason we need this, we need to get ETAG, which we need in later steps.</p>\n<p><img src=\"get-file-metadata.png\" alt=\"SharePoint Action - Get File Metadata\"></p>\n<h3 id=\"Step-3-Start-and-wait-for-an-approval\"><a href=\"#Step-3-Start-and-wait-for-an-approval\" class=\"headerlink\" title=\"Step 3 - Start and wait for an approval\"></a>Step 3 - Start and wait for an approval</h3><p>In this step, add and configure, <strong>Start and wait for an approval</strong> action. It’s worth mentioning here that you can direclty add Markdown styles in Detail field. see below screenshot</p>\n<p><strong>Approval Type Field</strong>: You can select two options, 1- Everyone must approve 2- First to response. In this case, I will be selecting <em>Everyone must approve</em>. In rest of the fields, You can add dynamic data from associated list (In our case, It’s <strong>Projects</strong> list)</p>\n<p><img src=\"start-approval-action.png\" alt=\"Approvals Action - Start and wait for an approval\"></p>\n<h3 id=\"Step-4-Condition\"><a href=\"#Step-4-Condition\" class=\"headerlink\" title=\"Step 4 - Condition\"></a>Step 4 - Condition</h3><p>Here we need to add <strong>Condition</strong> action to check if outcome of the response is approve or reject. And base on the outcome, we need to set the content approval status of the SharePoint list item.</p>\n<p><img src=\"conditon.png\" alt=\"Condition Action\"></p>\n<p><img src=\"content-approval-status.png\" alt=\"Set Content Approval Status\"></p>\n<h3 id=\"Step-5-Send-Outcome-as-an-email\"><a href=\"#Step-5-Send-Outcome-as-an-email\" class=\"headerlink\" title=\"Step 5 - Send Outcome as an email\"></a>Step 5 - Send Outcome as an email</h3><p>In this task, we need to send an outcome of the approval by email to submitter or prepare of the project. For this, we need to use <strong>Office 365 Outlook Action - Send an email</strong></p>\n<p><img src=\"send-email-action.png\" alt=\"Send an email action\"></p>\n<p><em>Make sure to run Flow Checker to check for any errors or warnings</em></p>\n<p><img src=\"flow-checker.png\" alt=\"Flow checker\"></p>\n<h2 id=\"Notification-Email-and-Approve-or-Reject-Actions\"><a href=\"#Notification-Email-and-Approve-or-Reject-Actions\" class=\"headerlink\" title=\"Notification Email and Approve or Reject Actions\"></a>Notification Email and Approve or Reject Actions</h2><p>This is how notification email looks like. As mentioned above, you can style body of the task using Markdown. </p>\n<p><img src=\"task-notification-email.png\" alt=\"Task notification email\"></p>\n<p>one of the game changers for Flow is, you can simply approve or reject tasks directly from your email. You can also add additional comments. see below.</p>\n<p><img src=\"approve-reject-comments.png\" alt=\"Approve or reject outcome action\"></p>\n<p>Once task approved, here is a final email notification to submitter looks like.</p>\n<p><img src=\"confirmation-email.png\" alt=\"Task outcome email\"></p>\n<p>And associated  Project list is updated with the outcome </p>\n<p><img src=\"list-approver-response.png\" alt=\"Task outcome\"></p>\n<p>This is very simple scenario of Approval process using Flow. You can build more complex scenario for example, adding multiple conditionally approvers based on outcome from the first approver etc. </p>\n<p>Hope you found this post useful!</p>\n"},{"layout":"post","title":"Microsoft Teams Personal Tab Integration with Graph API using Single Sign-On","date":"2020-07-27T17:51:21.000Z","description":"Calling Microsoft Graph API from Teams Personal Tab using Single Sign-On (SSO) approach.","language":"English","summary":"Calling Microsoft Graph API from Microsoft Teams Personal Tab using Single Sign-On (SSO) approach.","img":"/images/post/access-graph-api-using-spfx-with-azurefunction.png","cover":true,"coverImg":"/images/postcover/postcover-3.jpg","_content":"\n# Develop Microsoft Teams Personal Tab using SSO\n\nThere are multiple options available to build Microsoft Teams app and access Microsoft Graph API.\n\nHere in this post, we are going to look into how to access Microsoft Graph API from Microsoft Teams Personal tab using Single Sign-On (SSO) approach instead of asking the user to authenticate interactively.\n\nHere are useful links which helped me to understand and implement this scenario. \n\n[Contact Group Lookup App](https://docs.microsoft.com/en-us/microsoftteams/platform/samples/app-templates#contact-group-lookup-)\n\n[How Single Sign-On (SSO) works in Teams](https://docs.microsoft.com/en-us/microsoftteams/platform/tabs/how-to/authentication/auth-aad-sso) \n\nI am using the following set of tools to build this example.\n\n> 1.  ASP.Net Core 3.1\n> 2.  Web Application with React App Template.\n> 3.  Ngrok for testing an app in Microsoft Teams\n\n\n## Final Output\n\n![Final output](final-output.png)\n\n\n\n<br>\n\nLet's get started\n\n## 1. Register an Azure AD Application\n\nHere are high-level steps what we need to do as part Azure AD Application registration\n\n1. Register an Azure AD APP\n2. Get your Azure AD Application ID.\n3. Specify the permissions that your application needs for the Azure AD endpoint. In the context of this post, we require Microsoft Graph API **User.Read** delegated permissions\n4. Grant permissions for Teams desktop, web, and mobile applications.\n5. Pre-authorize Teams by selecting the Add a scope button and in the panel that opens, enter access_as_user as the Scope name\n6. Generate a Client Secret\n\n> For detail steps please follow this link, [Detail steps for Azure AD App Registration for SSO](https://docs.microsoft.com/en-us/microsoftteams/platform/tabs/how-to/authentication/auth-aad-sso#steps)\n\nAfter Azure AD App registration, add the following information within your ASP.net Core **appsettings.json** file\n\n![appsettings.json - Azure AD Auth Settings](azure-ad-auth.jpg)\n\n## 2. Creating a Manifest File\n\nI am not going into detail about how to create a manifest file. Here is a link which describes Manifest schema for Microsoft Teams App.\n\n[Microsoft Teams App Manifest Schema](https://docs.microsoft.com/en-us/microsoftteams/platform/resources/schema/manifest-schema)\n\nIn the context of this post. we only need to add **Static Tab configurations**\n\n> Here is link of [Manifest](https://github.com/ejazhussain/Teams-PersonalApp-SSO/blob/master/Teams.PA.Graph.UserProfile/Teams.PA.Graph.UserProfile/Manifest/manifest.json) file part of this project. Update manifest file as per your envrionment.\n\n#### Creating Teams app package\n\nEdit your project file. For example, in this project, it will be ***Teams.PA.Graph.UserProfile.csproj***. Add the following code just before closing project ```</Project>``` tag.\n\nOn successful build of your project, following code snippet will automatically create teams app package in zip format. You can upload this package directly to Microsoft Teams.\n\n<script src=\"https://gist.github.com/ejazhussain/178e7cd3544986ff121d4db34d441b20.js\"></script>\n\n\n## 3. Setup Ngrok\n\nIn my case, I am using a reserved domain for ngrok. But If you are using a free plan then you will get a randomly generated domain.\n\nRun following commands according to ngrok plan. [More information about ngrok](https://ngrok.com/)\n\n**Free Plan**\n\n```\nngrok http https://localhost:44399 -host-header=\"localhost:44399\"\n```\n\n**Pro Plan**\n\n```\nngrok http https://localhost:44376 -host-header=\"localhost:44399\" -subdomain=helloteamsapp.com\n```\n\n![ngrok](ngrok.png)\n\nOnce you have ngrok up and running, Make sure to update **[Application ID URI]** with correct ngrok domain in Azure AD App. See below screenshot\n\n![Application ID URI in Azure AD App](ApplicationIDURI.png)\n\n> At this stage, we have done all configurations related steps. Now let's do some coding\n\n## 4. React SPA (Single Page Application) Implementation\n\nLet's look at SPA (Single Page App) first.\n\nInstall following two npm packages\n\n```\nnpm i @microsoft/teams-js\nnpm i axios\n```\n\nFirst of all, We are going to get Microsoft Team context and then get an ID token using **[GetAuthToken]** method. see below implementation.\n\n> <i class=\"fa fa-info-circle page-section-info-icon-info\"></i><br/>You cannot use ID token to call direclty microsoft graph api. You have to call **[On Behalf Of Flow]** to get access token using ID token. To see what's in your ID token. Go to [jwt.ms](https://jwt.ms/).\n\nOnce we got an ID token, we need to call a method called GetUserProfile in User controller **/api/user/GetUserProfile** and pass ID token as a parameter.\n\n```Javascript\n\nimport React, { Component } from \"react\";\nimport * as microsoftTeams from \"@microsoft/teams-js\";\nimport Axios from \"axios\";\n\nexport class UserProfile extends Component {\n  static displayName = UserProfile.name;\n\n  constructor(props) {\n    super(props);\n    this.state = { userInfo: [], loading: true };\n  }\n\ncomponentDidMount() {\n    microsoftTeams.initialize();\n    microsoftTeams.getContext((context) => {\n      microsoftTeams.authentication.getAuthToken({\n        successCallback: (token) => {\n          this.populateUserProfileInfo(token);\n          microsoftTeams.appInitialization.notifySuccess();\n        },\n        failureCallback: (error) => {\n          microsoftTeams.appInitialization.notifyFailure({\n            reason: microsoftTeams.appInitialization.FailedReason.AuthFailed,\n            error,\n          });\n        },\n        resources: [\n          \"api://helloteamsapp.com.ngrok.io/454c9845-4c41-4300-9846-ea009785ab8e\",\n        ],\n      });\n    });\n  }\n\n  static renderUserInfo(user) {\n    debugger;\n    return (\n      <>\n        <ul className=\"list-group\">\n          <li className=\"list-group-item active\">{user.displayName}</li>\n          <li className=\"list-group-item\">{user.jobTitle}</li>\n          <li className=\"list-group-item\">{user.email}</li>\n          <li className=\"list-group-item\">{user.officeLocation}</li>\n          <li className=\"list-group-item\">{user.mobilePhone}</li>\n        </ul>\n      </>\n    );\n  }\n\n  render() {\n    let contents = this.state.loading ? (\n      <p>\n        <em>Loading...</em>\n      </p>\n    ) : (\n      UserProfile.renderUserInfo(this.state.userInfo)\n    );\n\n    return (\n      <div>\n        <h1 id=\"tabelLabel\">User Profile Info</h1>\n        <p>\n          This component demonstrates fetching data from the Microsoft Graph\n          using Single Sign-On approach.\n        </p>\n        {contents}\n      </div>\n    );\n  }\n\n  async populateUserProfileInfo(token) {\n    const response = await Axios.get(\"/api/user/GetUserProfile\", {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    const data = response.data;\n    debugger;\n    this.setState({ userInfo: data, loading: false });\n  }\n}\n```\n\n## 5. On Behalf Of Flow Implementation\n\nFirst of all, Install the following two packages.\n\n```\nMicrosoft.Identity.Client\nMicrosoft.AspNetCore.Authentication.JwtBearer\n```\n\n### Secure API Calls\n\nWe need to make sure that only authorized call can be made to our API. To achieve this, We need to add JWT bearer authentication Scheme to startup class under **[ConfigureServices]** method. See below code snippet.\n\nIn JWT bearer authentication Scheme, we are checking if ID token contains correct Client ID and Application ID URI which we have configured in our Azure AD Application.\n\n<script src=\"https://gist.github.com/ejazhussain/0b4f729d5e85300f009535c8f0ad71e0.js\"></script>\n\n### Token Acquisition Service\n\nIn **Token Acquisition Service**, we are going to perform the following tasks\n\n1. Retrieve ID Token from the request\n2. Retrieve Graph Scopes from **[appsettings.json]** file\n3. We declare the type of the assertion we use for asserting the current user, in this case, a JSON Web Token (JWT).\n4. Create a Confidential Client Application instance. [Click here for more info](https://github.com/AzureAD/microsoft-authentication-library-for-dotnet/wiki/Client-Applications#public-client-and-confidential-client-applications)\n5. Get access token using **[AcquireTokenOnBehalfOf]** method.\n\nSee below *GetOnBehalfAccessTokenAsync* method in **Token Acquisition Service** \n\n<script src=\"https://gist.github.com/ejazhussain/a89166fb51971fd505d5f290488bc076.js\"></script>\n\n### Graph Service\n\nAt this stage, we have got access token which we can use to call Microsoft Graph API to get information about the current user.\n\nsee below code snippet for Graph Service which implements one method called *GetUserProfileAsync*\n<script src=\"https://gist.github.com/ejazhussain/d84ce456f313e7dfa021c3a63c64201d.js\"></script>\n\n\n## 6. Source Code\n\n<a href=\"https://github.com/ejazhussain/Teams-PersonalApp-SSO\" class=\"is-primary button is-medium github\">\n    <span class=\"icon is-medium\">\n      <i class=\"fab fa-github\"></i>\n    </span>\n    <span>Explore solution on GitHub</span>\n</a>","source":"_posts/msteams-staticapp-sso.md","raw":"---\nlayout: post\ntitle: Microsoft Teams Personal Tab Integration with Graph API using Single Sign-On\ndate: 2020-07-27 18:51:21\ndescription: Calling Microsoft Graph API from Teams Personal Tab using Single Sign-On (SSO) approach.\nlanguage: English\ntags:\n  - Teams Personal Tab\n  - Microsoft Graph API\ncategory: Microsoft Teams\nsummary: Calling Microsoft Graph API from Microsoft Teams Personal Tab using Single Sign-On (SSO) approach.\nimg: /images/post/access-graph-api-using-spfx-with-azurefunction.png\ncover: true\ncoverImg: /images/postcover/postcover-3.jpg\n---\n\n# Develop Microsoft Teams Personal Tab using SSO\n\nThere are multiple options available to build Microsoft Teams app and access Microsoft Graph API.\n\nHere in this post, we are going to look into how to access Microsoft Graph API from Microsoft Teams Personal tab using Single Sign-On (SSO) approach instead of asking the user to authenticate interactively.\n\nHere are useful links which helped me to understand and implement this scenario. \n\n[Contact Group Lookup App](https://docs.microsoft.com/en-us/microsoftteams/platform/samples/app-templates#contact-group-lookup-)\n\n[How Single Sign-On (SSO) works in Teams](https://docs.microsoft.com/en-us/microsoftteams/platform/tabs/how-to/authentication/auth-aad-sso) \n\nI am using the following set of tools to build this example.\n\n> 1.  ASP.Net Core 3.1\n> 2.  Web Application with React App Template.\n> 3.  Ngrok for testing an app in Microsoft Teams\n\n\n## Final Output\n\n![Final output](final-output.png)\n\n\n\n<br>\n\nLet's get started\n\n## 1. Register an Azure AD Application\n\nHere are high-level steps what we need to do as part Azure AD Application registration\n\n1. Register an Azure AD APP\n2. Get your Azure AD Application ID.\n3. Specify the permissions that your application needs for the Azure AD endpoint. In the context of this post, we require Microsoft Graph API **User.Read** delegated permissions\n4. Grant permissions for Teams desktop, web, and mobile applications.\n5. Pre-authorize Teams by selecting the Add a scope button and in the panel that opens, enter access_as_user as the Scope name\n6. Generate a Client Secret\n\n> For detail steps please follow this link, [Detail steps for Azure AD App Registration for SSO](https://docs.microsoft.com/en-us/microsoftteams/platform/tabs/how-to/authentication/auth-aad-sso#steps)\n\nAfter Azure AD App registration, add the following information within your ASP.net Core **appsettings.json** file\n\n![appsettings.json - Azure AD Auth Settings](azure-ad-auth.jpg)\n\n## 2. Creating a Manifest File\n\nI am not going into detail about how to create a manifest file. Here is a link which describes Manifest schema for Microsoft Teams App.\n\n[Microsoft Teams App Manifest Schema](https://docs.microsoft.com/en-us/microsoftteams/platform/resources/schema/manifest-schema)\n\nIn the context of this post. we only need to add **Static Tab configurations**\n\n> Here is link of [Manifest](https://github.com/ejazhussain/Teams-PersonalApp-SSO/blob/master/Teams.PA.Graph.UserProfile/Teams.PA.Graph.UserProfile/Manifest/manifest.json) file part of this project. Update manifest file as per your envrionment.\n\n#### Creating Teams app package\n\nEdit your project file. For example, in this project, it will be ***Teams.PA.Graph.UserProfile.csproj***. Add the following code just before closing project ```</Project>``` tag.\n\nOn successful build of your project, following code snippet will automatically create teams app package in zip format. You can upload this package directly to Microsoft Teams.\n\n<script src=\"https://gist.github.com/ejazhussain/178e7cd3544986ff121d4db34d441b20.js\"></script>\n\n\n## 3. Setup Ngrok\n\nIn my case, I am using a reserved domain for ngrok. But If you are using a free plan then you will get a randomly generated domain.\n\nRun following commands according to ngrok plan. [More information about ngrok](https://ngrok.com/)\n\n**Free Plan**\n\n```\nngrok http https://localhost:44399 -host-header=\"localhost:44399\"\n```\n\n**Pro Plan**\n\n```\nngrok http https://localhost:44376 -host-header=\"localhost:44399\" -subdomain=helloteamsapp.com\n```\n\n![ngrok](ngrok.png)\n\nOnce you have ngrok up and running, Make sure to update **[Application ID URI]** with correct ngrok domain in Azure AD App. See below screenshot\n\n![Application ID URI in Azure AD App](ApplicationIDURI.png)\n\n> At this stage, we have done all configurations related steps. Now let's do some coding\n\n## 4. React SPA (Single Page Application) Implementation\n\nLet's look at SPA (Single Page App) first.\n\nInstall following two npm packages\n\n```\nnpm i @microsoft/teams-js\nnpm i axios\n```\n\nFirst of all, We are going to get Microsoft Team context and then get an ID token using **[GetAuthToken]** method. see below implementation.\n\n> <i class=\"fa fa-info-circle page-section-info-icon-info\"></i><br/>You cannot use ID token to call direclty microsoft graph api. You have to call **[On Behalf Of Flow]** to get access token using ID token. To see what's in your ID token. Go to [jwt.ms](https://jwt.ms/).\n\nOnce we got an ID token, we need to call a method called GetUserProfile in User controller **/api/user/GetUserProfile** and pass ID token as a parameter.\n\n```Javascript\n\nimport React, { Component } from \"react\";\nimport * as microsoftTeams from \"@microsoft/teams-js\";\nimport Axios from \"axios\";\n\nexport class UserProfile extends Component {\n  static displayName = UserProfile.name;\n\n  constructor(props) {\n    super(props);\n    this.state = { userInfo: [], loading: true };\n  }\n\ncomponentDidMount() {\n    microsoftTeams.initialize();\n    microsoftTeams.getContext((context) => {\n      microsoftTeams.authentication.getAuthToken({\n        successCallback: (token) => {\n          this.populateUserProfileInfo(token);\n          microsoftTeams.appInitialization.notifySuccess();\n        },\n        failureCallback: (error) => {\n          microsoftTeams.appInitialization.notifyFailure({\n            reason: microsoftTeams.appInitialization.FailedReason.AuthFailed,\n            error,\n          });\n        },\n        resources: [\n          \"api://helloteamsapp.com.ngrok.io/454c9845-4c41-4300-9846-ea009785ab8e\",\n        ],\n      });\n    });\n  }\n\n  static renderUserInfo(user) {\n    debugger;\n    return (\n      <>\n        <ul className=\"list-group\">\n          <li className=\"list-group-item active\">{user.displayName}</li>\n          <li className=\"list-group-item\">{user.jobTitle}</li>\n          <li className=\"list-group-item\">{user.email}</li>\n          <li className=\"list-group-item\">{user.officeLocation}</li>\n          <li className=\"list-group-item\">{user.mobilePhone}</li>\n        </ul>\n      </>\n    );\n  }\n\n  render() {\n    let contents = this.state.loading ? (\n      <p>\n        <em>Loading...</em>\n      </p>\n    ) : (\n      UserProfile.renderUserInfo(this.state.userInfo)\n    );\n\n    return (\n      <div>\n        <h1 id=\"tabelLabel\">User Profile Info</h1>\n        <p>\n          This component demonstrates fetching data from the Microsoft Graph\n          using Single Sign-On approach.\n        </p>\n        {contents}\n      </div>\n    );\n  }\n\n  async populateUserProfileInfo(token) {\n    const response = await Axios.get(\"/api/user/GetUserProfile\", {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    const data = response.data;\n    debugger;\n    this.setState({ userInfo: data, loading: false });\n  }\n}\n```\n\n## 5. On Behalf Of Flow Implementation\n\nFirst of all, Install the following two packages.\n\n```\nMicrosoft.Identity.Client\nMicrosoft.AspNetCore.Authentication.JwtBearer\n```\n\n### Secure API Calls\n\nWe need to make sure that only authorized call can be made to our API. To achieve this, We need to add JWT bearer authentication Scheme to startup class under **[ConfigureServices]** method. See below code snippet.\n\nIn JWT bearer authentication Scheme, we are checking if ID token contains correct Client ID and Application ID URI which we have configured in our Azure AD Application.\n\n<script src=\"https://gist.github.com/ejazhussain/0b4f729d5e85300f009535c8f0ad71e0.js\"></script>\n\n### Token Acquisition Service\n\nIn **Token Acquisition Service**, we are going to perform the following tasks\n\n1. Retrieve ID Token from the request\n2. Retrieve Graph Scopes from **[appsettings.json]** file\n3. We declare the type of the assertion we use for asserting the current user, in this case, a JSON Web Token (JWT).\n4. Create a Confidential Client Application instance. [Click here for more info](https://github.com/AzureAD/microsoft-authentication-library-for-dotnet/wiki/Client-Applications#public-client-and-confidential-client-applications)\n5. Get access token using **[AcquireTokenOnBehalfOf]** method.\n\nSee below *GetOnBehalfAccessTokenAsync* method in **Token Acquisition Service** \n\n<script src=\"https://gist.github.com/ejazhussain/a89166fb51971fd505d5f290488bc076.js\"></script>\n\n### Graph Service\n\nAt this stage, we have got access token which we can use to call Microsoft Graph API to get information about the current user.\n\nsee below code snippet for Graph Service which implements one method called *GetUserProfileAsync*\n<script src=\"https://gist.github.com/ejazhussain/d84ce456f313e7dfa021c3a63c64201d.js\"></script>\n\n\n## 6. Source Code\n\n<a href=\"https://github.com/ejazhussain/Teams-PersonalApp-SSO\" class=\"is-primary button is-medium github\">\n    <span class=\"icon is-medium\">\n      <i class=\"fab fa-github\"></i>\n    </span>\n    <span>Explore solution on GitHub</span>\n</a>","slug":"msteams-staticapp-sso","published":1,"updated":"2020-08-01T16:46:33.758Z","comments":1,"photos":[],"link":"","_id":"ckdbwg6o0002oioet4iptehde","content":"<h1 id=\"Develop-Microsoft-Teams-Personal-Tab-using-SSO\"><a href=\"#Develop-Microsoft-Teams-Personal-Tab-using-SSO\" class=\"headerlink\" title=\"Develop Microsoft Teams Personal Tab using SSO\"></a>Develop Microsoft Teams Personal Tab using SSO</h1><p>There are multiple options available to build Microsoft Teams app and access Microsoft Graph API.</p>\n<p>Here in this post, we are going to look into how to access Microsoft Graph API from Microsoft Teams Personal tab using Single Sign-On (SSO) approach instead of asking the user to authenticate interactively.</p>\n<p>Here are useful links which helped me to understand and implement this scenario. </p>\n<p><a href=\"https://docs.microsoft.com/en-us/microsoftteams/platform/samples/app-templates#contact-group-lookup-\" target=\"_blank\" rel=\"noopener\">Contact Group Lookup App</a></p>\n<p><a href=\"https://docs.microsoft.com/en-us/microsoftteams/platform/tabs/how-to/authentication/auth-aad-sso\" target=\"_blank\" rel=\"noopener\">How Single Sign-On (SSO) works in Teams</a> </p>\n<p>I am using the following set of tools to build this example.</p>\n<blockquote>\n<ol>\n<li>ASP.Net Core 3.1</li>\n<li>Web Application with React App Template.</li>\n<li>Ngrok for testing an app in Microsoft Teams</li>\n</ol>\n</blockquote>\n<h2 id=\"Final-Output\"><a href=\"#Final-Output\" class=\"headerlink\" title=\"Final Output\"></a>Final Output</h2><p><img src=\"final-output.png\" alt=\"Final output\"><span class=\"image-caption\">Final output</span></p>\n<br>\n\n<p>Let’s get started</p>\n<h2 id=\"1-Register-an-Azure-AD-Application\"><a href=\"#1-Register-an-Azure-AD-Application\" class=\"headerlink\" title=\"1. Register an Azure AD Application\"></a>1. Register an Azure AD Application</h2><p>Here are high-level steps what we need to do as part Azure AD Application registration</p>\n<ol>\n<li>Register an Azure AD APP</li>\n<li>Get your Azure AD Application ID.</li>\n<li>Specify the permissions that your application needs for the Azure AD endpoint. In the context of this post, we require Microsoft Graph API <strong>User.Read</strong> delegated permissions</li>\n<li>Grant permissions for Teams desktop, web, and mobile applications.</li>\n<li>Pre-authorize Teams by selecting the Add a scope button and in the panel that opens, enter access_as_user as the Scope name</li>\n<li>Generate a Client Secret</li>\n</ol>\n<blockquote>\n<p>For detail steps please follow this link, <a href=\"https://docs.microsoft.com/en-us/microsoftteams/platform/tabs/how-to/authentication/auth-aad-sso#steps\" target=\"_blank\" rel=\"noopener\">Detail steps for Azure AD App Registration for SSO</a></p>\n</blockquote>\n<p>After Azure AD App registration, add the following information within your ASP.net Core <strong>appsettings.json</strong> file</p>\n<p><img src=\"azure-ad-auth.jpg\" alt=\"appsettings.json - Azure AD Auth Settings\"><span class=\"image-caption\">appsettings.json - Azure AD Auth Settings</span></p>\n<h2 id=\"2-Creating-a-Manifest-File\"><a href=\"#2-Creating-a-Manifest-File\" class=\"headerlink\" title=\"2. Creating a Manifest File\"></a>2. Creating a Manifest File</h2><p>I am not going into detail about how to create a manifest file. Here is a link which describes Manifest schema for Microsoft Teams App.</p>\n<p><a href=\"https://docs.microsoft.com/en-us/microsoftteams/platform/resources/schema/manifest-schema\" target=\"_blank\" rel=\"noopener\">Microsoft Teams App Manifest Schema</a></p>\n<p>In the context of this post. we only need to add <strong>Static Tab configurations</strong></p>\n<blockquote>\n<p>Here is link of <a href=\"https://github.com/ejazhussain/Teams-PersonalApp-SSO/blob/master/Teams.PA.Graph.UserProfile/Teams.PA.Graph.UserProfile/Manifest/manifest.json\" target=\"_blank\" rel=\"noopener\">Manifest</a> file part of this project. Update manifest file as per your envrionment.</p>\n</blockquote>\n<h4 id=\"Creating-Teams-app-package\"><a href=\"#Creating-Teams-app-package\" class=\"headerlink\" title=\"Creating Teams app package\"></a>Creating Teams app package</h4><p>Edit your project file. For example, in this project, it will be <strong><em>Teams.PA.Graph.UserProfile.csproj</em></strong>. Add the following code just before closing project <code>&lt;/Project&gt;</code> tag.</p>\n<p>On successful build of your project, following code snippet will automatically create teams app package in zip format. You can upload this package directly to Microsoft Teams.</p>\n<script src=\"https://gist.github.com/ejazhussain/178e7cd3544986ff121d4db34d441b20.js\"></script>\n\n\n<h2 id=\"3-Setup-Ngrok\"><a href=\"#3-Setup-Ngrok\" class=\"headerlink\" title=\"3. Setup Ngrok\"></a>3. Setup Ngrok</h2><p>In my case, I am using a reserved domain for ngrok. But If you are using a free plan then you will get a randomly generated domain.</p>\n<p>Run following commands according to ngrok plan. <a href=\"https://ngrok.com/\" target=\"_blank\" rel=\"noopener\">More information about ngrok</a></p>\n<p><strong>Free Plan</strong></p>\n<pre><code>ngrok http https://localhost:44399 -host-header=&quot;localhost:44399&quot;</code></pre><p><strong>Pro Plan</strong></p>\n<pre><code>ngrok http https://localhost:44376 -host-header=&quot;localhost:44399&quot; -subdomain=helloteamsapp.com</code></pre><p><img src=\"ngrok.png\" alt=\"ngrok\"><span class=\"image-caption\">ngrok</span></p>\n<p>Once you have ngrok up and running, Make sure to update <strong>[Application ID URI]</strong> with correct ngrok domain in Azure AD App. See below screenshot</p>\n<p><img src=\"ApplicationIDURI.png\" alt=\"Application ID URI in Azure AD App\"><span class=\"image-caption\">Application ID URI in Azure AD App</span></p>\n<blockquote>\n<p>At this stage, we have done all configurations related steps. Now let’s do some coding</p>\n</blockquote>\n<h2 id=\"4-React-SPA-Single-Page-Application-Implementation\"><a href=\"#4-React-SPA-Single-Page-Application-Implementation\" class=\"headerlink\" title=\"4. React SPA (Single Page Application) Implementation\"></a>4. React SPA (Single Page Application) Implementation</h2><p>Let’s look at SPA (Single Page App) first.</p>\n<p>Install following two npm packages</p>\n<pre><code>npm i @microsoft/teams-js\nnpm i axios</code></pre><p>First of all, We are going to get Microsoft Team context and then get an ID token using <strong>[GetAuthToken]</strong> method. see below implementation.</p>\n<blockquote>\n<p><i class=\"fa fa-info-circle page-section-info-icon-info\"></i><br>You cannot use ID token to call direclty microsoft graph api. You have to call <strong>[On Behalf Of Flow]</strong> to get access token using ID token. To see what’s in your ID token. Go to <a href=\"https://jwt.ms/\" target=\"_blank\" rel=\"noopener\">jwt.ms</a>.</p>\n</blockquote>\n<p>Once we got an ID token, we need to call a method called GetUserProfile in User controller <strong>/api/user/GetUserProfile</strong> and pass ID token as a parameter.</p>\n<pre class=\"line-numbers language-Javascript\"><code class=\"language-Javascript\">\nimport React, { Component } from \"react\";\nimport * as microsoftTeams from \"@microsoft/teams-js\";\nimport Axios from \"axios\";\n\nexport class UserProfile extends Component {\n  static displayName = UserProfile.name;\n\n  constructor(props) {\n    super(props);\n    this.state = { userInfo: [], loading: true };\n  }\n\ncomponentDidMount() {\n    microsoftTeams.initialize();\n    microsoftTeams.getContext((context) => {\n      microsoftTeams.authentication.getAuthToken({\n        successCallback: (token) => {\n          this.populateUserProfileInfo(token);\n          microsoftTeams.appInitialization.notifySuccess();\n        },\n        failureCallback: (error) => {\n          microsoftTeams.appInitialization.notifyFailure({\n            reason: microsoftTeams.appInitialization.FailedReason.AuthFailed,\n            error,\n          });\n        },\n        resources: [\n          \"api://helloteamsapp.com.ngrok.io/454c9845-4c41-4300-9846-ea009785ab8e\",\n        ],\n      });\n    });\n  }\n\n  static renderUserInfo(user) {\n    debugger;\n    return (\n      <>\n        <ul className=\"list-group\">\n          <li className=\"list-group-item active\">{user.displayName}</li>\n          <li className=\"list-group-item\">{user.jobTitle}</li>\n          <li className=\"list-group-item\">{user.email}</li>\n          <li className=\"list-group-item\">{user.officeLocation}</li>\n          <li className=\"list-group-item\">{user.mobilePhone}</li>\n        </ul>\n      </>\n    );\n  }\n\n  render() {\n    let contents = this.state.loading ? (\n      <p>\n        <em>Loading...</em>\n      </p>\n    ) : (\n      UserProfile.renderUserInfo(this.state.userInfo)\n    );\n\n    return (\n      <div>\n        <h1 id=\"tabelLabel\">User Profile Info</h1>\n        <p>\n          This component demonstrates fetching data from the Microsoft Graph\n          using Single Sign-On approach.\n        </p>\n        {contents}\n      </div>\n    );\n  }\n\n  async populateUserProfileInfo(token) {\n    const response = await Axios.get(\"/api/user/GetUserProfile\", {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    const data = response.data;\n    debugger;\n    this.setState({ userInfo: data, loading: false });\n  }\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"5-On-Behalf-Of-Flow-Implementation\"><a href=\"#5-On-Behalf-Of-Flow-Implementation\" class=\"headerlink\" title=\"5. On Behalf Of Flow Implementation\"></a>5. On Behalf Of Flow Implementation</h2><p>First of all, Install the following two packages.</p>\n<pre><code>Microsoft.Identity.Client\nMicrosoft.AspNetCore.Authentication.JwtBearer</code></pre><h3 id=\"Secure-API-Calls\"><a href=\"#Secure-API-Calls\" class=\"headerlink\" title=\"Secure API Calls\"></a>Secure API Calls</h3><p>We need to make sure that only authorized call can be made to our API. To achieve this, We need to add JWT bearer authentication Scheme to startup class under <strong>[ConfigureServices]</strong> method. See below code snippet.</p>\n<p>In JWT bearer authentication Scheme, we are checking if ID token contains correct Client ID and Application ID URI which we have configured in our Azure AD Application.</p>\n<script src=\"https://gist.github.com/ejazhussain/0b4f729d5e85300f009535c8f0ad71e0.js\"></script>\n\n<h3 id=\"Token-Acquisition-Service\"><a href=\"#Token-Acquisition-Service\" class=\"headerlink\" title=\"Token Acquisition Service\"></a>Token Acquisition Service</h3><p>In <strong>Token Acquisition Service</strong>, we are going to perform the following tasks</p>\n<ol>\n<li>Retrieve ID Token from the request</li>\n<li>Retrieve Graph Scopes from <strong>[appsettings.json]</strong> file</li>\n<li>We declare the type of the assertion we use for asserting the current user, in this case, a JSON Web Token (JWT).</li>\n<li>Create a Confidential Client Application instance. <a href=\"https://github.com/AzureAD/microsoft-authentication-library-for-dotnet/wiki/Client-Applications#public-client-and-confidential-client-applications\" target=\"_blank\" rel=\"noopener\">Click here for more info</a></li>\n<li>Get access token using <strong>[AcquireTokenOnBehalfOf]</strong> method.</li>\n</ol>\n<p>See below <em>GetOnBehalfAccessTokenAsync</em> method in <strong>Token Acquisition Service</strong> </p>\n<script src=\"https://gist.github.com/ejazhussain/a89166fb51971fd505d5f290488bc076.js\"></script>\n\n<h3 id=\"Graph-Service\"><a href=\"#Graph-Service\" class=\"headerlink\" title=\"Graph Service\"></a>Graph Service</h3><p>At this stage, we have got access token which we can use to call Microsoft Graph API to get information about the current user.</p>\n<p>see below code snippet for Graph Service which implements one method called <em>GetUserProfileAsync</em></p>\n<script src=\"https://gist.github.com/ejazhussain/d84ce456f313e7dfa021c3a63c64201d.js\"></script>\n\n\n<h2 id=\"6-Source-Code\"><a href=\"#6-Source-Code\" class=\"headerlink\" title=\"6. Source Code\"></a>6. Source Code</h2><a href=\"https://github.com/ejazhussain/Teams-PersonalApp-SSO\" class=\"is-primary button is-medium github\" target=\"_blank\" rel=\"noopener\">\n    <span class=\"icon is-medium\">\n      <i class=\"fab fa-github\"></i>\n    </span>\n    <span>Explore solution on GitHub</span>\n</a>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Develop-Microsoft-Teams-Personal-Tab-using-SSO\"><a href=\"#Develop-Microsoft-Teams-Personal-Tab-using-SSO\" class=\"headerlink\" title=\"Develop Microsoft Teams Personal Tab using SSO\"></a>Develop Microsoft Teams Personal Tab using SSO</h1><p>There are multiple options available to build Microsoft Teams app and access Microsoft Graph API.</p>\n<p>Here in this post, we are going to look into how to access Microsoft Graph API from Microsoft Teams Personal tab using Single Sign-On (SSO) approach instead of asking the user to authenticate interactively.</p>\n<p>Here are useful links which helped me to understand and implement this scenario. </p>\n<p><a href=\"https://docs.microsoft.com/en-us/microsoftteams/platform/samples/app-templates#contact-group-lookup-\" target=\"_blank\" rel=\"noopener\">Contact Group Lookup App</a></p>\n<p><a href=\"https://docs.microsoft.com/en-us/microsoftteams/platform/tabs/how-to/authentication/auth-aad-sso\" target=\"_blank\" rel=\"noopener\">How Single Sign-On (SSO) works in Teams</a> </p>\n<p>I am using the following set of tools to build this example.</p>\n<blockquote>\n<ol>\n<li>ASP.Net Core 3.1</li>\n<li>Web Application with React App Template.</li>\n<li>Ngrok for testing an app in Microsoft Teams</li>\n</ol>\n</blockquote>\n<h2 id=\"Final-Output\"><a href=\"#Final-Output\" class=\"headerlink\" title=\"Final Output\"></a>Final Output</h2><p><img src=\"final-output.png\" alt=\"Final output\"></p>\n<br>\n\n<p>Let’s get started</p>\n<h2 id=\"1-Register-an-Azure-AD-Application\"><a href=\"#1-Register-an-Azure-AD-Application\" class=\"headerlink\" title=\"1. Register an Azure AD Application\"></a>1. Register an Azure AD Application</h2><p>Here are high-level steps what we need to do as part Azure AD Application registration</p>\n<ol>\n<li>Register an Azure AD APP</li>\n<li>Get your Azure AD Application ID.</li>\n<li>Specify the permissions that your application needs for the Azure AD endpoint. In the context of this post, we require Microsoft Graph API <strong>User.Read</strong> delegated permissions</li>\n<li>Grant permissions for Teams desktop, web, and mobile applications.</li>\n<li>Pre-authorize Teams by selecting the Add a scope button and in the panel that opens, enter access_as_user as the Scope name</li>\n<li>Generate a Client Secret</li>\n</ol>\n<blockquote>\n<p>For detail steps please follow this link, <a href=\"https://docs.microsoft.com/en-us/microsoftteams/platform/tabs/how-to/authentication/auth-aad-sso#steps\" target=\"_blank\" rel=\"noopener\">Detail steps for Azure AD App Registration for SSO</a></p>\n</blockquote>\n<p>After Azure AD App registration, add the following information within your ASP.net Core <strong>appsettings.json</strong> file</p>\n<p><img src=\"azure-ad-auth.jpg\" alt=\"appsettings.json - Azure AD Auth Settings\"></p>\n<h2 id=\"2-Creating-a-Manifest-File\"><a href=\"#2-Creating-a-Manifest-File\" class=\"headerlink\" title=\"2. Creating a Manifest File\"></a>2. Creating a Manifest File</h2><p>I am not going into detail about how to create a manifest file. Here is a link which describes Manifest schema for Microsoft Teams App.</p>\n<p><a href=\"https://docs.microsoft.com/en-us/microsoftteams/platform/resources/schema/manifest-schema\" target=\"_blank\" rel=\"noopener\">Microsoft Teams App Manifest Schema</a></p>\n<p>In the context of this post. we only need to add <strong>Static Tab configurations</strong></p>\n<blockquote>\n<p>Here is link of <a href=\"https://github.com/ejazhussain/Teams-PersonalApp-SSO/blob/master/Teams.PA.Graph.UserProfile/Teams.PA.Graph.UserProfile/Manifest/manifest.json\" target=\"_blank\" rel=\"noopener\">Manifest</a> file part of this project. Update manifest file as per your envrionment.</p>\n</blockquote>\n<h4 id=\"Creating-Teams-app-package\"><a href=\"#Creating-Teams-app-package\" class=\"headerlink\" title=\"Creating Teams app package\"></a>Creating Teams app package</h4><p>Edit your project file. For example, in this project, it will be <strong><em>Teams.PA.Graph.UserProfile.csproj</em></strong>. Add the following code just before closing project <code>&lt;/Project&gt;</code> tag.</p>\n<p>On successful build of your project, following code snippet will automatically create teams app package in zip format. You can upload this package directly to Microsoft Teams.</p>\n<script src=\"https://gist.github.com/ejazhussain/178e7cd3544986ff121d4db34d441b20.js\"></script>\n\n\n<h2 id=\"3-Setup-Ngrok\"><a href=\"#3-Setup-Ngrok\" class=\"headerlink\" title=\"3. Setup Ngrok\"></a>3. Setup Ngrok</h2><p>In my case, I am using a reserved domain for ngrok. But If you are using a free plan then you will get a randomly generated domain.</p>\n<p>Run following commands according to ngrok plan. <a href=\"https://ngrok.com/\" target=\"_blank\" rel=\"noopener\">More information about ngrok</a></p>\n<p><strong>Free Plan</strong></p>\n<pre><code>ngrok http https://localhost:44399 -host-header=&quot;localhost:44399&quot;</code></pre><p><strong>Pro Plan</strong></p>\n<pre><code>ngrok http https://localhost:44376 -host-header=&quot;localhost:44399&quot; -subdomain=helloteamsapp.com</code></pre><p><img src=\"ngrok.png\" alt=\"ngrok\"></p>\n<p>Once you have ngrok up and running, Make sure to update <strong>[Application ID URI]</strong> with correct ngrok domain in Azure AD App. See below screenshot</p>\n<p><img src=\"ApplicationIDURI.png\" alt=\"Application ID URI in Azure AD App\"></p>\n<blockquote>\n<p>At this stage, we have done all configurations related steps. Now let’s do some coding</p>\n</blockquote>\n<h2 id=\"4-React-SPA-Single-Page-Application-Implementation\"><a href=\"#4-React-SPA-Single-Page-Application-Implementation\" class=\"headerlink\" title=\"4. React SPA (Single Page Application) Implementation\"></a>4. React SPA (Single Page Application) Implementation</h2><p>Let’s look at SPA (Single Page App) first.</p>\n<p>Install following two npm packages</p>\n<pre><code>npm i @microsoft/teams-js\nnpm i axios</code></pre><p>First of all, We are going to get Microsoft Team context and then get an ID token using <strong>[GetAuthToken]</strong> method. see below implementation.</p>\n<blockquote>\n<p><i class=\"fa fa-info-circle page-section-info-icon-info\"></i><br>You cannot use ID token to call direclty microsoft graph api. You have to call <strong>[On Behalf Of Flow]</strong> to get access token using ID token. To see what’s in your ID token. Go to <a href=\"https://jwt.ms/\" target=\"_blank\" rel=\"noopener\">jwt.ms</a>.</p>\n</blockquote>\n<p>Once we got an ID token, we need to call a method called GetUserProfile in User controller <strong>/api/user/GetUserProfile</strong> and pass ID token as a parameter.</p>\n<pre><code class=\"Javascript\">\nimport React, { Component } from &quot;react&quot;;\nimport * as microsoftTeams from &quot;@microsoft/teams-js&quot;;\nimport Axios from &quot;axios&quot;;\n\nexport class UserProfile extends Component {\n  static displayName = UserProfile.name;\n\n  constructor(props) {\n    super(props);\n    this.state = { userInfo: [], loading: true };\n  }\n\ncomponentDidMount() {\n    microsoftTeams.initialize();\n    microsoftTeams.getContext((context) =&gt; {\n      microsoftTeams.authentication.getAuthToken({\n        successCallback: (token) =&gt; {\n          this.populateUserProfileInfo(token);\n          microsoftTeams.appInitialization.notifySuccess();\n        },\n        failureCallback: (error) =&gt; {\n          microsoftTeams.appInitialization.notifyFailure({\n            reason: microsoftTeams.appInitialization.FailedReason.AuthFailed,\n            error,\n          });\n        },\n        resources: [\n          &quot;api://helloteamsapp.com.ngrok.io/454c9845-4c41-4300-9846-ea009785ab8e&quot;,\n        ],\n      });\n    });\n  }\n\n  static renderUserInfo(user) {\n    debugger;\n    return (\n      &lt;&gt;\n        &lt;ul className=&quot;list-group&quot;&gt;\n          &lt;li className=&quot;list-group-item active&quot;&gt;{user.displayName}&lt;/li&gt;\n          &lt;li className=&quot;list-group-item&quot;&gt;{user.jobTitle}&lt;/li&gt;\n          &lt;li className=&quot;list-group-item&quot;&gt;{user.email}&lt;/li&gt;\n          &lt;li className=&quot;list-group-item&quot;&gt;{user.officeLocation}&lt;/li&gt;\n          &lt;li className=&quot;list-group-item&quot;&gt;{user.mobilePhone}&lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/&gt;\n    );\n  }\n\n  render() {\n    let contents = this.state.loading ? (\n      &lt;p&gt;\n        &lt;em&gt;Loading...&lt;/em&gt;\n      &lt;/p&gt;\n    ) : (\n      UserProfile.renderUserInfo(this.state.userInfo)\n    );\n\n    return (\n      &lt;div&gt;\n        &lt;h1 id=&quot;tabelLabel&quot;&gt;User Profile Info&lt;/h1&gt;\n        &lt;p&gt;\n          This component demonstrates fetching data from the Microsoft Graph\n          using Single Sign-On approach.\n        &lt;/p&gt;\n        {contents}\n      &lt;/div&gt;\n    );\n  }\n\n  async populateUserProfileInfo(token) {\n    const response = await Axios.get(&quot;/api/user/GetUserProfile&quot;, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    const data = response.data;\n    debugger;\n    this.setState({ userInfo: data, loading: false });\n  }\n}</code></pre>\n<h2 id=\"5-On-Behalf-Of-Flow-Implementation\"><a href=\"#5-On-Behalf-Of-Flow-Implementation\" class=\"headerlink\" title=\"5. On Behalf Of Flow Implementation\"></a>5. On Behalf Of Flow Implementation</h2><p>First of all, Install the following two packages.</p>\n<pre><code>Microsoft.Identity.Client\nMicrosoft.AspNetCore.Authentication.JwtBearer</code></pre><h3 id=\"Secure-API-Calls\"><a href=\"#Secure-API-Calls\" class=\"headerlink\" title=\"Secure API Calls\"></a>Secure API Calls</h3><p>We need to make sure that only authorized call can be made to our API. To achieve this, We need to add JWT bearer authentication Scheme to startup class under <strong>[ConfigureServices]</strong> method. See below code snippet.</p>\n<p>In JWT bearer authentication Scheme, we are checking if ID token contains correct Client ID and Application ID URI which we have configured in our Azure AD Application.</p>\n<script src=\"https://gist.github.com/ejazhussain/0b4f729d5e85300f009535c8f0ad71e0.js\"></script>\n\n<h3 id=\"Token-Acquisition-Service\"><a href=\"#Token-Acquisition-Service\" class=\"headerlink\" title=\"Token Acquisition Service\"></a>Token Acquisition Service</h3><p>In <strong>Token Acquisition Service</strong>, we are going to perform the following tasks</p>\n<ol>\n<li>Retrieve ID Token from the request</li>\n<li>Retrieve Graph Scopes from <strong>[appsettings.json]</strong> file</li>\n<li>We declare the type of the assertion we use for asserting the current user, in this case, a JSON Web Token (JWT).</li>\n<li>Create a Confidential Client Application instance. <a href=\"https://github.com/AzureAD/microsoft-authentication-library-for-dotnet/wiki/Client-Applications#public-client-and-confidential-client-applications\" target=\"_blank\" rel=\"noopener\">Click here for more info</a></li>\n<li>Get access token using <strong>[AcquireTokenOnBehalfOf]</strong> method.</li>\n</ol>\n<p>See below <em>GetOnBehalfAccessTokenAsync</em> method in <strong>Token Acquisition Service</strong> </p>\n<script src=\"https://gist.github.com/ejazhussain/a89166fb51971fd505d5f290488bc076.js\"></script>\n\n<h3 id=\"Graph-Service\"><a href=\"#Graph-Service\" class=\"headerlink\" title=\"Graph Service\"></a>Graph Service</h3><p>At this stage, we have got access token which we can use to call Microsoft Graph API to get information about the current user.</p>\n<p>see below code snippet for Graph Service which implements one method called <em>GetUserProfileAsync</em></p>\n<script src=\"https://gist.github.com/ejazhussain/d84ce456f313e7dfa021c3a63c64201d.js\"></script>\n\n\n<h2 id=\"6-Source-Code\"><a href=\"#6-Source-Code\" class=\"headerlink\" title=\"6. Source Code\"></a>6. Source Code</h2><a href=\"https://github.com/ejazhussain/Teams-PersonalApp-SSO\" class=\"is-primary button is-medium github\" target=\"_blank\" rel=\"noopener\">\n    <span class=\"icon is-medium\">\n      <i class=\"fab fa-github\"></i>\n    </span>\n    <span>Explore solution on GitHub</span>\n</a>"}],"PostAsset":[{"_id":"source/_posts/Sign-In-As-Different-User-In-SharePoint-2013-2016/featured.png","slug":"featured.png","post":"ckdbwg6ly0000ioettwxqn1om","modified":1,"renderable":0},{"_id":"source/_posts/azure-blob-storage-using-node/post-featured.png","post":"ckdbwg6mh0009ioetj4gawtgp","slug":"post-featured.png","modified":1,"renderable":1},{"_id":"source/_posts/how-to-usecontext-with-usereducer-in-spfx/react-hooks-listitems-output.png","post":"ckdbwg6mk000dioet63x3gnl3","slug":"react-hooks-listitems-output.png","modified":1,"renderable":1},{"_id":"source/_posts/Sign-In-As-Different-User-In-SharePoint-2013-2016/post-featured.png","post":"ckdbwg6ly0000ioettwxqn1om","slug":"post-featured.png","modified":1,"renderable":1},{"_id":"source/_posts/azure-appinsight-configurations-using-spfx-customizer/custom-properties.png","post":"ckdbwg6md0008ioetx4oyjfdp","slug":"custom-properties.png","modified":1,"renderable":1},{"_id":"source/_posts/azure-appinsight-configurations-using-spfx-customizer/post-featured.png","post":"ckdbwg6md0008ioetx4oyjfdp","slug":"post-featured.png","modified":1,"renderable":1},{"_id":"source/_posts/list-json-formatting/post-featured.png","post":"ckdbwg6mo000iioeti01qa7tt","slug":"post-featured.png","modified":1,"renderable":1},{"_id":"source/_posts/list-json-formatting/profile-card.png","post":"ckdbwg6mo000iioeti01qa7tt","slug":"profile-card.png","modified":1,"renderable":1},{"_id":"source/_posts/Import-Terms-From-CSV/groups.csv","post":"ckdbwg6m40002ioetz2vqk1xc","slug":"groups.csv","modified":1,"renderable":1},{"_id":"source/_posts/Import-Terms-From-CSV/post-featured.png","post":"ckdbwg6m40002ioetz2vqk1xc","slug":"post-featured.png","modified":1,"renderable":1},{"_id":"source/_posts/Import-Terms-From-CSV/samplecsv.png","post":"ckdbwg6m40002ioetz2vqk1xc","slug":"samplecsv.png","modified":1,"renderable":1},{"_id":"source/_posts/SharePoint-Online-Integration-with-Azure-App-Insights/create-new-azure-app-insight.png","post":"ckdbwg6m90006ioetp1vje8st","slug":"create-new-azure-app-insight.png","modified":1,"renderable":1},{"_id":"source/_posts/SharePoint-Online-Integration-with-Azure-App-Insights/customevents.png","post":"ckdbwg6m90006ioetp1vje8st","slug":"customevents.png","modified":1,"renderable":1},{"_id":"source/_posts/SharePoint-Online-Integration-with-Azure-App-Insights/js-code-snippet.png","post":"ckdbwg6m90006ioetp1vje8st","slug":"js-code-snippet.png","modified":1,"renderable":1},{"_id":"source/_posts/SharePoint-Online-Integration-with-Azure-App-Insights/post-featured.png","post":"ckdbwg6m90006ioetp1vje8st","slug":"post-featured.png","modified":1,"renderable":1},{"_id":"source/_posts/spfx-image-gallery/post-featured.png","post":"ckdbwg6mq000oioetfe3l9jrk","slug":"post-featured.png","modified":1,"renderable":1},{"_id":"source/_posts/spfx-image-gallery/spfx-image-gallery-with-panel.png","post":"ckdbwg6mq000oioetfe3l9jrk","slug":"spfx-image-gallery-with-panel.png","modified":1,"renderable":1},{"_id":"source/_posts/spfx-image-gallery/spfx-image-gallery.png","post":"ckdbwg6mq000oioetfe3l9jrk","slug":"spfx-image-gallery.png","modified":1,"renderable":1},{"_id":"source/_posts/spfx-image-gallery/taxonomy-query.png","post":"ckdbwg6mq000oioetfe3l9jrk","slug":"taxonomy-query.png","modified":1,"renderable":1},{"_id":"source/_posts/access-graphapi-using-spfx-with-securedazurefunction/SPFx-webapi-permissions.png","post":"ckdbwg6mj000cioetiv8g5aju","slug":"SPFx-webapi-permissions.png","modified":1,"renderable":1},{"_id":"source/_posts/access-graphapi-using-spfx-with-securedazurefunction/add-api-scope.png","post":"ckdbwg6mj000cioetiv8g5aju","slug":"add-api-scope.png","modified":1,"renderable":1},{"_id":"source/_posts/access-graphapi-using-spfx-with-securedazurefunction/app-manifest.png","post":"ckdbwg6mj000cioetiv8g5aju","slug":"app-manifest.png","modified":1,"renderable":1},{"_id":"source/_posts/access-graphapi-using-spfx-with-securedazurefunction/azure-function-accesspolicy.png","post":"ckdbwg6mj000cioetiv8g5aju","slug":"azure-function-accesspolicy.png","modified":1,"renderable":1},{"_id":"source/_posts/access-graphapi-using-spfx-with-securedazurefunction/create-self-signed-certificate.png","post":"ckdbwg6mj000cioetiv8g5aju","slug":"create-self-signed-certificate.png","modified":1,"renderable":1},{"_id":"source/_posts/access-graphapi-using-spfx-with-securedazurefunction/graph-api-permissions.png","post":"ckdbwg6mj000cioetiv8g5aju","slug":"graph-api-permissions.png","modified":1,"renderable":1},{"_id":"source/_posts/access-graphapi-using-spfx-with-securedazurefunction/keyvault.png","post":"ckdbwg6mj000cioetiv8g5aju","slug":"keyvault.png","modified":1,"renderable":1},{"_id":"source/_posts/spfx-office365-reports/chartjs-redraw-method.png","post":"ckdbwg6mp000mioetzfdk2x2s","slug":"chartjs-redraw-method.png","modified":1,"renderable":1},{"_id":"source/_posts/spfx-office365-reports/final-output-onedrive.png","post":"ckdbwg6mp000mioetzfdk2x2s","slug":"final-output-onedrive.png","modified":1,"renderable":1},{"_id":"source/_posts/spfx-office365-reports/final-output-outlook.png","post":"ckdbwg6mp000mioetzfdk2x2s","slug":"final-output-outlook.png","modified":1,"renderable":1},{"_id":"source/_posts/spfx-office365-reports/final-output-sharepoint.png","post":"ckdbwg6mp000mioetzfdk2x2s","slug":"final-output-sharepoint.png","modified":1,"renderable":1},{"_id":"source/_posts/spfx-office365-reports/graph-api-permissions-usage-reports.png","post":"ckdbwg6mp000mioetzfdk2x2s","slug":"graph-api-permissions-usage-reports.png","modified":1,"renderable":1},{"_id":"source/_posts/spfx-office365-reports/post-featured.png","post":"ckdbwg6mp000mioetzfdk2x2s","slug":"post-featured.png","modified":1,"renderable":1},{"_id":"source/_posts/spfx-office365-reports/spfx-dependency-Injection.png","post":"ckdbwg6mp000mioetzfdk2x2s","slug":"spfx-dependency-Injection.png","modified":1,"renderable":1},{"_id":"source/_posts/microsoft-graph-extensions-in-spfx/Thumbs.db","post":"ckdbwg6mn000hioet89ckjulv","slug":"Thumbs.db","modified":1,"renderable":1},{"_id":"source/_posts/microsoft-graph-extensions-in-spfx/create-graph-extension-schema.png","post":"ckdbwg6mn000hioet89ckjulv","slug":"create-graph-extension-schema.png","modified":1,"renderable":1},{"_id":"source/_posts/microsoft-graph-extensions-in-spfx/create-graph-extension.png","post":"ckdbwg6mn000hioet89ckjulv","slug":"create-graph-extension.png","modified":1,"renderable":1},{"_id":"source/_posts/microsoft-graph-extensions-in-spfx/delete-graph-extension.png","post":"ckdbwg6mn000hioet89ckjulv","slug":"delete-graph-extension.png","modified":1,"renderable":1},{"_id":"source/_posts/microsoft-graph-extensions-in-spfx/get-graph-extension.png","post":"ckdbwg6mn000hioet89ckjulv","slug":"get-graph-extension.png","modified":1,"renderable":1},{"_id":"source/_posts/microsoft-graph-extensions-in-spfx/graph-extension-user-permissions.png","post":"ckdbwg6mn000hioet89ckjulv","slug":"graph-extension-user-permissions.png","modified":1,"renderable":1},{"_id":"source/_posts/microsoft-graph-extensions-in-spfx/patch-graph-extension.png","post":"ckdbwg6mn000hioet89ckjulv","slug":"patch-graph-extension.png","modified":1,"renderable":1},{"_id":"source/_posts/microsoft-graph-extensions-in-spfx/post-featured.jpg","slug":"post-featured.jpg","post":"ckdbwg6mn000hioet89ckjulv","modified":1,"renderable":0},{"_id":"source/_posts/microsoft-graph-extensions-in-spfx/post-featured1.png","slug":"post-featured1.png","post":"ckdbwg6mn000hioet89ckjulv","modified":1,"renderable":0},{"_id":"source/_posts/sharepoint-approval-task-using-flow/approve-reject-comments.png","post":"ckdbwg6ms000tioeth4r9x744","slug":"approve-reject-comments.png","modified":1,"renderable":1},{"_id":"source/_posts/sharepoint-approval-task-using-flow/complete-flow-steps.png","post":"ckdbwg6ms000tioeth4r9x744","slug":"complete-flow-steps.png","modified":1,"renderable":1},{"_id":"source/_posts/sharepoint-approval-task-using-flow/conditon.png","post":"ckdbwg6ms000tioeth4r9x744","slug":"conditon.png","modified":1,"renderable":1},{"_id":"source/_posts/sharepoint-approval-task-using-flow/confirmation-email.png","post":"ckdbwg6ms000tioeth4r9x744","slug":"confirmation-email.png","modified":1,"renderable":1},{"_id":"source/_posts/sharepoint-approval-task-using-flow/content-approval-status.png","post":"ckdbwg6ms000tioeth4r9x744","slug":"content-approval-status.png","modified":1,"renderable":1},{"_id":"source/_posts/sharepoint-approval-task-using-flow/flow-blank-template.png","post":"ckdbwg6ms000tioeth4r9x744","slug":"flow-blank-template.png","modified":1,"renderable":1},{"_id":"source/_posts/sharepoint-approval-task-using-flow/flow-checker.png","post":"ckdbwg6ms000tioeth4r9x744","slug":"flow-checker.png","modified":1,"renderable":1},{"_id":"source/_posts/sharepoint-approval-task-using-flow/get-file-metadata.png","post":"ckdbwg6ms000tioeth4r9x744","slug":"get-file-metadata.png","modified":1,"renderable":1},{"_id":"source/_posts/sharepoint-approval-task-using-flow/item-created-modified.png","post":"ckdbwg6ms000tioeth4r9x744","slug":"item-created-modified.png","modified":1,"renderable":1},{"_id":"source/_posts/sharepoint-approval-task-using-flow/list-approver-response.png","post":"ckdbwg6ms000tioeth4r9x744","slug":"list-approver-response.png","modified":1,"renderable":1},{"_id":"source/_posts/sharepoint-approval-task-using-flow/post-featured.png","post":"ckdbwg6ms000tioeth4r9x744","slug":"post-featured.png","modified":1,"renderable":1},{"_id":"source/_posts/sharepoint-approval-task-using-flow/project-list.png","post":"ckdbwg6ms000tioeth4r9x744","slug":"project-list.png","modified":1,"renderable":1},{"_id":"source/_posts/sharepoint-approval-task-using-flow/send-email-action.png","post":"ckdbwg6ms000tioeth4r9x744","slug":"send-email-action.png","modified":1,"renderable":1},{"_id":"source/_posts/sharepoint-approval-task-using-flow/start-approval-action.png","post":"ckdbwg6ms000tioeth4r9x744","slug":"start-approval-action.png","modified":1,"renderable":1},{"_id":"source/_posts/sharepoint-approval-task-using-flow/task-notification-email.png","slug":"task-notification-email.png","post":"ckdbwg6ms000tioeth4r9x744","modified":1,"renderable":0},{"_id":"source/_posts/msteams-staticapp-sso/ApplicationIDURI.png","post":"ckdbwg6o0002oioet4iptehde","slug":"ApplicationIDURI.png","modified":1,"renderable":1},{"_id":"source/_posts/msteams-staticapp-sso/azure-ad-auth.jpg","post":"ckdbwg6o0002oioet4iptehde","slug":"azure-ad-auth.jpg","modified":1,"renderable":1},{"_id":"source/_posts/msteams-staticapp-sso/final-output.png","post":"ckdbwg6o0002oioet4iptehde","slug":"final-output.png","modified":1,"renderable":1},{"_id":"source/_posts/msteams-staticapp-sso/ngrok.png","post":"ckdbwg6o0002oioet4iptehde","slug":"ngrok.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckdbwg6ly0000ioettwxqn1om","category_id":"ckdbwg6m70004ioet9ea89b95","_id":"ckdbwg6ml000eioet83wj32lk"},{"post_id":"ckdbwg6m40002ioetz2vqk1xc","category_id":"ckdbwg6mi000aioet1cjawtkr","_id":"ckdbwg6mo000jioet37o2jrwd"},{"post_id":"ckdbwg6m90006ioetp1vje8st","category_id":"ckdbwg6ml000fioetpv5vckwo","_id":"ckdbwg6mr000qioet9r25atka"},{"post_id":"ckdbwg6md0008ioetx4oyjfdp","category_id":"ckdbwg6mp000kioet3raageuu","_id":"ckdbwg6mt000vioet3kafuw2d"},{"post_id":"ckdbwg6mq000oioetfe3l9jrk","category_id":"ckdbwg6mp000kioet3raageuu","_id":"ckdbwg6mv000yioetc8a4o2jj"},{"post_id":"ckdbwg6mh0009ioetj4gawtgp","category_id":"ckdbwg6mr000rioet3zu17ttc","_id":"ckdbwg6mv0012ioet7fwteeie"},{"post_id":"ckdbwg6mj000cioetiv8g5aju","category_id":"ckdbwg6mp000kioet3raageuu","_id":"ckdbwg6mw0015ioetwxu9cq8o"},{"post_id":"ckdbwg6mk000dioet63x3gnl3","category_id":"ckdbwg6mp000kioet3raageuu","_id":"ckdbwg6mx0019ioet539z8la5"},{"post_id":"ckdbwg6mn000hioet89ckjulv","category_id":"ckdbwg6mr000rioet3zu17ttc","_id":"ckdbwg6my001cioetn5ynj2cr"},{"post_id":"ckdbwg6mo000iioeti01qa7tt","category_id":"ckdbwg6mx0018ioetg505f4wv","_id":"ckdbwg6n0001hioetplmgleud"},{"post_id":"ckdbwg6mp000mioetzfdk2x2s","category_id":"ckdbwg6mr000rioet3zu17ttc","_id":"ckdbwg6n1001kioethwu5fmj7"},{"post_id":"ckdbwg6ms000tioeth4r9x744","category_id":"ckdbwg6n0001gioetgogbzlsb","_id":"ckdbwg6n1001mioetbn27zfyw"},{"post_id":"ckdbwg6o0002oioet4iptehde","category_id":"ckdbwg6o3002qioetchdvfax0","_id":"ckdbwg6o5002tioet5azmlb1r"}],"PostTag":[{"post_id":"ckdbwg6ly0000ioettwxqn1om","tag_id":"ckdbwg6m80005ioeteokb14d1","_id":"ckdbwg6mq000nioetp8ca88kh"},{"post_id":"ckdbwg6ly0000ioettwxqn1om","tag_id":"ckdbwg6mi000bioet5ard73o0","_id":"ckdbwg6mr000pioetlmu3u4g4"},{"post_id":"ckdbwg6ly0000ioettwxqn1om","tag_id":"ckdbwg6ml000gioetkuutqufr","_id":"ckdbwg6ms000uioet6mzifijm"},{"post_id":"ckdbwg6m40002ioetz2vqk1xc","tag_id":"ckdbwg6mp000lioet4ykie3kt","_id":"ckdbwg6mv000zioetbfy4ct7q"},{"post_id":"ckdbwg6m40002ioetz2vqk1xc","tag_id":"ckdbwg6mr000sioetj1ds1xel","_id":"ckdbwg6mv0010ioetezjmdf3s"},{"post_id":"ckdbwg6m90006ioetp1vje8st","tag_id":"ckdbwg6mt000xioetn0gj53po","_id":"ckdbwg6mx0017ioetlrlbbt91"},{"post_id":"ckdbwg6m90006ioetp1vje8st","tag_id":"ckdbwg6mw0013ioet75k3io8e","_id":"ckdbwg6my001aioetcbbx9zpn"},{"post_id":"ckdbwg6md0008ioetx4oyjfdp","tag_id":"ckdbwg6mx0016ioetpry5gxwk","_id":"ckdbwg6mz001fioetd6kx7oe1"},{"post_id":"ckdbwg6md0008ioetx4oyjfdp","tag_id":"ckdbwg6my001bioetp16ducb4","_id":"ckdbwg6n0001iioet73tti8nv"},{"post_id":"ckdbwg6mh0009ioetj4gawtgp","tag_id":"ckdbwg6mz001eioetkguyf5zn","_id":"ckdbwg6n1001oioetp683gway"},{"post_id":"ckdbwg6mh0009ioetj4gawtgp","tag_id":"ckdbwg6n0001jioet9k4h9nlm","_id":"ckdbwg6n2001pioeteoldg565"},{"post_id":"ckdbwg6mh0009ioetj4gawtgp","tag_id":"ckdbwg6n1001lioetpcut1pw4","_id":"ckdbwg6n2001rioetq2bgoywf"},{"post_id":"ckdbwg6mj000cioetiv8g5aju","tag_id":"ckdbwg6n1001nioets9yrk71f","_id":"ckdbwg6n3001uioetovxeutxq"},{"post_id":"ckdbwg6mj000cioetiv8g5aju","tag_id":"ckdbwg6n2001qioetixik4sjk","_id":"ckdbwg6n3001vioetbrpzpiv8"},{"post_id":"ckdbwg6mj000cioetiv8g5aju","tag_id":"ckdbwg6n2001sioetmnlnhf8o","_id":"ckdbwg6n3001xioetia1p511z"},{"post_id":"ckdbwg6mk000dioet63x3gnl3","tag_id":"ckdbwg6n2001tioete8m4znpb","_id":"ckdbwg6n4001zioetzyvdi7fr"},{"post_id":"ckdbwg6mk000dioet63x3gnl3","tag_id":"ckdbwg6n2001sioetmnlnhf8o","_id":"ckdbwg6n40020ioetbgl8gazm"},{"post_id":"ckdbwg6mn000hioet89ckjulv","tag_id":"ckdbwg6n4001yioetcb0djs8y","_id":"ckdbwg6n50023ioetjk58e3ey"},{"post_id":"ckdbwg6mn000hioet89ckjulv","tag_id":"ckdbwg6my001bioetp16ducb4","_id":"ckdbwg6n50024ioet1vggqr1g"},{"post_id":"ckdbwg6mo000iioeti01qa7tt","tag_id":"ckdbwg6n50022ioetovjawcml","_id":"ckdbwg6n60027ioetegztfx45"},{"post_id":"ckdbwg6mo000iioeti01qa7tt","tag_id":"ckdbwg6n50025ioetcmd05rxi","_id":"ckdbwg6n60028ioetmpnetc8f"},{"post_id":"ckdbwg6mp000mioetzfdk2x2s","tag_id":"ckdbwg6my001bioetp16ducb4","_id":"ckdbwg6n7002cioetjwckdl7u"},{"post_id":"ckdbwg6mp000mioetzfdk2x2s","tag_id":"ckdbwg6n4001yioetcb0djs8y","_id":"ckdbwg6n8002dioetrhpp473c"},{"post_id":"ckdbwg6mp000mioetzfdk2x2s","tag_id":"ckdbwg6n7002aioetckm68djk","_id":"ckdbwg6n8002fioetuh7d5lnk"},{"post_id":"ckdbwg6mq000oioetfe3l9jrk","tag_id":"ckdbwg6my001bioetp16ducb4","_id":"ckdbwg6n9002hioetrbyuib57"},{"post_id":"ckdbwg6mq000oioetfe3l9jrk","tag_id":"ckdbwg6n8002eioetmxnnh47e","_id":"ckdbwg6n9002iioetsuqj6nfh"},{"post_id":"ckdbwg6ms000tioeth4r9x744","tag_id":"ckdbwg6n8002gioetlfmsyc0f","_id":"ckdbwg6na002lioet3w9mrdfn"},{"post_id":"ckdbwg6ms000tioeth4r9x744","tag_id":"ckdbwg6n9002jioetdkew9i4j","_id":"ckdbwg6na002mioetpby8qjhs"},{"post_id":"ckdbwg6ms000tioeth4r9x744","tag_id":"ckdbwg6mw0013ioet75k3io8e","_id":"ckdbwg6na002nioet5yv1au8p"},{"post_id":"ckdbwg6o0002oioet4iptehde","tag_id":"ckdbwg6o4002rioetw04r6i5e","_id":"ckdbwg6o6002uioetwy9xxn3g"},{"post_id":"ckdbwg6o0002oioet4iptehde","tag_id":"ckdbwg6o5002sioetzx3q4e9z","_id":"ckdbwg6o6002vioettf15xlgw"}],"Tag":[{"name":"SharePoint administration","_id":"ckdbwg6m80005ioeteokb14d1"},{"name":"SharePoint 2013","_id":"ckdbwg6mi000bioet5ard73o0"},{"name":"SharePoint 2016","_id":"ckdbwg6ml000gioetkuutqufr"},{"name":"Sharepoint TermStore","_id":"ckdbwg6mp000lioet4ykie3kt"},{"name":"PnP PowerShell","_id":"ckdbwg6mr000sioetj1ds1xel"},{"name":"Azure Application Insight","_id":"ckdbwg6mt000xioetn0gj53po"},{"name":"SharePoint Online","_id":"ckdbwg6mw0013ioet75k3io8e"},{"name":"Azure App Insights","_id":"ckdbwg6mx0016ioetpry5gxwk"},{"name":"SPFX","_id":"ckdbwg6my001bioetp16ducb4"},{"name":"Azure","_id":"ckdbwg6mz001eioetkguyf5zn"},{"name":"Azure Blog Storage","_id":"ckdbwg6n0001jioet9k4h9nlm"},{"name":"Node JS","_id":"ckdbwg6n1001lioetpcut1pw4"},{"name":"Azure Function","_id":"ckdbwg6n1001nioets9yrk71f"},{"name":"Authentication","_id":"ckdbwg6n2001qioetixik4sjk"},{"name":"SPFx","_id":"ckdbwg6n2001sioetmnlnhf8o"},{"name":"React Hooks","_id":"ckdbwg6n2001tioete8m4znpb"},{"name":"Microsoft Graph","_id":"ckdbwg6n4001yioetcb0djs8y"},{"name":"Modern SharePoint List","_id":"ckdbwg6n50022ioetovjawcml"},{"name":"JSON Formatting","_id":"ckdbwg6n50025ioetcmd05rxi"},{"name":"Charts","_id":"ckdbwg6n7002aioetckm68djk"},{"name":"Office UI Fabric","_id":"ckdbwg6n8002eioetmxnnh47e"},{"name":"Microsoft Flow","_id":"ckdbwg6n8002gioetlfmsyc0f"},{"name":"Workflow","_id":"ckdbwg6n9002jioetdkew9i4j"},{"name":"Teams Personal Tab","_id":"ckdbwg6o4002rioetw04r6i5e"},{"name":"Microsoft Graph API","_id":"ckdbwg6o5002sioetzx3q4e9z"}]}}